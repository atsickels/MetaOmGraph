diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ComputeMean.java b/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ComputeMean.java
deleted file mode 100644
index 22f6f57..0000000
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ComputeMean.java
+++ /dev/null
@@ -1,48 +0,0 @@
-package edu.iastate.metnet.metaomgraph;
-
-import java.util.List;
-
-public class ComputeMean {
-
-	public int getMean(List<Integer> l) {
-
-		int mean = 0;
-
-		if(!l.isEmpty()) {
-			for(int x : l) {
-				mean += x;
-			}
-			mean /= l.size();
-		}
-		return mean;
-	}
-	
-	
-	public long getMeanLong(List<Long> l) {
-
-		long mean = 0;
-
-		if(!l.isEmpty()) {
-			for(long x : l) {
-				mean += x;
-			}
-			mean /= l.size();
-		}
-		return mean;
-	}
-	
-	
-	public double getMeanDouble(List<Double> d) {
-
-		double mean = 0;
-
-		if(!d.isEmpty()) {
-			for(double x : d) {
-				mean += x;
-			}
-			mean /= d.size();
-		}
-		return mean;
-	}
-
-}
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/FilterableTableModel.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/FilterableTableModel.java
index bc4d264..d903c11 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/FilterableTableModel.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/FilterableTableModel.java
@@ -1,17 +1,12 @@
 package edu.iastate.metnet.metaomgraph;
 
-import edu.iastate.metnet.metaomgraph.logging.ActionProperties;
 import edu.iastate.metnet.metaomgraph.ui.NoneditableTableModel;
-import edu.iastate.metnet.metaomgraph.ui.ReproducibilityDashboardPanel;
 
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.io.IOException;
 import java.security.InvalidParameterException;
-import java.text.SimpleDateFormat;
 import java.util.Collection;
-import java.util.Date;
-import java.util.HashMap;
 import java.util.Iterator;
 import java.util.TreeMap;
 import java.util.TreeSet;
@@ -28,11 +23,7 @@ import javax.swing.table.TableModel;
 import javax.swing.text.BadLocationException;
 import javax.swing.text.Document;
 
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
 public class FilterableTableModel extends AbstractTableModel implements DocumentListener, TableModelListener {
-	
 	private TableModel model;
 	private Object[][] filteredData;
 	private TreeMap<Integer, Integer> rowMap;
@@ -189,23 +180,6 @@ public class FilterableTableModel extends AbstractTableModel implements Document
 		filterToRows(hits);
 		manualFilter = false;
 		fireTableChanged(new TableModelEvent(this));
-		
-		//Harsha - Reproducibility log
-		
-		HashMap<String,Object> actionMap = new HashMap<String,Object>();
-		actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-		
-		HashMap<String,Object> dataMap = new HashMap<String,Object>();
-		
-		dataMap.put("filterStrings", values);
-		dataMap.put("numHits", hits.size());
-		
-		HashMap<String,Object> result = new HashMap<String,Object>();
-		result.put("result", "OK");
-		
-		ActionProperties filterAction = new ActionProperties("filter",actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-		filterAction.logActionProperties();
-		
 	}
 
 	public synchronized void filterToRows(int[] rows) {
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/MetaOmGraph.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/MetaOmGraph.java
index 5ce1601..35be8f0 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/MetaOmGraph.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/MetaOmGraph.java
@@ -6,17 +6,12 @@ import java.awt.Component;
 import java.awt.Dimension;
 import java.awt.Event;
 import java.awt.EventQueue;
-import java.awt.GraphicsDevice;
-import java.awt.GraphicsEnvironment;
 import java.awt.HeadlessException;
 import java.awt.Image;
-import java.awt.Rectangle;
 import java.awt.SplashScreen;
 import java.awt.Toolkit;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
-import java.awt.event.ItemEvent;
-import java.awt.event.ItemListener;
 import java.awt.event.KeyEvent;
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
@@ -28,28 +23,20 @@ import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
-import java.io.PrintWriter;
-import java.io.StringWriter;
 import java.lang.reflect.InvocationTargetException;
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.text.SimpleDateFormat;
-import java.time.Instant;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
-import java.util.Date;
 import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 import java.util.TreeSet;
 import java.util.Vector;
 import javax.imageio.ImageIO;
 import javax.swing.AbstractAction;
-import javax.swing.Box;
 import javax.swing.ImageIcon;
-import javax.swing.JButton;
 import javax.swing.JCheckBoxMenuItem;
 import javax.swing.JComponent;
 import javax.swing.JDesktopPane;
@@ -57,20 +44,13 @@ import javax.swing.JDialog;
 import javax.swing.JFileChooser;
 import javax.swing.JFrame;
 import javax.swing.JInternalFrame;
-import javax.swing.JLabel;
-import javax.swing.JList;
 import javax.swing.JMenu;
 import javax.swing.JMenuBar;
 import javax.swing.JMenuItem;
 import javax.swing.JOptionPane;
 import javax.swing.JPanel;
-import javax.swing.JSplitPane;
 import javax.swing.JTable;
-import javax.swing.JTextField;
-import javax.swing.JTextPane;
-import javax.swing.JToggleButton;
 import javax.swing.KeyStroke;
-import javax.swing.ListSelectionModel;
 import javax.swing.ToolTipManager;
 import javax.swing.UIManager;
 import javax.swing.WindowConstants;
@@ -81,29 +61,13 @@ import javax.swing.event.MenuListener;
 import javax.swing.filechooser.FileFilter;
 import javax.swing.plaf.ColorUIResource;
 
-import org.apache.logging.log4j.Level;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.ThreadContext;
-import org.apache.logging.log4j.core.Appender;
-import org.apache.logging.log4j.core.LoggerContext;
-import org.apache.logging.log4j.core.appender.FileAppender;
-import org.apache.logging.log4j.core.config.AppenderRef;
-import org.apache.logging.log4j.core.config.Configuration;
-import org.apache.logging.log4j.core.config.Configurator;
-import org.apache.logging.log4j.core.config.LoggerConfig;
-import org.apache.logging.log4j.core.config.builder.api.AppenderComponentBuilder;
-import org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder;
-import org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory;
-import org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
-import org.apache.logging.log4j.core.config.builder.impl.BuiltConfiguration;
 //import org.biomage.examples.GetToDataExample;
 import org.jdom.JDOMException;
 
 
 import com.apple.eawt.Application;
 import com.l2fprod.common.swing.JTipOfTheDay;
-import com.l2fprod.common.swing.UserPreferences;
+
 
 //import com.l2fprod.common.swing.*;
 
@@ -112,8 +76,6 @@ import edu.iastate.metnet.arrayexpress.v2.AEProjectMaker;
 import edu.iastate.metnet.metaomgraph.AnnotationImporter.Annotation;
 import edu.iastate.metnet.metaomgraph.MetaOmTips.MetaOmShowTipsChoice;
 import edu.iastate.metnet.metaomgraph.chart.MetaOmChartPanel;
-import edu.iastate.metnet.metaomgraph.logging.ActionProperties;
-import edu.iastate.metnet.metaomgraph.logging.GeneralProperties;
 import edu.iastate.metnet.metaomgraph.ui.AboutFrame;
 import edu.iastate.metnet.metaomgraph.ui.AboutFrame4;
 import edu.iastate.metnet.metaomgraph.ui.ClickableLabel;
@@ -126,7 +88,6 @@ import edu.iastate.metnet.metaomgraph.ui.Metadataviewer;
 import edu.iastate.metnet.metaomgraph.ui.NewProjectDialog;
 import edu.iastate.metnet.metaomgraph.ui.ProjectPropertiesPanel;
 import edu.iastate.metnet.metaomgraph.ui.ReadMetadata;
-import edu.iastate.metnet.metaomgraph.ui.ReproducibilityDashboardPanel;
 import edu.iastate.metnet.metaomgraph.ui.SearchByExpressionFrame;
 import edu.iastate.metnet.metaomgraph.ui.SetColTypes;
 import edu.iastate.metnet.metaomgraph.ui.WelcomePanel;
@@ -158,45 +119,6 @@ public class MetaOmGraph implements ActionListener {
 	 * plotBackgroundColor = null;
 	 */
 
-	/*Harsha- Added logger */
-	public static Logger logger;
-	public static Appender appender;
-	private static ReproducibilityDashboardPanel rdp;
-	private static ActionProperties openProjectAction;
-	private static int currentProjectActionId;
-	private static String currentLogFilePath;
-	private static boolean loggingRequired;
-	private static boolean permanentLogging;
-
-
-	public static Logger getLogger() {
-		return logger;
-	}
-	public static void setLogger(Logger l) {
-		logger = l;
-	}
-	public static boolean getLoggingRequired() {
-		return loggingRequired;
-	}
-	public static void setLoggingRequired(boolean lr) {
-		loggingRequired = lr;
-	}
-	public static boolean getPermanentLogging() {
-		return permanentLogging;
-	}
-	public static void setPermanentLogging(boolean pl) {
-		permanentLogging = pl;
-	}
-	public static String getCurrentLogFilePath() {
-		return currentLogFilePath;
-	}
-	public static void setCurrentLogFilePath(String log) {
-		currentLogFilePath = log;
-	}
-	public static ReproducibilityDashboardPanel getReproducibilityDashboardPanel() {
-		return rdp;
-	}
-
 	public static Color getTableColor1() {
 		return currentTheme.getTableColor1();
 	}
@@ -290,7 +212,7 @@ public class MetaOmGraph implements ActionListener {
 			mogThemes.remove(name);
 		}
 	}
-
+	
 
 	public static HashMap<String, MOGColorThemes> getAllThemes() {
 		return mogThemes;
@@ -329,9 +251,6 @@ public class MetaOmGraph implements ActionListener {
 		return currentmogThemeName;
 	}
 
-	public static int getCurrentProjectActionId() {
-		return currentProjectActionId;
-	}
 	public static MOGColorThemes getCurrentTheme() {
 		return mogThemes.get(getCurrentThemeName());
 	}
@@ -565,9 +484,6 @@ public class MetaOmGraph implements ActionListener {
 	/** Internal frame which displays a table of the active project's entries */
 	private static JInternalFrame projectTableFrame;
 
-	/** Split pane which displays the actions logged and provides the previous session replay option*/
-	private static JInternalFrame replayFrame;
-
 	/** The table panel that appears whenever a project is open */
 	private static MetaOmTablePanel activeTablePanel;
 
@@ -582,7 +498,7 @@ public class MetaOmGraph implements ActionListener {
 
 	/** Items on the File menu */
 	private static JMenuItem newProjectItem, newSOFTItem, newMetabolomicsItem, openProjectItem,
-	saveProjectItem, saveProjectAsItem, quitItem, mergeItem;
+			saveProjectItem, saveProjectAsItem, quitItem, mergeItem;
 
 	private static JMenu newProjectMenu;
 
@@ -596,10 +512,6 @@ public class MetaOmGraph implements ActionListener {
 	/** The Project menu */
 	private static JMenu projectMenu;
 
-
-	/** Reproducibility log menu */
-	private static JToggleButton ReproducibilityLogMenu;
-
 	// tools menu urmi
 	private static JMenu toolsMenu;
 	private static JMenu infoButtonMenu;
@@ -633,7 +545,7 @@ public class MetaOmGraph implements ActionListener {
 	private static JMenuItem closeProjectItem, loadInfoItem, projectPropertiesItem, excludeSamplesItem;
 	// urmi
 	private static JMenuItem openMDColTypes, openInfoColTypes, openMetadataStructureItem, metadataViewerItem,
-	loadInfoItem2, loadTree;
+			loadInfoItem2, loadTree;
 
 	private static JCheckBoxMenuItem logDataItem;
 
@@ -642,8 +554,8 @@ public class MetaOmGraph implements ActionListener {
 
 	/** Items on the Import Annotations menu */
 	private static JMenuItem importHumanItem, importMouseItem, importSoybeanItem, importRatItem, importYeastItem,
-	importBarleyItem, importRiceItem, importCustomItem, import133plus2Item, importArabidopsisItem,
-	importYeast2Item, importZebrafishItem;
+			importBarleyItem, importRiceItem, importCustomItem, import133plus2Item, importArabidopsisItem,
+			importYeast2Item, importZebrafishItem;
 
 	private static JMenu importRatMenu;
 
@@ -740,13 +652,6 @@ public class MetaOmGraph implements ActionListener {
 		init(false);
 	}
 
-	public static JToggleButton getReproducibilityLogMenu() {
-		return ReproducibilityLogMenu;
-	}
-
-	public static MetaOmTablePanel getActiveTablePanel() {
-		return activeTablePanel;
-	}
 	/**
 	 * Creates a set of variables for the start up process. Sets up and configures
 	 * the main window and desktop Creates the menu bar with corresponding elements.
@@ -768,11 +673,9 @@ public class MetaOmGraph implements ActionListener {
 		recentProjects = new Vector<File>();
 
 		File homeDir = new File(System.getProperty("user.home"));
-
 		File prefsFile = new File(homeDir, "metaomgraph.prefs");
 		if ((prefsFile.exists()) && (prefsFile.canRead())) {
 			try {
-
 				FileInputStream fis = new FileInputStream(prefsFile);
 				ObjectInputStream in = new ObjectInputStream(fis);
 
@@ -803,24 +706,11 @@ public class MetaOmGraph implements ActionListener {
 						initThemes();
 						setCurrentTheme("light");
 					}
-
-					//UserPreferences up = new UserPreferences(recentProjects,showTips,lastThemeName);
 				} catch (Exception ex) {
 					initThemes();
 					setCurrentTheme("light");
 				}
 
-				//setting loggingRequired parameter for reproducibility logging
-								try {
-									boolean lr = (boolean)in.readObject();
-									MetaOmGraph.setLoggingRequired(lr);
-									MetaOmGraph.setPermanentLogging(lr);
-									
-								}
-								catch(Exception ex2) {
-									MetaOmGraph.setLoggingRequired(true);
-								}
-
 				in.close();
 			} catch (FileNotFoundException e1) {
 				e1.printStackTrace();
@@ -836,7 +726,7 @@ public class MetaOmGraph implements ActionListener {
 		initThemes();
 		setCurrentTheme("light");
 		mainWindow = new JFrame("MetaOmGraph");
-
+		
 		//urmi
 		///////////////enable debug mode//////////////////
 		ExceptionHandler.getInstance(mainWindow).setUseBuffer(useBuffer);
@@ -880,7 +770,7 @@ public class MetaOmGraph implements ActionListener {
 		newMetabolomicsItem.setMnemonic(KeyEvent.VK_M);
 		newMetabolomicsItem.setToolTipText(
 				"Create a new MetaOm project from the metabolomics database at http://plantmetabolomics.org");
-
+		
 		/*
 		 * Removed this newArrayExpressItem = new JMenuItem("From ArrayExpress...");
 		newArrayExpressItem.setActionCommand(NEW_PROJECT_ARRAYEXPRESS_COMMAND);
@@ -891,7 +781,7 @@ public class MetaOmGraph implements ActionListener {
 		// newProjectMenu.add(newSOFTItem);
 		// newProjectMenu.add(newMetabolomicsItem);
 		newProjectMenu.add(newArrayExpressItem);
-		 */
+		*/
 		newProjectMenu.add(newProjectItem);
 
 		openProjectItem = new JMenuItem("Open Project...");
@@ -933,13 +823,13 @@ public class MetaOmGraph implements ActionListener {
 		quitItem.setToolTipText("Exit this program");
 		quitItem.setAccelerator(
 				KeyStroke.getKeyStroke(KeyEvent.VK_Q, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
-
+		
 		closeProjectItem = new JMenuItem("Close project");
 		closeProjectItem.setMnemonic(KeyEvent.VK_C);
 		closeProjectItem.setActionCommand(CLOSE_PROJECT_COMMAND);
 		closeProjectItem.addActionListener(myself);
 		closeProjectItem.setToolTipText("Close all windows related to the active project");
-
+		
 		fileMenu.add(newProjectMenu);
 		fileMenu.add(openProjectItem);
 		fileMenu.add(closeProjectItem);
@@ -954,7 +844,7 @@ public class MetaOmGraph implements ActionListener {
 		projectMenu = new JMenu("Edit");
 		projectMenu.setMnemonic(KeyEvent.VK_P);
 		projectMenu.setEnabled(false);
-
+		
 		// closeProjectItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W,
 		// Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
 		//projectMenu.add(closeProjectItem); //urmi moved close project to file menu
@@ -1310,7 +1200,6 @@ public class MetaOmGraph implements ActionListener {
 		diffExpMenu.add(removeDiffExpResults);
 
 		toolsMenu.add(diffExpMenu);
-
 		///////////// end tool menu//////////////////
 
 		cascadeItem = new JMenuItem("Arrange Windows");
@@ -1482,69 +1371,8 @@ public class MetaOmGraph implements ActionListener {
 		aboutItem.addActionListener(myself);
 		helpMenu.add(aboutItem);
 		mainMenuBar.add(helpMenu);
-
-		//Harsha - reproducibility log menu
-
-		ReproducibilityLogMenu = new JToggleButton("History");
-		ReproducibilityLogMenu.setForeground(Color.BLUE);
-		ReproducibilityLogMenu.addItemListener(new ItemListener() {
-
-			JInternalFrame ReproducibilityDashboardFrame;
-
-			@Override
-			public void itemStateChanged(ItemEvent e) {
-
-				if ((ReproducibilityDashboardFrame != null) && (ReproducibilityDashboardFrame.isVisible())) {
-					//frame.toFront();
-					ReproducibilityDashboardFrame.setVisible(false);
-					return;
-				}
-				else if ((ReproducibilityDashboardFrame != null) && (!ReproducibilityDashboardFrame.isVisible()) && (!ReproducibilityDashboardFrame.isClosed())) {
-
-					ReproducibilityDashboardFrame.setVisible(true);
-					return;
-				}
-
-				ReproducibilityDashboardFrame =  new JInternalFrame("Playback");
-
-				rdp = new ReproducibilityDashboardPanel(myself);
-				ReproducibilityDashboardFrame.add(rdp);
-				desktop.add(ReproducibilityDashboardFrame);
-
-
-				ReproducibilityDashboardFrame.setClosable(true);
-				ReproducibilityDashboardFrame.setIconifiable(true);
-				ReproducibilityDashboardFrame.setMaximizable(false);
-				ReproducibilityDashboardFrame.setResizable(true);
-
-				GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
-				GraphicsDevice defaultScreen = ge.getDefaultScreenDevice();
-				Rectangle rect = defaultScreen.getDefaultConfiguration().getBounds();
-
-				//				int x = (int) rect.getMaxX() - 350;
-				//				int y = 0;
-				ReproducibilityDashboardFrame.setSize(550, (int)rect.getMaxY()-200);
-				ReproducibilityDashboardFrame.setLocation((ReproducibilityLogMenu.getX()+ReproducibilityLogMenu.getWidth())-550, 0);
-
-				ReproducibilityDashboardFrame.show();     
-
-				//				Integer [] a = new Integer[4];
-				//				a[0] = -1;
-				//				a[1] = -1;
-				//				a[2] = -1;
-				//				a[3] = -1;
-				//				rdp.addActionToLogTree(openProjectAction,a);
-
-			}
-
-		});
-
-		mainMenuBar.add(Box.createHorizontalGlue());
-		mainMenuBar.add(ReproducibilityLogMenu);
-
 		// Menu bar created
 
-
 		setMenuIcons();
 
 		modalMaker = new SimpleModalMaker();
@@ -1676,7 +1504,6 @@ public class MetaOmGraph implements ActionListener {
 
 		System.setProperty("sun.java2d.renderer.doChecks", "true");
 
-
 		try {
 			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
 			System.setProperty("sun.awt.noerasebackground", "true");
@@ -1756,12 +1583,8 @@ public class MetaOmGraph implements ActionListener {
 				out.writeObject(currentmogThemeName);
 				out.writeObject(mogThemes);
 
-				//writing reproducibility logging required parameter
-				out.writeObject(permanentLogging);
-
 				out.close();
 				fos.close();
-
 			} catch (IOException e) {
 				JOptionPane.showMessageDialog(getMainWindow(), "Unable to write to preferences file.", "Error",
 						JOptionPane.ERROR_MESSAGE);
@@ -1834,8 +1657,6 @@ public class MetaOmGraph implements ActionListener {
 		projectTableFrame.setSize(800, 600);
 		projectTableFrame.show();
 		projectTableFrame.setName("projectdata.php");
-
-
 		activeTablePanel.setExtInfoDividerPos(.5);
 		saveProjectAsItem.setEnabled(true);
 		saveProjectItem.setEnabled(true);
@@ -1977,7 +1798,6 @@ public class MetaOmGraph implements ActionListener {
 			this.ignoreConsecutiveDelimiters = ignoreConsecutiveDelimiters;
 			this.blankValue = blankValue;
 			this.includeMetNet = includeMetNet;
-			
 		}
 
 		/**
@@ -2072,7 +1892,7 @@ public class MetaOmGraph implements ActionListener {
 				} else if (!activeProject.isUniqueDataCols()) {
 					JOptionPane.showMessageDialog(getMainWindow(),
 							source.getName()
-							+ " contains duplicate column names for data columns.\nPlease check your file.",
+									+ " contains duplicate column names for data columns.\nPlease check your file.",
 							"Error", JOptionPane.ERROR_MESSAGE);
 					activeProject = null;
 					closeProject();
@@ -2118,29 +1938,6 @@ public class MetaOmGraph implements ActionListener {
 				// urmi
 				fixTitle();
 				projectOpened();
-				
-				
-				try {
-					String projFileName = source.getAbsolutePath();
-
-					String projectName = projFileName.substring(projFileName.lastIndexOf(File.separator)+1,projFileName.lastIndexOf('.'));
-					String currDate = new SimpleDateFormat("yyyy-MM-dd_HHmmss").format(new Date());
-					String logFilePath = projFileName.substring(0,projFileName.lastIndexOf(File.separator))+"\\logs\\"+projectName+"_"+currDate+".log";
-
-
-					logger = updateLogger(logFilePath);
-					setCurrentLogFilePath(logFilePath);
-					
-					setLoggingRequired(true);
-					setPermanentLogging(true);
-					logGeneralProperties();
-					int newProjectId = logNewProject(source.getAbsolutePath(),extInfoFile.getAbsolutePath());
-
-					currentProjectActionId = newProjectId;
-				}
-				catch(Exception e) {
-
-				}
 
 				// if metadata is being read wait for the metadata read window to show up other
 				// wise just proceed with the data file to the main table
@@ -2157,7 +1954,6 @@ public class MetaOmGraph implements ActionListener {
 
 				}
 
-
 			} else {
 				// No need to report errors since MetaOmProject does it for
 				// us.
@@ -2192,15 +1988,6 @@ public class MetaOmGraph implements ActionListener {
 					 */
 					fixTitle();
 
-					//Harsha - reproducibility log
-					HashMap<String,Object> saveProjectParameters = new HashMap<String,Object>();
-					saveProjectParameters.put("mogFilePath",destination.getAbsolutePath());
-
-					HashMap<String,Object> result = new HashMap<String,Object>();
-					result.put("result", "OK");
-					ActionProperties saveProjectAction = new ActionProperties("save-as-project",saveProjectParameters,null,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-					saveProjectAction.logActionProperties();
-
 				}
 				addRecentProject(activeProjectFile);
 				return null;
@@ -2246,28 +2033,7 @@ public class MetaOmGraph implements ActionListener {
 				EventQueue.invokeAndWait(new Runnable() {
 					@Override
 					public void run() {
-
-						String projFileName = source.getAbsolutePath();
 						activeProject = new MetaOmProject(source);
-
-						String projectName = projFileName.substring(projFileName.lastIndexOf(File.separator)+1,projFileName.lastIndexOf('.'));
-						String currDate = new SimpleDateFormat("yyyy-MM-dd_HHmmss").format(new Date());
-						String logFilePath = projFileName.substring(0,projFileName.lastIndexOf(File.separator))+"\\logs\\"+projectName+"_"+currDate+".log";
-
-						if(getLoggingRequired()) {
-							logger = updateLogger(logFilePath);
-
-						}
-
-						setCurrentLogFilePath(logFilePath);
-
-						logGeneralProperties();
-						logOpenProject(projectName,source);
-
-
-						currentProjectActionId = openProjectAction.getActionNumber();
-
-
 					}
 				});
 			} catch (InvocationTargetException | InterruptedException e) {
@@ -2306,10 +2072,10 @@ public class MetaOmGraph implements ActionListener {
 
 			} else {
 				JOptionPane
-				.showMessageDialog(MetaOmGraph.getMainWindow(),
-						"There was a problem reading " + source.getName()
-						+ ".  Make sure it's a valid MetaOmGraph file.",
-						"Error", JOptionPane.ERROR_MESSAGE);
+						.showMessageDialog(MetaOmGraph.getMainWindow(),
+								"There was a problem reading " + source.getName()
+										+ ".  Make sure it's a valid MetaOmGraph file.",
+								"Error", JOptionPane.ERROR_MESSAGE);
 				activeProject = null;
 				closeProject();
 				desktop.validate();
@@ -2343,8 +2109,6 @@ public class MetaOmGraph implements ActionListener {
 		}
 		activeProjectFile = source;
 		projectOpened();
-
-
 		return true;
 	}
 
@@ -2361,18 +2125,6 @@ public class MetaOmGraph implements ActionListener {
 		if ((activeProject != null) && (activeProject.isChanged()))
 			if (!promptToSave())
 				return false;
-
-		//Harsha - reproducibility log
-		HashMap<String,Object> closeProjectParameters = new HashMap<String,Object>();
-		try {
-			closeProjectParameters.put("dataFilePath",activeProject.getSourceFile().getAbsolutePath());
-			closeProjectParameters.put("mogFilePath",activeProjectFile.getAbsolutePath());
-			closeProjectParameters.put("dimensions",String.valueOf(activeProject.getDataColumnCount()));
-			closeProjectParameters.put("parent", -1);
-		}
-		catch(Exception e) {
-
-		}
 		activeProject = null;
 		JInternalFrame[] closeUs = desktop.getAllFrames();
 		for (int x = 0; x < closeUs.length; x++)
@@ -2389,23 +2141,6 @@ public class MetaOmGraph implements ActionListener {
 				((JInternalFrame) (comps[x])).dispose();
 		MetaOmAnalyzer.reset();
 		// System.gc();
-
-		//Harsha - reproducibility log
-
-		try {
-			HashMap<String,Object> result = new HashMap<String,Object>();
-			result.put("result", "OK");
-			ActionProperties closeProjectAction = new ActionProperties("close-project",closeProjectParameters,null,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			closeProjectAction.logActionProperties();
-
-			currentProjectActionId = closeProjectAction.getActionNumber();
-			stopLogger();
-			getReproducibilityDashboardPanel().autoSaveLog(0);
-		}
-		catch(Exception e) {
-
-		}
-
 		return true;
 	}
 
@@ -3082,6 +2817,8 @@ public class MetaOmGraph implements ActionListener {
 			}
 			FileFilter xmlFilter = Utils.createFileFilter("xml", "XML Files");
 			final File dest = Utils.chooseFileToSave(xmlFilter, "xml", MetaOmGraph.getMainWindow(), true);
+			if(dest == null)
+				return;
 			new AnimatedSwingWorker("Exporting...", true) {
 
 				@Override
@@ -3090,26 +2827,6 @@ public class MetaOmGraph implements ActionListener {
 					return null;
 				}
 			}.start();
-
-			try {
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "Feature Metadata");
-
-				HashMap<String,Object> dataMap = new HashMap<String,Object>();
-				dataMap.put("UniqueID Column", (String)result);
-				dataMap.put("Export File Name", dest.getAbsolutePath());
-
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				resultLog.put("result", "OK");
-
-				ActionProperties createListAction = new ActionProperties("export-lists",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				createListAction.logActionProperties();
-			}
-			catch(Exception e1) {
-
-			}
 			return;
 		}
 		if (EXPORT_METNET3_LISTS_COMMAND.equals(e.getActionCommand())) {
@@ -3129,28 +2846,10 @@ public class MetaOmGraph implements ActionListener {
 					return null;
 				}
 			}.start();
-
-			//			try {
-			//				//Harsha - reproducibility log
-			//				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-			//				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-			//
-			//				HashMap<String,Object> dataMap = new HashMap<String,Object>();
-			//				dataMap.put("Import File Name", source.getAbsolutePath());
-			//				
-			//				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-			//				resultLog.put("result", "OK");
-			//
-			//				ActionProperties createListAction = new ActionProperties("import-list",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			//				createListAction.logActionProperties(logger);
-			//			}
-			//			catch(Exception e1) {
-			//
-			//			}
 			return;
 		}
-
-
+		
+		
 		/* urmi: this function is not used
 		if (IMPORT_METNET3_LISTS_COMMAND.equals(e.getActionCommand())) {
 			final MetNet3ListImportPanel importer;
@@ -3408,7 +3107,7 @@ public class MetaOmGraph implements ActionListener {
 				getDesktop().getAllFrames()[index].setSelected(true);
 			} catch (
 
-					Exception ex) {
+			Exception ex) {
 				ex.printStackTrace();
 				return;
 			}
@@ -3438,25 +3137,6 @@ public class MetaOmGraph implements ActionListener {
 			log10Item.setSelected(false);
 			sqrtItem.setSelected(false);
 			fixTitle();
-
-			try {
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "All");
-
-				HashMap<String,Object> dataMap = new HashMap<String,Object>();
-				dataMap.put("Transformation Name", "None");
-
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				resultLog.put("result", "OK");
-
-				ActionProperties changeTransformationAction = new ActionProperties("change-data-transformation",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				changeTransformationAction.logActionProperties();
-			}
-			catch(Exception e1) {
-
-			}
 			return;
 		}
 
@@ -3467,25 +3147,6 @@ public class MetaOmGraph implements ActionListener {
 			log10Item.setSelected(false);
 			sqrtItem.setSelected(false);
 			fixTitle();
-
-			try {
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "All");
-
-				HashMap<String,Object> dataMap = new HashMap<String,Object>();
-				dataMap.put("Transformation Name", "log2");
-
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				resultLog.put("result", "OK");
-
-				ActionProperties changeTransformationAction = new ActionProperties("change-data-transformation",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				changeTransformationAction.logActionProperties();
-			}
-			catch(Exception e1) {
-
-			}
 			return;
 		}
 
@@ -3496,25 +3157,6 @@ public class MetaOmGraph implements ActionListener {
 			log10Item.setSelected(true);
 			sqrtItem.setSelected(false);
 			fixTitle();
-
-			try {
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "All");
-
-				HashMap<String,Object> dataMap = new HashMap<String,Object>();
-				dataMap.put("Transformation Name", "log10");
-
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				resultLog.put("result", "OK");
-
-				ActionProperties changeTransformationAction = new ActionProperties("change-data-transformation",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				changeTransformationAction.logActionProperties();
-			}
-			catch(Exception e1) {
-
-			}
 			return;
 		}
 
@@ -3525,25 +3167,6 @@ public class MetaOmGraph implements ActionListener {
 			log10Item.setSelected(false);
 			sqrtItem.setSelected(false);
 			fixTitle();
-
-			try {
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "All");
-
-				HashMap<String,Object> dataMap = new HashMap<String,Object>();
-				dataMap.put("Transformation Name", "loge");
-
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				resultLog.put("result", "OK");
-
-				ActionProperties changeTransformationAction = new ActionProperties("change-data-transformation",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				changeTransformationAction.logActionProperties();
-			}
-			catch(Exception e1) {
-
-			}
 			return;
 		}
 
@@ -3554,25 +3177,6 @@ public class MetaOmGraph implements ActionListener {
 			log10Item.setSelected(false);
 			sqrtItem.setSelected(true);
 			fixTitle();
-
-			try {
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "All");
-
-				HashMap<String,Object> dataMap = new HashMap<String,Object>();
-				dataMap.put("Transformation Name", "sqrt");
-
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				resultLog.put("result", "OK");
-
-				ActionProperties changeTransformationAction = new ActionProperties("change-data-transformation",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				changeTransformationAction.logActionProperties();
-			}
-			catch(Exception e1) {
-
-			}
 			return;
 		}
 
@@ -3678,7 +3282,6 @@ public class MetaOmGraph implements ActionListener {
 					new ImageIcon(myself.getClass().getResource("/resource/tango/16x16/apps/help-browser.png")));
 			tipsItem.setIcon(new ImageIcon(
 					myself.getClass().getResource("/resource/tango/16x16/status/dialog-information.png")));
-			ReproducibilityLogMenu.setIcon(new ImageIcon(((new ImageIcon(myself.getClass().getResource("/resource/loggingicons/loggingicon2.png")).getImage()).getScaledInstance(14, 14, java.awt.Image.SCALE_SMOOTH))));
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
@@ -3735,7 +3338,7 @@ public class MetaOmGraph implements ActionListener {
 
 				} catch (
 
-						IOException ioe) {
+				IOException ioe) {
 					ioe.printStackTrace();
 				}
 
@@ -3934,7 +3537,6 @@ public class MetaOmGraph implements ActionListener {
 							npd.getRowArray(), npd.getColArray(), npd.getExtendedInfoFile(),
 							npd.getIgnoreConsecutiveDelimiters(), npd.getBlankValue(), npd.csvFlag,
 							npd.getMetadataDelimiter()).start();
-
 				} else {
 					if (welcomeDialog != null)
 						welcomeDialog.setVisible(true);
@@ -3990,8 +3592,8 @@ public class MetaOmGraph implements ActionListener {
 						"A newer version of MOG is available for download. We highly recommend using the latest version.\nYour version: "
 								+ getVersion() + "\nLatest version: " + ob.getLatestVersionOnline(),
 
-								"New version available!", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null,
-								options, options[0]);
+						"New version available!", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null,
+						options, options[0]);
 			} catch (HeadlessException e) {
 				// TODO Auto-generated catch block
 				e.printStackTrace();
@@ -4006,7 +3608,7 @@ public class MetaOmGraph implements ActionListener {
 				// open metnet download
 				try {
 					java.awt.Desktop.getDesktop()
-					.browse(new URI("http://metnetweb.gdcb.iastate.edu/MetNet_MetaOmGraph.htm"));
+							.browse(new URI("http://metnetweb.gdcb.iastate.edu/MetNet_MetaOmGraph.htm"));
 					shutdown();
 				} catch (IOException | URISyntaxException e1) {
 					// TODO Auto-generated catch block
@@ -4021,136 +3623,4 @@ public class MetaOmGraph implements ActionListener {
 		}
 	}
 
-
-	public static Logger updateLogger(String file_name){
-		LoggerContext context = (LoggerContext) LogManager.getContext(false);
-		Configuration configuration = context.getConfiguration();
-		//  Layout<? extends Serializable> old_layout = configuration.getAppender(appender_name).getLayout();
-
-		//delete old appender/logger
-		if(appender != null && appender.isStarted()) {
-			appender.stop();
-			configuration.removeLogger("reproducibilityLogger");
-
-		}
-		//create new appender/logger
-		LoggerConfig loggerConfig = new LoggerConfig("reproducibilityLogger", Level.DEBUG, false);
-		appender = FileAppender.createAppender(file_name, "false", "false", "reproducibilityAppender", "true","false", "false", "4000", null, null, "false", null, configuration);
-		appender.start();
-		configuration.addAppender(appender);
-		loggerConfig.addAppender(appender, Level.DEBUG, null);
-		configuration.addLogger("reproducibilityLogger", loggerConfig);
-
-		context.updateLoggers();
-
-		Logger l = context.getLogger("reproducibilityLogger");
-
-		return l;
-	}
-
-	public static void stopLogger() {
-		LoggerContext context = (LoggerContext) LogManager.getContext(false);
-		Configuration configuration = context.getConfiguration();
-		//  Layout<? extends Serializable> old_layout = configuration.getAppender(appender_name).getLayout();
-
-		//delete old appender/logger
-		if(appender != null && appender.isStarted()) {
-			appender.stop();
-			configuration.removeLogger("reproducibilityLogger");
-
-		}
-	}
-
-
-	public static void logGeneralProperties() {
-		try {
-
-			//Harsha - reproducibility log
-			HashMap<String,Object> actionMap = new HashMap<String,Object>();
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-			HashMap<String,Object> result = new HashMap<String,Object>();
-
-			actionMap.put("parent",-1);
-			actionMap.put("section", "All");
-
-			dataMap.put("Mog Version",VERSION);
-			dataMap.put("Java Version",System.getProperty("java.version"));
-			dataMap.put("OS Name", System.getProperty("os.name"));
-			dataMap.put("CPU",(System.getenv("PROCESSOR_IDENTIFIER")+", architecture: "+System.getenv("PROCESSOR_ARCHITECTURE")+", numProcessors: "+System.getenv("NUMBER_OF_PROCESSORS")));
-			dataMap.put("Memory", String.valueOf(Runtime.getRuntime().totalMemory()));
-			dataMap.put("Session ID", String.valueOf(Instant.now().toEpochMilli()));
-			dataMap.put("Start Timestamp", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-
-			result.put("result", "OK");
-
-
-			ActionProperties generalPropertiesAction = new ActionProperties("general-properties",actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			generalPropertiesAction.logActionProperties();
-		}
-		catch(Exception e) {
-			StringWriter sw = new StringWriter();
-			e.printStackTrace(new PrintWriter(sw));
-			String exceptionAsString = sw.toString();
-			logger.info(exceptionAsString);
-		}
-	}
-
-
-	public static void logOpenProject(String projectName, File source) {
-
-		try {
-			HashMap<String,Object> openProjectParameters = new HashMap<String,Object>();
-			openProjectParameters.put("parent",-1);
-
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-			dataMap.put("Project Name", projectName);
-			dataMap.put("Mog FilePath",source.getAbsolutePath());
-			dataMap.put("Dimensions",String.valueOf(activeProject.getDataColumnCount()));
-			dataMap.put("Row Count", activeProject.getRowCount());
-			dataMap.put("Excluded count",MetaOmAnalyzer.getExcludeCount());
-			dataMap.put("Logfile Name", getCurrentLogFilePath());
-
-			HashMap<String,Object> result = new HashMap<String,Object>();
-			result.put("result", "OK");
-			openProjectAction = new ActionProperties("open-project [ "+projectName+" ]",openProjectParameters,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			openProjectAction.logActionProperties();
-		}
-		catch(Exception e) {
-
-		}
-
-	}
-
-
-	public static int logNewProject(String dataFileName, String metadataFileName) {
-
-		try {
-			HashMap<String,Object> newProjectParameters = new HashMap<String,Object>();
-			newProjectParameters.put("parent",-1);
-
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-			dataMap.put("Data File", dataFileName);
-			dataMap.put("Metadata File",metadataFileName);
-			dataMap.put("Number of Samples",String.valueOf(activeProject.getDataColumnCount()));
-			dataMap.put("Row Count", activeProject.getRowCount());
-			dataMap.put("Excluded count",MetaOmAnalyzer.getExcludeCount());
-
-			HashMap<String,Object> result = new HashMap<String,Object>();
-			result.put("result", "OK");
-			ActionProperties newProjectAction = new ActionProperties("new-project [ "+dataFileName+" ]",newProjectParameters,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			newProjectAction.logActionProperties();
-
-			return newProjectAction.getActionNumber();
-		}
-		catch(Exception e) {
-			StringWriter sw = new StringWriter();
-			e.printStackTrace(new PrintWriter(sw));
-			String exceptionAsString = sw.toString();
-			logger.info(exceptionAsString);
-			return -1;
-		}
-
-	}
-
-
 }
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/MetaOmProject.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/MetaOmProject.java
index 0ef333e..4aca609 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/MetaOmProject.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/MetaOmProject.java
@@ -2,13 +2,11 @@
 package edu.iastate.metnet.metaomgraph;
 
 import edu.iastate.metnet.metaomgraph.chart.NewCustomSortDialog;
-import edu.iastate.metnet.metaomgraph.logging.ActionProperties;
 import edu.iastate.metnet.metaomgraph.ui.BlockingProgressDialog;
 import edu.iastate.metnet.metaomgraph.ui.MetaOmTablePanel;
 import edu.iastate.metnet.metaomgraph.ui.MetadataEditor;
 import edu.iastate.metnet.metaomgraph.ui.ParseTableTree;
 import edu.iastate.metnet.metaomgraph.ui.ReadMetadata;
-import edu.iastate.metnet.metaomgraph.ui.ReproducibilityDashboardPanel;
 import edu.iastate.metnet.metaomgraph.ui.TreeSearchQueryConstructionPanel;
 import edu.iastate.metnet.metaomgraph.utils.MetNetUtils;
 import edu.iastate.metnet.metaomgraph.utils.MetadataUpdater;
@@ -30,22 +28,17 @@ import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.PipedInputStream;
 import java.io.PipedOutputStream;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
 //import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
-import java.util.Date;
 import java.util.Enumeration;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Hashtable;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
 import java.util.NoSuchElementException;
 import java.util.Set;
 //import java.util.Set;
@@ -56,11 +49,8 @@ import java.util.Vector;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
 import java.util.zip.ZipOutputStream;
-
-import javax.swing.JDialog;
 import javax.swing.JFileChooser;
 import javax.swing.JOptionPane;
-import javax.swing.JTextPane;
 import javax.swing.JTree;
 //import javax.swing.SwingUtilities;
 //import javax.swing.UIManager;
@@ -76,11 +66,8 @@ import org.jdom.JDOMException;
 import org.jdom.input.SAXBuilder;
 import org.jdom.output.Format;
 import org.jdom.output.XMLOutputter;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
 public class MetaOmProject {
-
 	public static final String COMPLETE_LIST = "Complete List";
 	public static final String LIST_CREATE_CAUSE = "create list";
 	public static final String LIST_DELETE_CAUSE = "delete list";
@@ -723,18 +710,6 @@ public class MetaOmProject {
 		}
 		setChanged(false);
 
-		//Harsha - reproducibility log
-
-		HashMap<String,Object> saveProjectParameters = new HashMap<String,Object>();
-		saveProjectParameters.put("saveFilePath",destination.getAbsolutePath());
-		//saveProjectParameters.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-
-		HashMap<String,Object> result = new HashMap<String,Object>();
-		result.put("result", "OK");
-		ActionProperties saveProjectAction = new ActionProperties("save-project-as",saveProjectParameters,null,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-		saveProjectAction.logActionProperties();
-
 		return true;
 	}
 
@@ -1028,23 +1003,23 @@ public class MetaOmProject {
 						} else if (thisElementName.equals("threads")) {
 							MetaOmGraph.setNumThreads(Integer.parseInt(thisElement.getAttributeValue("value")));
 						} /*
-						 * else if (thisElementName.equals("rpath")) { if
-						 * (thisElement.getAttributeValue("default").equals("false")) {
-						 * MetaOmGraph.defaultRpath = false;
-						 * MetaOmGraph.setUserRPath(thisElement.getAttributeValue("value")); } else {
-						 * MetaOmGraph.defaultRpath = true; } } else if
-						 * (thisElementName.equals("pathtorfiles")) {
-						 * MetaOmGraph.setpathtoRscrips(thisElement.getAttributeValue("value")); }
-						 */ else if (thisElementName.equals("hyperlinksCols")) {
-							 // these values will be passed to MetadataTableDisplayPanel once the object is
-							 // created
-							 MetaOmGraph._SRR = Integer.parseInt(thisElement.getAttributeValue("srrColumn"));
-							 MetaOmGraph._SRP = Integer.parseInt(thisElement.getAttributeValue("srpColumn"));
-							 MetaOmGraph._SRX = Integer.parseInt(thisElement.getAttributeValue("srxColumn"));
-							 MetaOmGraph._SRS = Integer.parseInt(thisElement.getAttributeValue("srsColumn"));
-							 MetaOmGraph._GSE = Integer.parseInt(thisElement.getAttributeValue("gseColumn"));
-							 MetaOmGraph._GSM = Integer.parseInt(thisElement.getAttributeValue("gsmColumn"));
-						 }
+							 * else if (thisElementName.equals("rpath")) { if
+							 * (thisElement.getAttributeValue("default").equals("false")) {
+							 * MetaOmGraph.defaultRpath = false;
+							 * MetaOmGraph.setUserRPath(thisElement.getAttributeValue("value")); } else {
+							 * MetaOmGraph.defaultRpath = true; } } else if
+							 * (thisElementName.equals("pathtorfiles")) {
+							 * MetaOmGraph.setpathtoRscrips(thisElement.getAttributeValue("value")); }
+							 */ else if (thisElementName.equals("hyperlinksCols")) {
+							// these values will be passed to MetadataTableDisplayPanel once the object is
+							// created
+							MetaOmGraph._SRR = Integer.parseInt(thisElement.getAttributeValue("srrColumn"));
+							MetaOmGraph._SRP = Integer.parseInt(thisElement.getAttributeValue("srpColumn"));
+							MetaOmGraph._SRX = Integer.parseInt(thisElement.getAttributeValue("srxColumn"));
+							MetaOmGraph._SRS = Integer.parseInt(thisElement.getAttributeValue("srsColumn"));
+							MetaOmGraph._GSE = Integer.parseInt(thisElement.getAttributeValue("gseColumn"));
+							MetaOmGraph._GSM = Integer.parseInt(thisElement.getAttributeValue("gsmColumn"));
+						}
 					}
 
 					paramsFound = true;
@@ -1339,7 +1314,7 @@ public class MetaOmProject {
 							pvList = CalculateDiffCorr.computePVals(zsList);
 						}
 
-
+												
 						DifferentialCorrResults thisOb = new DifferentialCorrResults(flistname, featureName, featureInd,
 								namesgrp1, namesgrp2, g1name, g2name, method, rowNames, corrgrp1, corrgrp2, zv1List,
 								zv2List, diffList, zsList, pvList, datatransform, id);
@@ -1408,7 +1383,6 @@ public class MetaOmProject {
 				return false;
 			}
 		}
-
 		return (allsWell) && (projectFileFound);
 	}
 
@@ -1721,7 +1695,7 @@ public class MetaOmProject {
 
 			e.printStackTrace();
 			JOptionPane.showMessageDialog(MetaOmGraph.getMainWindow(), "The file " + projectFile.getName()
-			+ " does not appear to be a valid " + "MetaOmGraph project file!");
+					+ " does not appear to be a valid " + "MetaOmGraph project file!");
 			return false;
 		} catch (IOException e) {
 			e.printStackTrace();
@@ -1731,7 +1705,7 @@ public class MetaOmProject {
 		} catch (NullPointerException e) {
 			e.printStackTrace();
 			JOptionPane.showMessageDialog(MetaOmGraph.getMainWindow(), "The file " + projectFile.getName()
-			+ " is either not a MetaOmGraph project " + "file, or it is missing required data.");
+					+ " is either not a MetaOmGraph project " + "file, or it is missing required data.");
 			return false;
 		}
 		return true;
@@ -1841,7 +1815,7 @@ public class MetaOmProject {
 		return columnHeaders;
 	}
 
-	public boolean addGeneList(String name, int[] entries, boolean notify, boolean logRequired) {
+	public boolean addGeneList(String name, int[] entries, boolean notify) {
 		String listName = name;
 		if ((listName == null) || (listName.trim().equals(""))) {
 			String result = "";
@@ -1866,45 +1840,6 @@ public class MetaOmProject {
 		if (notify) {
 			fireStateChanged("create list");
 		}
-
-		try {
-			//Harsha - reproducibility log
-			HashMap<String,Object> actionMap = new HashMap<String,Object>();
-			actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-			actionMap.put("section", "Feature Metadata");
-
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-			dataMap.put("Created List Name", listName);
-			dataMap.put("List Elements Count", entries.length);
-			Map<Integer,String> selectedItems = new HashMap<Integer,String>();
-
-			for(int rowNum: entries) {
-				selectedItems.put(rowNum, getDefaultRowNames(rowNum));
-			}
-			dataMap.put("Selected Rows", selectedItems);
-			HashMap<String,Object> resultLog = new HashMap<String,Object>();
-			resultLog.put("result", "OK");
-
-			ActionProperties createListAction = new ActionProperties("create-list",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-
-			if(logRequired) {
-				createListAction.logActionProperties();
-			}
-		}
-		catch(Exception e) {
-
-			//			StringWriter sw = new StringWriter();
-			//            e.printStackTrace(new PrintWriter(sw));
-			//            String exceptionAsString = sw.toString();
-			//			JDialog jd = new JDialog();
-			//			JTextPane jt = new JTextPane();
-			//			jt.setText(exceptionAsString);
-			//			jt.setBounds(10, 10, 300, 100);
-			//			jd.getContentPane().add(jt);
-			//			jd.setBounds(100, 100, 500, 200);
-			//			jd.setVisible(true);
-		}
-
 		return true;
 	}
 
@@ -1936,32 +1871,6 @@ public class MetaOmProject {
 		geneLists.put(listName, entries);
 		setChanged(true);
 		fireStateChanged("rename list");
-
-
-		try {
-			//Harsha - reproducibility log
-			HashMap<String,Object> actionMap = new HashMap<String,Object>();
-			actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-			dataMap.put("Old List Name", oldName);
-			dataMap.put("New List Name", listName);
-			dataMap.put("List Elements Count", entries.length);
-			Map<Integer,String> selectedItems = new HashMap<Integer,String>();
-
-			for(int rowNum: entries) {
-				selectedItems.put(rowNum, getDefaultRowNames(rowNum));
-			}
-			dataMap.put("Selected Rows", selectedItems);
-			HashMap<String,Object> resultLog = new HashMap<String,Object>();
-			resultLog.put("result", "OK");
-
-			ActionProperties createListAction = new ActionProperties("rename-list",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			createListAction.logActionProperties();
-		}
-		catch(Exception e) {
-
-		}
 		return true;
 	}
 
@@ -2007,7 +1916,7 @@ public class MetaOmProject {
 	}
 
 	public boolean addGeneList(int[] entries) {
-		return addGeneList(null, entries, true,true);
+		return addGeneList(null, entries, true);
 	}
 
 	public boolean addGeneList(Collection<Integer> entries) {
@@ -2027,31 +1936,13 @@ public class MetaOmProject {
 			int addMe = ((Integer) localIterator.next()).intValue();
 			result[(addHere++)] = addMe;
 		}
-		return addGeneList(name, result, true, true);
+		return addGeneList(name, result, true);
 	}
 
 	public void deleteGeneList(String name) {
 		geneLists.remove(name);
 		setChanged(true);
 		fireStateChanged("delete list");
-
-
-		//Harsha - reproducibility log
-		try {
-			HashMap<String,Object> actionMap = new HashMap<String,Object>();
-			actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-			dataMap.put("deletedListName", name);
-			HashMap<String,Object> resultLog = new HashMap<String,Object>();
-			resultLog.put("result", "OK");
-
-			ActionProperties deleteListAction = new ActionProperties("delete-list",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			deleteListAction.logActionProperties();
-		}
-		catch(Exception e) {
-
-		}
 	}
 
 	public int getInfoColumnCount() {
@@ -2673,7 +2564,7 @@ public class MetaOmProject {
 	public boolean loadMetadataHybrid(MetadataCollection ob, Element XMLroot, TreeMap<Integer, Element> tm,
 			String dataCol, String[] mdheaders, JTree treeStructure, TreeMap<String, List<Integer>> defaultrepsMap,
 			String defaultrepscol, List<String> missingDC, List<String> extraDC, List<String> removedCols)
-					throws IOException {
+			throws IOException {
 		if (source == null) {
 			// metadataH = new MetadataHybrid();
 			// if null there is no metadata
@@ -3475,29 +3366,7 @@ public class MetaOmProject {
 				for (Integer thisRow : rowsToAdd) {
 					rows[(index++)] = thisRow.intValue();
 				}
-
-
-				try {
-					//Harsha - reproducibility log
-					HashMap<String,Object> actionMap = new HashMap<String,Object>();
-					actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-					HashMap<String,Object> dataMap = new HashMap<String,Object>();
-					dataMap.put("Source File", source.getAbsolutePath());
-					dataMap.put("Created List Name", name);
-					dataMap.put("List Elements Count", rows.length);
-					
-					HashMap<String,Object> resultLog = new HashMap<String,Object>();
-					resultLog.put("result", "OK");
-
-					ActionProperties createListAction = new ActionProperties("import-lists",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-					createListAction.logActionProperties();
-				}
-				catch(Exception e) {
-
-				}
-
-				addGeneList(name, rows, false,false);
+				addGeneList(name, rows, false);
 			}
 			fireStateChanged("create list");
 		} catch (Exception e) {
@@ -3564,7 +3433,7 @@ public class MetaOmProject {
 						JOptionPane.showMessageDialog(null, "Error...:" + col);
 						JOptionPane.showMessageDialog(null, "data col:" + col);
 						JOptionPane.showMessageDialog(null, "data col name:" + MetaOmGraph.getActiveProject()
-						.getMetadata().getNodeForCol(col).getAttributeValue("name"));
+								.getMetadata().getNodeForCol(col).getAttributeValue("name"));
 						JOptionPane.showMessageDialog(null, "data col int val:" + col.intValue());
 					}
 
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/Metadata.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/Metadata.java
index 16b3b58..fec7c19 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/Metadata.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/Metadata.java
@@ -292,26 +292,26 @@ public class Metadata {
 	}
 
 	public Integer[] search(String term) {
-		return search(null, term, false);
+		return search(null, term, SearchMatchType.CONTAINS);
 	}
 
-	public Integer[] search(String field, String term, boolean exact) {
-		return search(new String[] { field }, new String[] { term }, new boolean[] { exact }, true);
+	public Integer[] search(String field, String term, SearchMatchType matchType) {
+		return search(new String[] { field }, new String[] { term }, new SearchMatchType[] { matchType }, true);
 	}
 
-	public Integer[] search(String[] fields, String[] terms, boolean[] exacts, boolean matchAll) {
+	public Integer[] search(String[] fields, String[] terms, SearchMatchType[] matchTypes, boolean matchAll) {
 		MetadataQuery[] queries = new MetadataQuery[terms.length];
 		for (int i = 0; i < queries.length; i++) {
 			String term = terms[i];
 			String field = null;
-			boolean exact = false;
+			SearchMatchType matchType = SearchMatchType.CONTAINS;
 			if (i < fields.length) {
 				field = fields[i];
 			}
-			if (i < exacts.length) {
-				exact = exacts[i];
+			if (i < matchTypes.length) {
+				matchType = matchTypes[i];
 			}
-			queries[i] = new MetadataQuery(field, term, exact,false);
+			queries[i] = new MetadataQuery(field, term, matchType,false);
 		}
 		return search(queries, matchAll);
 	}
@@ -517,17 +517,17 @@ public class Metadata {
 
 		private String term;
 
-		private boolean exact;
+		private SearchMatchType matchType;
 		
 		private boolean matchCase;
 
 		public MetadataQuery() {
 		}
 
-		public MetadataQuery(String field, String term, boolean exact,boolean matchCase) {
+		public MetadataQuery(String field, String term, SearchMatchType matchType,boolean matchCase) {
 			this.field = field;
 			this.term = term.trim();
-			this.exact = exact;
+			this.matchType = matchType;
 			this.matchCase=matchCase;
 		}
 
@@ -547,8 +547,12 @@ public class Metadata {
 			this.term = term;
 		}
 
-		public boolean isExact() {
-			return exact;
+		public SearchMatchType getMatchType() {
+			return matchType;
+		}
+		
+		public void setMatchType(SearchMatchType matchType) {
+			this.matchType = matchType;
 		}
 		
 		//urmi
@@ -560,14 +564,10 @@ public class Metadata {
 			matchCase=flag;
 		}
 
-		public void setExact(boolean exact) {
-			this.exact = exact;
-		}
-
 		@Override
 		public SimpleXMLElement toXML() {
-			SimpleXMLElement result = new SimpleXMLElement(getXMLElementName()).setAttribute("exact",
-					exact ? "true" : "false");
+			SimpleXMLElement result = new SimpleXMLElement(getXMLElementName()).setAttribute("matchType",
+					matchType.toString());
 			if (field != null) {
 				result.add(new SimpleXMLElement("field").setText(field));
 			}
@@ -577,7 +577,7 @@ public class Metadata {
 
 		@Override
 		public MetadataQuery fromXML(SimpleXMLElement source) {
-			exact = "true".equals(source.getAttributeValue("exact"));
+			matchType = SearchMatchType.valueOf(source.getAttributeValue("matchType").toUpperCase());
 			for (int i = 0; i < source.getChildCount(); i++) {
 				SimpleXMLElement child = source.getChildAt(i);
 				if ("field".equals(child.getName())) {
@@ -599,12 +599,18 @@ public class Metadata {
 			String thisField = getField();
 			if ((thisField == null) || ("".equals(thisField)) || (thisField.equalsIgnoreCase(field))) {
 				String term = getTerm();
-				if (isExact()) {
+				if (getMatchType() == SearchMatchType.IS) {
 					if (value.equalsIgnoreCase(term)) {
 						return true;
 					}
-				} else if (value.toLowerCase().contains(term.toLowerCase())) {
-					return true;
+				} else if (getMatchType() == SearchMatchType.CONTAINS) {
+					if (value.toLowerCase().contains(term.toLowerCase()))
+						return true;
+				}
+				else {
+					if (!value.equalsIgnoreCase(term)) {
+						return true;
+					}
 				}
 			}
 
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/MetadataCollection.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/MetadataCollection.java
index bef0391..2bf859c 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/MetadataCollection.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/MetadataCollection.java
@@ -691,16 +691,17 @@ public class MetadataCollection {
 		}
 	}
 
-	public List<String> getDatabyAttributes(String toSearch, String searchCol, String targetCol, boolean exact,
-			boolean uniqueFlag, boolean caseFlag) {
+	public List<String> getDatabyAttributes(String toSearch, String searchCol, String targetCol,
+			SearchMatchType matchType, boolean uniqueFlag, boolean caseFlag) {
 		// create filter
 		Filter fa = null;
-		if (exact) {
+		if (matchType == SearchMatchType.IS) {
 			fa = Filters.regex(searchCol, caseFlag + "^" + toSearch + "$");
-		} else {
+		} else if (matchType == SearchMatchType.CONTAINS){
 			fa = Filters.regex(searchCol, caseFlag + toSearch);
+		} else {
+			fa = Filters.regex(searchCol, caseFlag + "^(?!" + toSearch + "$).*$");
 		}
-
 		return getDatabyAttributes(fa, targetCol, uniqueFlag);
 	}
 
@@ -720,7 +721,7 @@ public class MetadataCollection {
 	 *            match all fields i.e AND operation
 	 * @return
 	 */
-	public List<String> getDatabyAttributes(String toSearch, String targetCol, boolean exact, boolean uniqueFlag,
+	public List<String> getDatabyAttributes(String toSearch, String targetCol, SearchMatchType matchType, boolean uniqueFlag,
 			boolean AND, boolean matchCase) {
 		if (Arrays.asList(headers).contains(targetCol)) {
 			List<Document> output = null;
@@ -733,11 +734,15 @@ public class MetadataCollection {
 			// create a filter over all cols
 			Filter[] fa = new Filter[this.getHeaders().length];
 			for (int i = 0; i < fa.length; i++) {
-
-				if (exact) {
+				if (matchType == SearchMatchType.IS) {
 					fa[i] = Filters.regex(this.getHeaders()[i], caseFlag + "^" + toSearch + "$");
-				} else {
+				} else if(matchType == SearchMatchType.CONTAINS){
 					fa[i] = Filters.regex(this.getHeaders()[i], caseFlag + toSearch);
+				} else {
+					// exactly not
+					fa[i] = Filters.regex(this.getHeaders()[i], caseFlag + "^(?!" + toSearch + "$).*$");
+					// not like
+					//fa[i] = Filters.regex(this.getHeaders()[i], caseFlag + "^(?!" + toSearch + ").*$");
 				}
 			}
 			if (AND) {
@@ -1008,7 +1013,14 @@ public class MetadataCollection {
 	public List<String> getAllDataCols() {
 		return getDatabyAttributes(null, dataCol, true);
 	}
+	
+	public List<String> getRemoveCols() {
+		return removeCols;
+	}
 
+	public void setRemoveCols(List<String> removeCols) {
+		this.removeCols = removeCols;
+	}
 }
 
 class MetadataCollectionTest {
@@ -1047,7 +1059,8 @@ class MetadataCollectionTest {
 			long startTime = System.currentTimeMillis();
 			for (int i = 0; i < N; i++) {
 				String valExpected = mogColl
-						.getDatabyAttributes(dc.get(i), mogColl.getDatacol(), true, true, false, true).get(0);
+						.getDatabyAttributes(dc.get(i), mogColl.getDatacol(), 
+								SearchMatchType.IS, true, false, true).get(0);
 				if (!dc.get(i).equals(valExpected)) {
 					System.out.println("1Failed..." + valExpected);
 				}
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/MetadataHybrid.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/MetadataHybrid.java
index 9ad3bce..7ea2487 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/MetadataHybrid.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/MetadataHybrid.java
@@ -425,7 +425,7 @@ public class MetadataHybrid {
 		List<String> colVals = new ArrayList<>();
 		String[] allfields = new String[queries.length];
 		String[] toSearch = new String[queries.length];
-		boolean[] isExact = new boolean[queries.length];
+		SearchMatchType[] matchTypes = new SearchMatchType[queries.length];
 		boolean[] matchCase = new boolean[queries.length];
 		// search using Metadatacollection object and return indices of matching data
 		// columns from knownCols
@@ -434,12 +434,12 @@ public class MetadataHybrid {
 		for (int i = 0; i < queries.length; i++) {
 			allfields[i] = queries[i].getField();
 			toSearch[i] = queries[i].getTerm();
-			isExact[i] = queries[i].isExact();
+			matchTypes[i] = queries[i].getMatchType();
 			matchCase[i] = queries[i].isCaseSensitive();
 			// JOptionPane.showMessageDialog(null, "search f:" + fields[i]);
 		}
 
-		colVals.addAll(searchByValue(allfields, toSearch, this.dataColumn, isExact, matchAll, matchCase));
+		colVals.addAll(searchByValue(allfields, toSearch, this.dataColumn, matchTypes, matchAll, matchCase));
 
 		// JOptionPane.showMessageDialog(null, "colvals:" + colVals.toString());
 		// JOptionPane.showMessageDialog(null, "knownCols:" + knownCols.toString());
@@ -493,7 +493,7 @@ public class MetadataHybrid {
 		List<String> colVals = new ArrayList<>();
 		String[] allfields = new String[queries.length];
 		String[] toSearch = new String[queries.length];
-		boolean[] isExact = new boolean[queries.length];
+		SearchMatchType[] matchTypes = new SearchMatchType[queries.length];
 		boolean[] matchCase = new boolean[queries.length];
 		// search using Metadatacollection object and return indices of matching data
 		// columns from knownCols
@@ -501,11 +501,11 @@ public class MetadataHybrid {
 		for (int i = 0; i < queries.length; i++) {
 			allfields[i] = queries[i].getField();
 			toSearch[i] = queries[i].getTerm();
-			isExact[i] = queries[i].isExact();
+			matchTypes[i] = queries[i].getMatchType();
 			matchCase[i] = queries[i].isCaseSensitive();
 		}
 
-		colVals.addAll(searchByValue(allfields, toSearch, this.dataColumn, isExact, matchAll, matchCase));
+		colVals.addAll(searchByValue(allfields, toSearch, this.dataColumn, matchTypes, matchAll, matchCase));
 
 		return colVals;
 	}
@@ -522,7 +522,7 @@ public class MetadataHybrid {
 	 *            exact match or near match?
 	 * @return values under toReturn column where field column has value toSearch
 	 */
-	public List<String> searchByValue(String[] field, String[] toSearch, String toReturn, boolean[] exact,
+	public List<String> searchByValue(String[] field, String[] toSearch, String toReturn, SearchMatchType[] matchType,
 			boolean matchAll, boolean[] matchCase) {
 		List<String> res = new ArrayList<>();
 
@@ -540,22 +540,24 @@ public class MetadataHybrid {
 			if (field[i] == "All Fields") {
 
 				// List<String> res2 = new ArrayList<>();
-				specialCaseRes.add(searchByValue(toSearch[i], toReturn, exact[i], true, matchCase[i]));
+				specialCaseRes.add(searchByValue(toSearch[i], toReturn, matchType[i], true, matchCase[i]));
 
 			} else if (field[i] == "Any Field") {
 
-				specialCaseRes.add(searchByValue(toSearch[i], toReturn, exact[i], false, matchCase[i]));
+				specialCaseRes.add(searchByValue(toSearch[i], toReturn, matchType[i], false, matchCase[i]));
 
 			} else {
-				if (exact[i]) {
-
+				if (matchType[i] == SearchMatchType.IS) {
 					// farray[i] = Filters.regex(field[i], "^" + toSearch[i] + "$");
 					filterList.add(Filters.regex(field[i], caseFlag + "^" + toSearch[i] + "$"));
 
-				} else {
-
+				} else if(matchType[i] == SearchMatchType.CONTAINS) {
 					filterList.add(Filters.regex(field[i], caseFlag + toSearch[i]));
-
+				} else {
+					// exactly not
+					filterList.add(Filters.regex(field[i], caseFlag + "^(?!" + toSearch[i] + "$).*$"));
+					// not like
+					//filterList.add(Filters.regex(field[i], caseFlag + "^((?!" + toSearch[i] + ").)*$"));
 				}
 			}
 		}
@@ -603,10 +605,10 @@ public class MetadataHybrid {
 		return res;
 	}
 
-	public List<String> searchByValue(String field, String toSearch, String toReturn, boolean exact, boolean matchAll,
+	public List<String> searchByValue(String field, String toSearch, String toReturn, SearchMatchType matchType, boolean matchAll,
 			boolean matchCase) {
-		return searchByValue(new String[] { field }, new String[] { toSearch }, toReturn, new boolean[] { exact },
-				matchAll, new boolean[] { matchCase });
+		return searchByValue(new String[] { field }, new String[] { toSearch }, toReturn, 
+				new SearchMatchType[] { matchType }, matchAll, new boolean[] { matchCase });
 
 	}
 
@@ -621,10 +623,10 @@ public class MetadataHybrid {
 	 * @param matchCase
 	 * @return
 	 */
-	public List<String> searchByValue(String toSearch, String toReturn, boolean exact, boolean matchAll,
+	public List<String> searchByValue(String toSearch, String toReturn, SearchMatchType matchType, boolean matchAll,
 			boolean matchCase) {
 		List<String> res = new ArrayList<>();
-		res = this.mogCollection.getDatabyAttributes(toSearch, toReturn, exact, true, matchAll, matchCase);
+		res = this.mogCollection.getDatabyAttributes(toSearch, toReturn, matchType, true, matchAll, matchCase);
 		return res;
 
 	}
diff --git a/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/SearchMatchType.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/SearchMatchType.java
new file mode 100644
index 0000000..66c292e
--- /dev/null
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/SearchMatchType.java
@@ -0,0 +1,15 @@
+/**
+ * 
+ */
+package edu.iastate.metnet.metaomgraph;
+
+/**
+ * @author sumanth
+ * enum to specify match type in search
+ */
+public enum SearchMatchType {
+	CONTAINS,
+	IS,
+	NOT
+}
+
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/chart/ChartDataExporter.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/chart/ChartDataExporter.java
index 52e5c0c..d3d1dd9 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/chart/ChartDataExporter.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/chart/ChartDataExporter.java
@@ -18,6 +18,7 @@ import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.sql.SQLException;
+import java.util.HashMap;
 import java.util.Hashtable;
 import java.util.Vector;
 import javax.swing.ButtonGroup;
@@ -34,12 +35,13 @@ import javax.swing.JTextField;
 import javax.swing.SwingUtilities;
 import javax.swing.filechooser.FileFilter;
 
-import org.apache.poi.hssf.usermodel.HSSFCell;
-import org.apache.poi.hssf.usermodel.HSSFCellStyle;
-import org.apache.poi.hssf.usermodel.HSSFPalette;
-import org.apache.poi.hssf.usermodel.HSSFRow;
-import org.apache.poi.hssf.usermodel.HSSFSheet;
-import org.apache.poi.hssf.usermodel.HSSFWorkbook;
+import org.apache.poi.xssf.usermodel.DefaultIndexedColorMap;
+import org.apache.poi.xssf.usermodel.XSSFCell;
+import org.apache.poi.xssf.usermodel.XSSFCellStyle;
+import org.apache.poi.xssf.usermodel.XSSFColor;
+import org.apache.poi.xssf.usermodel.XSSFRow;
+import org.apache.poi.xssf.usermodel.XSSFSheet;
+import org.apache.poi.xssf.usermodel.XSSFWorkbook;
 
 // new testing by mhhur
 import org.apache.poi.ss.usermodel.*;
@@ -52,7 +54,9 @@ import org.jfree.data.xy.XYDataset;
 public class ChartDataExporter extends JInternalFrame implements ActionListener {
     private static final double SCALE = 36.57142857142857D;
     private static final int[] ATGS_COL_WIDTHS = {300, 70, 70, 80, 95, 100, 90, 100, 80, 100, 70, 70, 70, 70};
-    private static final short[] HSSF_COLORS = {46, 44, 44, 31, 31, 31, 42, 52, 46, 43, 47, 47, 47, 47};
+    //private static final short[] HSSF_COLORS = {46, 44, 44, 31, 31, 31, 42, 52, 46, 43, 47, 47, 47, 47};
+    private static final short[] XSSF_COLORS = {0, 1, 1, 2, 2, 2, 3, 4, 0, 5, 6, 6, 6, 6};
+    private static HashMap<Integer, XSSFColor> colorMap = new HashMap<Integer, XSSFColor>();
     private MetaOmChartPanel myChartPanel;
     private JTable seriesTable;
     private ButtonGroup includeGroup;
@@ -225,24 +229,34 @@ public class ChartDataExporter extends JInternalFrame implements ActionListener
             }
         }
 
+        XSSFWorkbook wb = new XSSFWorkbook();
 
-        HSSFWorkbook wb = new HSSFWorkbook();
-        HSSFSheet sheet = wb.createSheet("MetaOmGraph data");
+        //HSSFWorkbook wb = new HSSFWorkbook();
+        XSSFSheet sheet = wb.createSheet("MetaOmGraph data");
 
         if (colorCodeBox.isSelected()) {
-            HSSFPalette pal = wb.getCustomPalette();
-            pal.setColorAtIndex((short) 46, (byte) -23, (byte) -45, (byte) -15);
-            pal.setColorAtIndex((short) 44, (byte) -122, (byte) -92, (byte) -23);
-            pal.setColorAtIndex((short) 31, (byte) -65, (byte) -33, (byte) -1);
-            pal.setColorAtIndex((short) 42, (byte) -50, (byte) -22, (byte) -40);
-            pal.setColorAtIndex((short) 52, (byte) -9, (byte) -60, (byte) 77);
-            pal.setColorAtIndex((short) 43, (byte) -1, (byte) -1, (byte) -100);
-            pal.setColorAtIndex((short) 47, (byte) -10, (byte) -52, (byte) -99);
+            DefaultIndexedColorMap defaultMap = new DefaultIndexedColorMap();
+            colorMap.put(0, new XSSFColor(new java.awt.Color(233, 211, 241), defaultMap));
+            colorMap.put(1, new XSSFColor(new java.awt.Color(134, 164, 233), defaultMap));
+            colorMap.put(2, new XSSFColor(new java.awt.Color(191, 223, 255), defaultMap));
+            colorMap.put(3, new XSSFColor(new java.awt.Color(206, 234, 216), defaultMap));
+            colorMap.put(4, new XSSFColor(new java.awt.Color(247, 196, 77), defaultMap));
+            colorMap.put(5, new XSSFColor(new java.awt.Color(255, 255, 156), defaultMap));
+            colorMap.put(6, new XSSFColor(new java.awt.Color(246, 204, 157), defaultMap));
+        	
+//            HSSFPalette pal = wb.getCustomPalette();
+//            pal.setColorAtIndex((short) 46, (byte) -23, (byte) -45, (byte) -15);
+//            pal.setColorAtIndex((short) 44, (byte) -122, (byte) -92, (byte) -23);
+//            pal.setColorAtIndex((short) 31, (byte) -65, (byte) -33, (byte) -1);
+//            pal.setColorAtIndex((short) 42, (byte) -50, (byte) -22, (byte) -40);
+//            pal.setColorAtIndex((short) 52, (byte) -9, (byte) -60, (byte) 77);
+//            pal.setColorAtIndex((short) 43, (byte) -1, (byte) -1, (byte) -100);
+//            pal.setColorAtIndex((short) 47, (byte) -10, (byte) -52, (byte) -99);
         }
 
-        HSSFCellStyle cs = wb.createCellStyle();
+        XSSFCellStyle cs = wb.createCellStyle();
         for (int rowIndex = 0; rowIndex < result.length; rowIndex++) {
-            HSSFRow row = sheet.createRow(rowIndex);
+            XSSFRow row = sheet.createRow(rowIndex);
             row.createCell((short) 0).setCellValue((String) result[rowIndex][0]);
 
             cs.setVerticalAlignment(VerticalAlignment.CENTER);
@@ -251,12 +265,13 @@ public class ChartDataExporter extends JInternalFrame implements ActionListener
             if ((atgsData != null) && (atgsData[rowIndex] != null)) {
                 cs = wb.createCellStyle();
                 for (int i = 0; i < atgsData[rowIndex].length; i++) {
-                    HSSFCell atgsCell = row.createCell((short) (i + 1));
+                    XSSFCell atgsCell = row.createCell((short) (i + 1));
 
                     cs.setWrapText(true);
                     cs.setVerticalAlignment(VerticalAlignment.CENTER);
                     if (colorCodeBox.isSelected()) {
-                        cs.setFillForegroundColor(HSSF_COLORS[i]);
+                        int key = XSSF_COLORS[i];
+                        cs.setFillForegroundColor(colorMap.get(key));
                         cs.setFillPattern(FillPatternType.SOLID_FOREGROUND); //setFillPattern((short) 1);
                         cs.setBorderBottom(BorderStyle.THIN);//cs.setBorderBottom((short) 1);
                         cs.setBorderTop(BorderStyle.THIN);//cs.setBorderTop((short) 1);
@@ -288,14 +303,14 @@ public class ChartDataExporter extends JInternalFrame implements ActionListener
 
             cs = wb.createCellStyle();
             for (int y = 0; y < keyCount; y++) {
-                HSSFRow row = sheet.getRow(result.length + y);
+                XSSFRow row = sheet.getRow(result.length + y);
                 String thisKey = metadataKeys.get(y);
                 for (int x = 0; x < metadata.length; x++) {
                     Object thisValue = metadata[x].get(thisKey);
                     String stringValue;
                     if (thisValue == null)  stringValue = "";
                     else stringValue = thisKey + ": " + thisValue;
-                    HSSFCell cell = row.createCell((short) (x + offset));
+                    XSSFCell cell = row.createCell((short) (x + offset));
 
                     cs.setWrapText(true);
                     cs.setVerticalAlignment(VerticalAlignment.CENTER);//cs.setVerticalAlignment((short) 1);
@@ -372,12 +387,12 @@ public class ChartDataExporter extends JInternalFrame implements ActionListener
             }
             int finalColumns = columns.length;
             if (atgsBox.isSelected()) finalColumns += 14;
-            if (finalColumns > 255) {
-                JOptionPane.showMessageDialog(getParent(), "An Excel file cannot contain more than 255 columns.\nPlease select a smaller range.", "Range too large", 0);
+            if (finalColumns > 16384) {
+                JOptionPane.showMessageDialog(getParent(), "An Excel file cannot contain more than 16384 columns.\nPlease select a smaller range.", "Range too large", 0);
                 return;
             }
-            FileFilter filter = Utils.createFileFilter("xls", "Excel spreadsheet");
-            final File destination = Utils.chooseFileToSave(filter, "xls", MetaOmGraph.getMainWindow(), true);
+            FileFilter filter = Utils.createFileFilter("xlsx", "Excel spreadsheet");
+            final File destination = Utils.chooseFileToSave(filter, "xlsx", MetaOmGraph.getMainWindow(), true);
             if (destination == null) return;
 
             new AnimatedSwingWorker("Exporting...") {
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/chart/MetaOmChartPanel.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/chart/MetaOmChartPanel.java
index 7d53eac..3f8049a 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/chart/MetaOmChartPanel.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/chart/MetaOmChartPanel.java
@@ -36,12 +36,9 @@ import javax.swing.JTable;
 import javax.swing.JTextField;
 import javax.swing.JToolBar;
 import javax.swing.SwingUtilities;
-import javax.swing.UIManager;
 import javax.swing.WindowConstants;
 import javax.swing.event.TableModelEvent;
 import javax.swing.event.TableModelListener;
-import javax.swing.plaf.ColorUIResource;
-
 import org.jfree.chart.ChartFactory;
 import org.jfree.chart.ChartMouseEvent;
 import org.jfree.chart.ChartMouseListener;
@@ -1132,54 +1129,6 @@ public class MetaOmChartPanel extends JPanel implements ChartChangeListener, Cha
 		myParent = new MetaOmFrame(frameTitle);
 		myParent.putClientProperty("JInternalFrame.frameType", "normal");
 		myParent.getContentPane().add(this, BorderLayout.CENTER);
-		
-		int width = MetaOmGraph.getMainWindow().getWidth();
-		int height = MetaOmGraph.getMainWindow().getHeight();
-		myParent.setSize(width - 200, height - 200);
-		myParent.setLocation((width - myParent.getWidth()) / 2, (height - myParent.getHeight()) / 2);
-		myParent.setClosable(true);
-		myParent.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
-		myParent.setResizable(true);
-		myParent.setIconifiable(true);
-		myParent.setMaximizable(true);
-		myParent.setFrameIcon(new ImageIcon(getClass().getResource("/resource/MetaOmicon16.png")));
-		MetaOmGraph.getDesktop().add(myParent);
-		glassPane = new JPanel(null);
-		myParent.setGlassPane(glassPane);
-		glassPane.setOpaque(false);
-		
-		// if (infoPopup != null) {
-		// myParent.addInternalFrameListener(infoPopup);
-		// myParent.addComponentListener(infoPopup);
-		// }
-		myParent.setName("plotwindow.php");
-		myParent.show();
-
-		// urmi
-		// set exception listener
-		if (this.myParent == null) {
-			JOptionPane.showMessageDialog(null, "setting exception listener: NULL");
-		}
-		ExceptionHandler.getInstance(this.myParent).setUseBuffer(true);
-		Thread.setDefaultUncaughtExceptionHandler(ExceptionHandler.getInstance(this.myParent));
-	}
-	
-	
-	/**
-	 * Playback overridden method
-	 * Constructs and displays an internal frame on the MetaOmGraph desktop
-	 * containing this chart panel.
-	 */
-	public void createInternalFrame(boolean playback) {
-		if (myChartPanel == null)
-			return;
-		// System.out.println("Making it!");
-		String frameTitle = "Playback - "+ xaxisLabel + " vs " + yaxisLabel + " Plot";
-
-		myParent = new MetaOmFrame(frameTitle);
-		myParent.putClientProperty("JInternalFrame.frameType", "normal");
-		myParent.getContentPane().add(this, BorderLayout.CENTER);
-		
 		int width = MetaOmGraph.getMainWindow().getWidth();
 		int height = MetaOmGraph.getMainWindow().getHeight();
 		myParent.setSize(width - 200, height - 200);
@@ -1190,17 +1139,10 @@ public class MetaOmChartPanel extends JPanel implements ChartChangeListener, Cha
 		myParent.setIconifiable(true);
 		myParent.setMaximizable(true);
 		myParent.setFrameIcon(new ImageIcon(getClass().getResource("/resource/MetaOmicon16.png")));
-		myParent.getRootPane().setWindowDecorationStyle(3);
-		UIManager.put("InternalFrame.activeTitleBackground", new ColorUIResource(new Color(208,150,175)));
-		UIManager.put("InternalFrame.inactiveTitleBackground", new ColorUIResource(new Color(208,150,175)));
-		javax.swing.plaf.basic.BasicInternalFrameUI ui = 
-		    new javax.swing.plaf.basic.BasicInternalFrameUI(myParent); 
-		myParent.setUI(ui);
 		MetaOmGraph.getDesktop().add(myParent);
 		glassPane = new JPanel(null);
 		myParent.setGlassPane(glassPane);
 		glassPane.setOpaque(false);
-		
 		// if (infoPopup != null) {
 		// myParent.addInternalFrameListener(infoPopup);
 		// myParent.addComponentListener(infoPopup);
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/logging/ActionProperties.java b/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/logging/ActionProperties.java
deleted file mode 100644
index a430d22..0000000
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/logging/ActionProperties.java
+++ /dev/null
@@ -1,131 +0,0 @@
-package edu.iastate.metnet.metaomgraph.logging;
-
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.util.Arrays;
-import java.util.Date;
-import java.util.List;
-import java.util.Map;
-
-import org.apache.logging.log4j.Level;
-import org.apache.logging.log4j.Logger;
-
-import edu.iastate.metnet.metaomgraph.MetaOmGraph;
-import edu.iastate.metnet.metaomgraph.ui.ReproducibilityDashboardPanel;
-
-/**
- * 
- * @author Harsha
- *
- *This class is a bean class for actions taken by the user that are to be logged to the reproducibility log
- *
- */
-public class ActionProperties {
-
-	private static Logger logger = MetaOmGraph.logger;
-
-	private static int counter;
-	private int actionNumber;
-	private String actionCommand;
-	private Map<String,Object> actionParameters;
-	private Map<String,Object> dataParameters;
-	private Map<String,Object> otherParameters;
-	private String timestamp;
-
-	public ActionProperties(String actionCommand, Map<String, Object> actionParameters,
-			Map<String, Object> dataParameters, Map<String, Object> otherParameters, String timestamp) {
-		super();
-		this.actionCommand = actionCommand;
-		this.actionParameters = actionParameters;
-		this.dataParameters = dataParameters;
-		this.otherParameters = otherParameters;
-		this.timestamp = timestamp;
-	}
-
-	public static int getCounter() {
-		return counter;
-	}
-
-	public static void setCounter(int counter) {
-		ActionProperties.counter = counter;
-	}
-
-	public int getActionNumber() {
-		return actionNumber;
-	}
-
-	public void setActionNumber(int actionNumber) {
-		this.actionNumber = actionNumber;
-	}
-
-	public String getActionCommand() {
-		return actionCommand;
-	}
-
-	public void setActionCommand(String actionCommand) {
-		this.actionCommand = actionCommand;
-	}
-
-	public Map<String, Object> getActionParameters() {
-		return actionParameters;
-	}
-
-	public void setActionParameters(Map<String, Object> actionParameters) {
-		this.actionParameters = actionParameters;
-	}
-
-	public Map<String, Object> getDataParameters() {
-		return dataParameters;
-	}
-
-	public void setDataParameters(Map<String, Object> dataParameters) {
-		this.dataParameters = dataParameters;
-	}
-
-	public Map<String, Object> getOtherParameters() {
-		return otherParameters;
-	}
-
-	public void setOtherParameters(Map<String, Object> otherParameters) {
-		this.otherParameters = otherParameters;
-	}
-
-	public String getTimestamp() {
-		return timestamp;
-	}
-
-	public void setTimestamp(String timestamp) {
-		this.timestamp = timestamp;
-	}
-
-	public void logActionProperties() {
-
-		if(MetaOmGraph.getLoggingRequired()) {
-			counter++;
-			this.actionNumber=counter;
-			logger = MetaOmGraph.getLogger();
-			if(!this.getActionCommand().equalsIgnoreCase("general-properties")) {
-				logger.info(",");
-			}
-			
-			logger.printf(Level.INFO,new JSONMessage(this).getFormattedMessage());
-
-			ReproducibilityDashboardPanel rdp = null;
-			try {
-				rdp = MetaOmGraph.getReproducibilityDashboardPanel();
-
-				if(rdp != null) {
-					rdp.populateCurrentSessionTree(this);
-				}
-			}
-			catch(Exception e) {
-				StringWriter sw = new StringWriter();
-				e.printStackTrace(new PrintWriter(sw));
-				String exceptionAsString = sw.toString();
-				rdp.printDialog(exceptionAsString);
-			}
-		}
-	}
-
-
-}
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/logging/GeneralProperties.java b/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/logging/GeneralProperties.java
deleted file mode 100644
index a774ec2..0000000
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/logging/GeneralProperties.java
+++ /dev/null
@@ -1,75 +0,0 @@
-package edu.iastate.metnet.metaomgraph.logging;
-
-import java.util.Date;
-
-import org.apache.logging.log4j.Level;
-import org.apache.logging.log4j.Logger;
-
-/**
- * 
- * @author Harsha
- *
- *This class is a bean class for general machine properties (Memory, CPU, OS etc) that are to be logged to the reproducibility log
- *
- */
-
-public class GeneralProperties {
-
-	private String mogVersion;
-	private String javaVersion;
-	private String OS;
-	private String CPU;
-	private String memory;
-	private String sessionID;
-	private String startTimestamp;
-	
-	public String getMogVersion() {
-		return mogVersion;
-	}
-	public void setMogVersion(String mogVersion) {
-		this.mogVersion = mogVersion;
-	}
-	public String getJavaVersion() {
-		return javaVersion;
-	}
-	public void setJavaVersion(String javaVersion) {
-		this.javaVersion = javaVersion;
-	}
-	public String getOS() {
-		return OS;
-	}
-	public void setOS(String oS) {
-		OS = oS;
-	}
-	public String getCPU() {
-		return CPU;
-	}
-	public void setCPU(String cPU) {
-		CPU = cPU;
-	}
-	public String getMemory() {
-		return memory;
-	}
-	public void setMemory(String memory) {
-		this.memory = memory;
-	}
-	public String getSessionID() {
-		return sessionID;
-	}
-	public void setSessionID(String sessionID) {
-		this.sessionID = sessionID;
-	}
-	public String getStartTimestamp() {
-		return startTimestamp;
-	}
-	public void setStartTimestamp(String startTimestamp) {
-		this.startTimestamp = startTimestamp;
-	}
-	
-	public void logGeneralProperties(Logger logger) {
-		
-		logger.printf(Level.INFO,new JSONMessage(this).getFormattedMessage());
-		
-		
-	}
-}
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/logging/JSONMessage.java b/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/logging/JSONMessage.java
deleted file mode 100644
index c8d30dc..0000000
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/logging/JSONMessage.java
+++ /dev/null
@@ -1,54 +0,0 @@
-package edu.iastate.metnet.metaomgraph.logging;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import org.apache.logging.log4j.message.Message;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-
-public class JSONMessage implements Message {
-
-	private static final long serialVersionUID = 1L;
-	private String messageString;
-    private static final Gson GSON = new GsonBuilder()
-            .setPrettyPrinting()
-            .create();
-
-    public JSONMessage(){
-        this(null);
-    }
-
-    public JSONMessage(Object msgObj){
-        parseMessageAsJson(msgObj);
-    }
-
-    public JSONMessage(String msgStr){
-        Map<String,String> msgObj = new HashMap<String,String>();
-        msgObj.put("message", msgStr);
-        parseMessageAsJson(msgObj);
-    }
-
-    private void parseMessageAsJson(Object msgObj){
-        messageString = GSON.toJson(msgObj);
-    }
-
-    public String getFormattedMessage() {
-    	return messageString.replace("\n", "%n");
-  
-    }
-
-    public String getFormat() {
-        return messageString.replace("\n", "%n");
-    }
-
-    public Object[] getParameters() {
-        return null;
-    }
-
-    public Throwable getThrowable() {
-        return null;
-    }
-
-}
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/logging/UserPreferences.java b/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/logging/UserPreferences.java
deleted file mode 100644
index d785f9a..0000000
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/logging/UserPreferences.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package edu.iastate.metnet.metaomgraph.logging;
-
-import org.apache.logging.log4j.Level;
-import org.apache.logging.log4j.Logger;
-
-public class UserPreferences {
-
-	public Object recentProjects;
-	public Object theme;
-	public String showTips;
-	
-	public Object getRecentProjects() {
-		return recentProjects;
-	}
-	public void setRecentProjects(String recentProjects) {
-		this.recentProjects = recentProjects;
-	}
-	public Object getTheme() {
-		return theme;
-	}
-	public void setTheme(String theme) {
-		this.theme = theme;
-	}
-	public String getShowTips() {
-		return showTips;
-	}
-	public void setShowTips(String showTips) {
-		this.showTips = showTips;
-	}
-	public UserPreferences(String recentProjects, String theme, String showTips) {
-		super();
-		this.recentProjects = recentProjects;
-		this.theme = theme;
-		this.showTips = showTips;
-	}
-	
-	public void logUserPreferences(Logger logger) {
-		
-		logger.printf(Level.INFO,new JSONMessage(this).getFormattedMessage());
-		
-		
-	}
-}
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/playback/LoggingTreeNode.java b/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/playback/LoggingTreeNode.java
deleted file mode 100644
index aa89236..0000000
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/playback/LoggingTreeNode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package edu.iastate.metnet.metaomgraph.playback;
-
-public class LoggingTreeNode {
-
-	private String nodeName;
-	private String commandName;
-	private int nodeNumber;
-	
-	public LoggingTreeNode(String nodeName, String commandName, int nodeNumber) {
-		super();
-		this.nodeName = nodeName;
-		this.commandName = commandName;
-		this.nodeNumber = nodeNumber;
-	}
-
-	public String getNodeName() {
-		return nodeName;
-	}
-
-	public void setNodeName(String nodeName) {
-		this.nodeName = nodeName;
-	}
-
-	public int getNodeNumber() {
-		return nodeNumber;
-	}
-
-	public void setNodeNumber(int nodeNumber) {
-		this.nodeNumber = nodeNumber;
-	}
-
-	public String getCommandName() {
-		return commandName;
-	}
-
-	public void setCommandName(String commandName) {
-		this.commandName = commandName;
-	}
-
-	@Override
-	public String toString() {
-		return nodeName;
-	}
-	
-	
-	
-	
-	
-}
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/playback/PlaybackAction.java b/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/playback/PlaybackAction.java
deleted file mode 100644
index b8791d9..0000000
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/playback/PlaybackAction.java
+++ /dev/null
@@ -1,74 +0,0 @@
-package edu.iastate.metnet.metaomgraph.playback;
-
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.util.Map;
-import java.util.Set;
-
-import javax.swing.JDialog;
-import javax.swing.JTextPane;
-
-import edu.iastate.metnet.metaomgraph.MetaOmGraph;
-import edu.iastate.metnet.metaomgraph.logging.ActionProperties;
-import edu.iastate.metnet.metaomgraph.ui.MetaOmTablePanel;
-
-public class PlaybackAction {
-
-	public void playChart(ActionProperties chartAction, String chartName) {
-		
-		int val2[] = null;
-		Map<Object,Object> genes = (Map<Object,Object>)chartAction.getDataParameters().get("Selected Features");
-
-		Integer [] val = new Integer[genes.size()];
-		
-		try {
-		int j = 0;
-		for (Map.Entry<Object, Object> entry : genes.entrySet()) {
-		       if(entry.getKey() instanceof String){
-		            val[j++] = Integer.parseInt((String)entry.getKey());
-		          }
-		       else if(entry.getKey() instanceof Integer) {
-		    	   val[j++] = (Integer)entry.getKey();
-		       }
-		 }
-		
-		}
-		catch(Exception e) {
-			
-			StringWriter sw = new StringWriter();
-            e.printStackTrace(new PrintWriter(sw));
-            String exceptionAsString = sw.toString();
-            
-			JDialog jd = new JDialog();
-			JTextPane jt = new JTextPane();
-			jt.setText(exceptionAsString);
-			jt.setBounds(10, 10, 300, 100);
-			jd.getContentPane().add(jt);
-			jd.setBounds(100, 100, 500, 200);
-			jd.setVisible(true);
-		}
-
-		val2 = new int[val.length];
-
-		for (int i=0;i<val.length;i++) {
-			val2[i] = val[i];
-		}
-
-		MetaOmTablePanel mp = MetaOmGraph.getActiveTablePanel();
-		
-		if(chartName == "line-chart") {
-			mp.graphSelectedRows(val2);
-		}
-		else if(chartName == "box-plot") {
-			mp.makeBoxPlot(val2);
-		}
-		else if(chartName == "scatter-plot") {
-			mp.graphPairs(val2);
-		}
-		else if(chartName == "histogram") {
-			mp.createHistogram(val2);
-		}
-		
-	}
-	
-}
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/playback/PlaybackTabData.java b/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/playback/PlaybackTabData.java
deleted file mode 100644
index 1f2c040..0000000
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/playback/PlaybackTabData.java
+++ /dev/null
@@ -1,60 +0,0 @@
-package edu.iastate.metnet.metaomgraph.playback;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-
-import javax.swing.JTable;
-import javax.swing.JTree;
-import javax.swing.tree.DefaultMutableTreeNode;
-
-import edu.iastate.metnet.metaomgraph.logging.ActionProperties;
-
-public class PlaybackTabData {
-
-	private int tabNumber;
-	private String logFileName;
-	private HashMap<Integer,DefaultMutableTreeNode> treeStructure;
-	private ArrayList<ActionProperties> actionObjects;
-	private JTree tabTree;
-	private JTable tabTable;
-	
-	public int getTabNumber() {
-		return tabNumber;
-	}
-	public void setTabNumber(int tabNumber) {
-		this.tabNumber = tabNumber;
-	}
-	public String getLogFileName() {
-		return logFileName;
-	}
-	public void setLogFileName(String logFileName) {
-		this.logFileName = logFileName;
-	}
-	public HashMap<Integer, DefaultMutableTreeNode> getTreeStructure() {
-		return treeStructure;
-	}
-	public void setTreeStructure(HashMap<Integer, DefaultMutableTreeNode> treeStructure) {
-		this.treeStructure = treeStructure;
-	}
-	public ArrayList<ActionProperties> getActionObjects() {
-		return actionObjects;
-	}
-	public void setActionObjects(ArrayList<ActionProperties> actionObjects) {
-		this.actionObjects = actionObjects;
-	}
-	public JTree getTabTree() {
-		return tabTree;
-	}
-	public void setTabTree(JTree tabTree) {
-		this.tabTree = tabTree;
-	}
-	public JTable getTabTable() {
-		return tabTable;
-	}
-	public void setTabTable(JTable tabTable) {
-		this.tabTable = tabTable;
-	}
-	
-	
-}
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/test/ComputeMeanTest.java b/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/test/ComputeMeanTest.java
deleted file mode 100644
index 0112e40..0000000
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/test/ComputeMeanTest.java
+++ /dev/null
@@ -1,79 +0,0 @@
-package edu.iastate.metnet.metaomgraph.test;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import edu.iastate.metnet.metaomgraph.ComputeMean;
-
-public class ComputeMeanTest {
-
-	public static void main(String[] args) {
-		// TODO Auto-generated method stub
-
-		ComputeMean	c = new ComputeMean();
-		List<Integer> first = new ArrayList<Integer>();
-		List<Integer> second = new ArrayList<Integer>();
-		List<Integer> third = new ArrayList<Integer>();
-		List<Integer> fourth = new ArrayList<Integer>();
-
-		int result1,result2,result3,result4;
-
-		//Test 1
-		first.add(33);
-		first.add(92);
-		first.add(81);
-		first.add(2);
-		result1 = c.getMean(first);
-		System.out.println("Result of Testcase 1 : "+result1);
-		if(result1 == 52) {
-			System.out.println("Testcase 1 Passed\n");
-		}
-		else {
-			System.out.println("Testcase 1 Failed\n");
-		}
-
-
-		
-		//Test 2
-		second.add(-89);
-		second.add(29288);
-		second.add(-188829);
-		second.add(0);
-		second.add(-119);
-		result2 = c.getMean(second);
-		System.out.println("Result of Testcase 2 : "+result2);
-		if(result2 == -31949) {
-			System.out.println("Testcase 2 Passed\n");
-		}
-		else {
-			System.out.println("Testcase 2 Failed\n");
-		}
-
-		//Test 3
-		result3 = c.getMean(third);
-		System.out.println("Result of Testcase 3 : "+result3);
-		if(result3 == 0) {
-			System.out.println("Testcase 3 Passed\n");
-		}
-		else {
-			System.out.println("Testcase 3 Failed\n");
-		}
-		
-		//Test 4
-		fourth.add(-22);
-		fourth.add(12);
-		fourth.add(8);
-		fourth.add(2);
-		result4 = c.getMean(fourth);
-		System.out.println("Result of Testcase 4 : "+result4);
-		if(result4 == 0) {
-			System.out.println("Testcase 4 Passed\n");
-		}
-		else {
-			System.out.println("Testcase 4 Failed\n");
-		}
-
-
-	}
-
-}
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ButtonTabComponent.java b/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ButtonTabComponent.java
deleted file mode 100644
index bb95439..0000000
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ButtonTabComponent.java
+++ /dev/null
@@ -1,130 +0,0 @@
-package edu.iastate.metnet.metaomgraph.ui;
-
-import javax.swing.*;
-import javax.swing.*;
-import javax.swing.plaf.basic.BasicButtonUI;
-import java.awt.*;
-import java.awt.event.*;
-
-/**
- * Component to be used as tabComponent;
- * Contains a JLabel to show the text and 
- * a JButton to close the tab it belongs to 
- */ 
-public class ButtonTabComponent extends JPanel {
-    private final JTabbedPane pane;
-
-    public ButtonTabComponent(final JTabbedPane pane) {
-        //unset default FlowLayout' gaps
-    	
-    	GridBagConstraints gbc_panel_2 = new GridBagConstraints();
-		gbc_panel_2.fill = GridBagConstraints.BOTH;
-		gbc_panel_2.gridwidth = 2;
-		gbc_panel_2.insets = new Insets(0, 0, 5, 5);
-		gbc_panel_2.gridx = 0;
-		gbc_panel_2.gridy = 7;
-		add(this, gbc_panel_2);
-		GridBagLayout gbl_panel_2 = new GridBagLayout();
-		gbl_panel_2.columnWidths = new int[]{280, 220, 0};
-		gbl_panel_2.rowHeights = new int[]{90, 0};
-		gbl_panel_2.columnWeights = new double[]{0.0, 0.0, Double.MIN_VALUE};
-		gbl_panel_2.rowWeights = new double[]{1.0, Double.MIN_VALUE};
-		this.setLayout(gbl_panel_2);
-		
-		this.add(pane);
-		
-        if (pane == null) {
-            throw new NullPointerException("TabbedPane is null");
-        }
-        this.pane = pane;
-        setOpaque(false);
-        
-        //make JLabel read titles from JTabbedPane
-        JLabel label = new JLabel() {
-            public String getText() {
-                int i = pane.indexOfTabComponent(ButtonTabComponent.this);
-                if (i != -1) {
-                    return pane.getTitleAt(i);
-                }
-                return null;
-            }
-        };
-        
-        add(label);
-        //add more space between the label and the button
-        label.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 5));
-        //tab button
-        JButton button = new TabButton();
-        add(button);
-    }
-
-    private class TabButton extends JButton implements ActionListener {
-        public TabButton() {
-//            int size = 17;
-//            setPreferredSize(new Dimension(size, size));
-            setToolTipText("close this tab");
-            //Make the button looks the same for all Laf's
-            setUI(new BasicButtonUI());
-            //Make it transparent
-            setContentAreaFilled(false);
-            //No need to be focusable
-            setFocusable(false);
-            setBorder(BorderFactory.createEtchedBorder());
-            setBorderPainted(false);
-            //Making nice rollover effect
-            //we use the same listener for all buttons
-            addMouseListener(buttonMouseListener);
-            setRolloverEnabled(true);
-            //Close the proper tab by clicking the button
-            addActionListener(this);
-        }
-
-        public void actionPerformed(ActionEvent e) {
-            int i = pane.indexOfTabComponent(ButtonTabComponent.this);
-            if (i != -1) {
-                pane.remove(i);
-            }
-        }
-
-        //we don't want to update UI for this button
-        public void updateUI() {
-        }
-
-        //paint the cross
-        protected void paintComponent(Graphics g) {
-            super.paintComponent(g);
-            Graphics2D g2 = (Graphics2D) g.create();
-            //shift the image for pressed buttons
-            if (getModel().isPressed()) {
-                g2.translate(1, 1);
-            }
-            g2.setStroke(new BasicStroke(2));
-            g2.setColor(Color.BLACK);
-            if (getModel().isRollover()) {
-                g2.setColor(Color.MAGENTA);
-            }
-            int delta = 6;
-            g2.drawLine(delta, delta, getWidth() - delta - 1, getHeight() - delta - 1);
-            g2.drawLine(getWidth() - delta - 1, delta, delta, getHeight() - delta - 1);
-            g2.dispose();
-        }
-    }
-
-    private final static MouseListener buttonMouseListener = new MouseAdapter() {
-        public void mouseEntered(MouseEvent e) {
-            Component component = e.getComponent();
-            if (component instanceof AbstractButton) {
-                AbstractButton button = (AbstractButton) component;
-                button.setBorderPainted(true);
-            }
-        }
-
-        public void mouseExited(MouseEvent e) {
-            Component component = e.getComponent();
-            if (component instanceof AbstractButton) {
-                AbstractButton button = (AbstractButton) component;
-                button.setBorderPainted(false);
-            }
-        }
-    };
-}
\ No newline at end of file
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ClosableTabbedPane.java b/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ClosableTabbedPane.java
deleted file mode 100644
index 5500a9f..0000000
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ClosableTabbedPane.java
+++ /dev/null
@@ -1,99 +0,0 @@
-/**
- * This is a custom tabbed pane class which has close button
- */
-package edu.iastate.metnet.metaomgraph.ui;
-
-import java.awt.Color;
-import java.awt.Component;
-import java.awt.FlowLayout;
-import java.awt.Insets;
-import java.awt.event.MouseEvent;
-import java.awt.event.MouseListener;
-
-import javax.swing.Icon;
-import javax.swing.JButton;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JTabbedPane;
-
-public class ClosableTabbedPane extends JTabbedPane {
-
-	public ClosableTabbedPane() {
-		super();
-	}
-	
-	@Override
-	public void addTab(String title, Icon icon, Component component, String tip) {
-		// TODO Auto-generated method stub
-		super.addTab(title, icon, component, tip);
-		int tabNo = this.getTabCount() - 1;
-		setTabComponentAt(tabNo, new ClosablePanel(component,title,icon));
-	}
-	
-	public void addNonClosableTab(String title, Icon icon, Component component, String tip) {
-		super.addTab(title, icon, component, tip);
-	}
-	
-	private class ClosablePanel extends JPanel{
-		private Component comp;
-		
-		public ClosablePanel(Component comp, String title, Icon icon) {
-			this.comp = comp;
-			setOpaque(false);
-			
-			FlowLayout tabLayout = new FlowLayout(FlowLayout.CENTER,3,3);
-			setLayout(tabLayout);
-			
-			JLabel tabLabel = new JLabel(title);
-			tabLabel.setIcon(icon);
-			add(tabLabel);
-			
-			JButton closeButton = new JButton("x");
-			closeButton.setMargin(new Insets(0,4,0,4));
-			closeButton.setOpaque(false);
-			closeButton.setBorderPainted(false);
-			closeButton.addMouseListener(new CloseButtonListener(comp));
-			add(closeButton);
-			
-		}
-	}
-	
-	private class CloseButtonListener implements MouseListener{
-		
-		Component tab;
-		public CloseButtonListener(Component tab) {
-			this.tab = tab;
-		}
-		
-		@Override
-		public void mouseClicked(MouseEvent e) {
-			// TODO Auto-generated method stub
-			
-			if(e.getSource() instanceof JButton) {
-				JButton exitButton = (JButton)e.getSource();
-				JTabbedPane tabbedPane = (JTabbedPane)exitButton.getParent().getParent().getParent();
-				tabbedPane.remove(tab);
-			}
-		}
-		@Override
-		public void mouseEntered(MouseEvent e) {
-			// TODO Auto-generated method stub
-			
-		}
-		@Override
-		public void mousePressed(MouseEvent e) {
-			// TODO Auto-generated method stub
-			
-		}
-		@Override
-		public void mouseReleased(MouseEvent e) {
-			// TODO Auto-generated method stub
-			
-		}
-		@Override
-		public void mouseExited(MouseEvent e) {
-			// TODO Auto-generated method stub
-			
-		}
-	}
-}
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/CorrelationMetaTable.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/CorrelationMetaTable.java
index 96140a0..170a23c 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/CorrelationMetaTable.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/CorrelationMetaTable.java
@@ -182,7 +182,7 @@ public class CorrelationMetaTable extends JInternalFrame {
 		mntmSaveTable.addActionListener(new ActionListener() {
 			@Override
 			public void actionPerformed(ActionEvent arg0) {
-				Utils.saveJTabletofile(table, "Correlation Metadata Table");
+				Utils.saveJTabletofile(table);
 			}
 		});
 		mnFile.add(mntmSaveTable);
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/CreateListFrame.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/CreateListFrame.java
index f63c429..9f78328 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/CreateListFrame.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/CreateListFrame.java
@@ -2,15 +2,10 @@ package edu.iastate.metnet.metaomgraph.ui;
 
 import edu.iastate.metnet.metaomgraph.MetaOmGraph;
 import edu.iastate.metnet.metaomgraph.MetaOmProject;
-import edu.iastate.metnet.metaomgraph.logging.ActionProperties;
 import edu.iastate.metnet.metaomgraph.utils.Utils;
 
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.Map;
 import java.util.Vector;
 import javax.swing.JButton;
 import javax.swing.JInternalFrame;
@@ -18,213 +13,168 @@ import javax.swing.JPanel;
 import javax.swing.event.ChangeEvent;
 import javax.swing.event.ChangeListener;
 
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
 
 public class CreateListFrame
-extends JInternalFrame
-implements ActionListener, ChangeListener {
-
-
-	public static final String OK_COMMAND = "OK";
-	public static final String CANCEL_COMMAND = "Cancel";
-	public static final String IMPORT_COMMAND = "Import";
-	private final DualTablePanel dtp;
-	private String listName;
-	private MetaOmProject myProject;
-	private JButton createButton;
-	private JButton cancelButton;
-	private JButton importButton;
-	private CreateListFrame myself;
-	private boolean editList=false;
-
-	public CreateListFrame(MetaOmProject project) {
-		this(project, null);
-	}
-
-
-	public CreateListFrame(MetaOmProject project, String listName) {
-		myself = this;
-		this.listName = listName;
-		myProject = project;
-		JPanel buttonPanel = new JPanel();
-		createButton = new JButton("Create");
-		createButton.setActionCommand("OK");
-		createButton.addActionListener(this);
-		createButton.setEnabled(false);
-		cancelButton = new JButton("Cancel");
-		cancelButton.setActionCommand("Cancel");
-		cancelButton.addActionListener(this);
-		importButton = new JButton("Import");
-		importButton.setActionCommand("Import");
-		importButton.addActionListener(this);
-		buttonPanel.add(importButton);
-		buttonPanel.add(createButton);
-		buttonPanel.add(cancelButton);
-		//urmi changed
-		String[] headers = new String[myProject.getInfoColumnCount() + 1];
-		headers[0] = "row number";
-		for (int x = 1; x < headers.length; x++)
-			headers[x] = myProject.getInfoColumnNames()[(x - 1)];
-		/*
+        extends JInternalFrame
+        implements ActionListener, ChangeListener {
+    public static final String OK_COMMAND = "OK";
+    public static final String CANCEL_COMMAND = "Cancel";
+    public static final String IMPORT_COMMAND = "Import";
+    private final DualTablePanel dtp;
+    private String listName;
+    private MetaOmProject myProject;
+    private JButton createButton;
+    private JButton cancelButton;
+    private JButton importButton;
+    private CreateListFrame myself;
+
+    public CreateListFrame(MetaOmProject project) {
+        this(project, null);
+    }
+
+
+    public CreateListFrame(MetaOmProject project, String listName) {
+        myself = this;
+        this.listName = listName;
+        myProject = project;
+        JPanel buttonPanel = new JPanel();
+        createButton = new JButton("Create");
+        createButton.setActionCommand("OK");
+        createButton.addActionListener(this);
+        createButton.setEnabled(false);
+        cancelButton = new JButton("Cancel");
+        cancelButton.setActionCommand("Cancel");
+        cancelButton.addActionListener(this);
+        importButton = new JButton("Import");
+        importButton.setActionCommand("Import");
+        importButton.addActionListener(this);
+        buttonPanel.add(importButton);
+        buttonPanel.add(createButton);
+        buttonPanel.add(cancelButton);
+      //urmi changed
+        String[] headers = new String[myProject.getInfoColumnCount() + 1];
+        headers[0] = "row number";
+        for (int x = 1; x < headers.length; x++)
+            headers[x] = myProject.getInfoColumnNames()[(x - 1)];
+        /*
         String[] headers = new String[myProject.getInfoColumnCount()];
         for (int x = 0; x < headers.length; x++)
             headers[x] = myProject.getInfoColumnNames()[(x)];
-		 */
-		int[] activeEntries;
-		if (listName != null) {
-
-			createButton.setText("OK");
-			activeEntries = myProject.getGeneListRowNumbers(listName);
-			editList = true;
-		} else {
-			if ("Complete List".equals(MetaOmGraph.getActiveTable()
-					.getSelectedListName())) {
-				activeEntries =
-						MetaOmGraph.getActiveTable().getTrueSelectedRows();
-			} else {
-				int[] entries = myProject.getGeneListRowNumbers(
-						MetaOmGraph.getActiveTable().getSelectedListName());
-				int[] selectedRows = MetaOmGraph.getActiveTable()
-						.getTrueSelectedRows();
-				activeEntries = new int[selectedRows.length];
-				int x = 0;
-				for (int index : selectedRows) {
-					activeEntries[(x++)] = entries[index];
-				}
-			}
-			if (activeEntries.length > 0) {
-				createButton.setEnabled(true);
-			}
-		}
-		int[] inactiveEntries = new int[myProject.getRowNames().length -
-		                                activeEntries.length];
-		int thisEntry = 0;
-		for (int i = 0; i < inactiveEntries.length; i++) {
-			while (Utils.isIn(thisEntry, activeEntries))
-				thisEntry++;
-			inactiveEntries[i] = thisEntry;
-			thisEntry++;
-		}
-		Object[][] active = new Object[activeEntries.length][headers.length];
-		Object[][] inactive = new Object[inactiveEntries.length][headers.length];
-		for (int x = 0; x < active.length; x++) {
-			//urmi removed
-			active[x][0] = new Integer(activeEntries[x]);
-			Object[] thisRowName = myProject.getRowName(activeEntries[x]);
-			for (int y = 1; y < active[x].length; y++)
-				active[x][y] = thisRowName[(y - 1)];
-		}
-		for (int x = 0; x < inactive.length; x++) {
-			//urmi removed
-			inactive[x][0] = new Integer(inactiveEntries[x]);
-			Object[] thisRowName = myProject.getRowName(inactiveEntries[x]);
-			for (int y = 1; y < inactive[x].length; y++)
-				inactive[x][y] = thisRowName[(y - 1)];
-		}
-		dtp = new DualTablePanel(inactive, active, headers);
-		dtp.addChangeListener(this);
-		dtp.hideColumn(0);
-		dtp.setActiveLabel("In List");
-		dtp.setInactiveLabel("Not In List");
-		getContentPane().add(dtp, "Center");
-		getContentPane().add(buttonPanel, "Last");
-		setDefaultCloseOperation(2);
-	}
-
-	@Override
+            */
+        int[] activeEntries;
+        if (listName != null) {
+
+
+            createButton.setText("OK");
+            activeEntries = myProject.getGeneListRowNumbers(listName);
+        } else {
+            if ("Complete List".equals(MetaOmGraph.getActiveTable()
+                    .getSelectedListName())) {
+                activeEntries =
+                        MetaOmGraph.getActiveTable().getTrueSelectedRows();
+            } else {
+                int[] entries = myProject.getGeneListRowNumbers(
+                        MetaOmGraph.getActiveTable().getSelectedListName());
+                int[] selectedRows = MetaOmGraph.getActiveTable()
+                        .getTrueSelectedRows();
+                activeEntries = new int[selectedRows.length];
+                int x = 0;
+                for (int index : selectedRows) {
+                    activeEntries[(x++)] = entries[index];
+                }
+            }
+            if (activeEntries.length > 0) {
+                createButton.setEnabled(true);
+            }
+        }
+        int[] inactiveEntries = new int[myProject.getRowNames().length -
+                activeEntries.length];
+        int thisEntry = 0;
+        for (int i = 0; i < inactiveEntries.length; i++) {
+            while (Utils.isIn(thisEntry, activeEntries))
+                thisEntry++;
+            inactiveEntries[i] = thisEntry;
+            thisEntry++;
+        }
+        Object[][] active = new Object[activeEntries.length][headers.length];
+        Object[][] inactive = new Object[inactiveEntries.length][headers.length];
+        for (int x = 0; x < active.length; x++) {
+        	//urmi removed
+            active[x][0] = new Integer(activeEntries[x]);
+            Object[] thisRowName = myProject.getRowName(activeEntries[x]);
+            for (int y = 1; y < active[x].length; y++)
+                active[x][y] = thisRowName[(y - 1)];
+        }
+        for (int x = 0; x < inactive.length; x++) {
+        	//urmi removed
+            inactive[x][0] = new Integer(inactiveEntries[x]);
+            Object[] thisRowName = myProject.getRowName(inactiveEntries[x]);
+            for (int y = 1; y < inactive[x].length; y++)
+                inactive[x][y] = thisRowName[(y - 1)];
+        }
+        dtp = new DualTablePanel(inactive, active, headers);
+        dtp.addChangeListener(this);
+        dtp.hideColumn(0);
+        dtp.setActiveLabel("In List");
+        dtp.setInactiveLabel("Not In List");
+        getContentPane().add(dtp, "Center");
+        getContentPane().add(buttonPanel, "Last");
+        setDefaultCloseOperation(2);
+    }
+
+    @Override
 	public void actionPerformed(ActionEvent e) {
-		if ("OK".equals(e.getActionCommand())) {
-			Object[][] activeValues = dtp.getActiveValues();
-			int[] result = new int[activeValues.length];
-
-
-
-			for (int i = 0; i < result.length; i++)
-				result[i] = ((Integer) activeValues[i][0]).intValue();
-
-			if(editList) {
-				if (myProject.addGeneList(listName, result, true, false)) {
-
-					try {
-						//Harsha - reproducibility log
-						HashMap<String,Object> actionMap = new HashMap<String,Object>();
-						actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-						actionMap.put("section", "Feature Metadata");
-
-						HashMap<String,Object> dataMap = new HashMap<String,Object>();
-						dataMap.put("List Name", listName);
-						dataMap.put("List Elements Count", result.length);
-						Map<Integer,String> selectedItems = new HashMap<Integer,String>();
-
-						for(int rowNum: result) {
-							selectedItems.put(rowNum, myProject.getDefaultRowNames(rowNum));
-						}
-						dataMap.put("Selected Rows", selectedItems);
-						HashMap<String,Object> resultLog = new HashMap<String,Object>();
-						resultLog.put("result", "OK");
-
-						ActionProperties createListAction = new ActionProperties("edit-list",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-						createListAction.logActionProperties();
-					}
-					catch(Exception e1) {
-
-					}
-
-					dispose();
-				}
-			}
-			else {
-
-				if (myProject.addGeneList(listName, result, true, true)) {	
-					dispose();
-				}
-			}
-
-			return;
-		}
-		if ("Cancel".equals(e.getActionCommand())) {
-			dispose();
-			return;
-		}
-		if ("Import".equals(e.getActionCommand())) {
-
-
-			int[] importUs = ImportListDialog.doImport(myProject);
-			//JOptionPane.showMessageDialog(null, "iu"+Arrays.toString(importUs));
-			if ((importUs == null) || (importUs.length <= 0)) {
-				return;
-			}
-			Vector<Integer> v = new Vector();
-			Object[][] inactiveValues = dtp.getInactiveValues();
-			for (int x = 0; x < importUs.length; x++) {
-				boolean found = false;
-				for (int y = 0; (y < inactiveValues.length) && (!found); y++) {
-					if (importUs[x] == ((Integer) inactiveValues[y][0])
-							.intValue()) {
-						v.add(new Integer(y));
-						found = true;
-					}
-				}
-			}
-			int[] result = new int[v.size()];
-			for (int i = 0; i < result.length; i++)
-				result[i] = v.get(i).intValue();
-			dtp.makeActive(result);
-			return;
-		}
-	}
-
-	@Override
+        if ("OK".equals(e.getActionCommand())) {
+            Object[][] activeValues = dtp.getActiveValues();
+            int[] result = new int[activeValues.length];
+            for (int i = 0; i < result.length; i++)
+                result[i] = ((Integer) activeValues[i][0]).intValue();
+            if (myProject.addGeneList(listName, result, true)) {
+                dispose();
+            }
+            return;
+        }
+        if ("Cancel".equals(e.getActionCommand())) {
+            dispose();
+            return;
+        }
+        if ("Import".equals(e.getActionCommand())) {
+
+
+            int[] importUs = ImportListDialog.doImport(myProject);
+            //JOptionPane.showMessageDialog(null, "iu"+Arrays.toString(importUs));
+            if ((importUs == null) || (importUs.length <= 0)) {
+                return;
+            }
+            Vector<Integer> v = new Vector();
+            Object[][] inactiveValues = dtp.getInactiveValues();
+            for (int x = 0; x < importUs.length; x++) {
+                boolean found = false;
+                for (int y = 0; (y < inactiveValues.length) && (!found); y++) {
+                    if (importUs[x] == ((Integer) inactiveValues[y][0])
+                            .intValue()) {
+                        v.add(new Integer(y));
+                        found = true;
+                    }
+                }
+            }
+            int[] result = new int[v.size()];
+            for (int i = 0; i < result.length; i++)
+                result[i] = v.get(i).intValue();
+            dtp.makeActive(result);
+            return;
+        }
+    }
+
+    @Override
 	public void stateChanged(ChangeEvent e) {
-		if ("reset".equals(e.getSource())) {
-			dtp.hideColumn(0);
-		}
-		if (dtp.hasActiveValues()) {
-			createButton.setEnabled(true);
-		} else {
-			createButton.setEnabled(false);
-		}
-	}
+        if ("reset".equals(e.getSource())) {
+            dtp.hideColumn(0);
+        }
+        if (dtp.hasActiveValues()) {
+            createButton.setEnabled(true);
+        } else {
+            createButton.setEnabled(false);
+        }
+    }
 }
diff --git a/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/CustomFileSaveDialog.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/CustomFileSaveDialog.java
new file mode 100644
index 0000000..1f82a99
--- /dev/null
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/CustomFileSaveDialog.java
@@ -0,0 +1,67 @@
+/**
+ * 
+ */
+package edu.iastate.metnet.metaomgraph.ui;
+
+import java.io.File;
+import java.util.HashMap;
+
+import javax.swing.JFileChooser;
+import javax.swing.filechooser.FileNameExtensionFilter;
+
+import edu.iastate.metnet.metaomgraph.MetaOmGraph;
+
+/**
+ * @author sumanth
+ * Creates custom save dialog box with the options provided by the user.
+ */
+public class CustomFileSaveDialog {
+	private String fileName;
+	private HashMap<String, String> fileTypes = new HashMap<String, String>();
+	private String dialogBoxTitle;
+	
+	/**
+	 * Constructor to create default save dialog box with filename and title.
+	 * @param defaultFileName
+	 * @param dialogBoxTitle
+	 */
+	public CustomFileSaveDialog(String defaultFileName, String dialogBoxTitle) {
+		this.fileName = defaultFileName;
+		this.dialogBoxTitle = dialogBoxTitle;
+		fileTypes = null;
+	}
+	
+	/**
+	 * Constructor to create save dialog box with filename, title and default filetypes.
+	 * @param defaultFileName
+	 * @param dialogBoxTitle
+	 * @param fileTypes
+	 */
+	public CustomFileSaveDialog(String defaultFileName, String dialogBoxTitle, HashMap<String, String> fileTypes) {
+		this.fileName = defaultFileName;
+		this.dialogBoxTitle = dialogBoxTitle;
+		this.fileTypes = fileTypes;
+	}
+	
+	/**
+	 * Display dialog and returns the file saved by user, returns null if not able to save the file.
+	 * @return File 
+	 */
+	public File showSaveDialog() {
+		JFileChooser saveDialog = new JFileChooser();
+		saveDialog.setDialogTitle(dialogBoxTitle);
+		saveDialog.setSelectedFile(new File(fileName));
+		if(fileTypes != null) {
+			fileTypes.forEach((key, value) -> saveDialog.addChoosableFileFilter(
+					new FileNameExtensionFilter(key, value)));
+		}
+		
+		int userSelectedOption = saveDialog.showSaveDialog(MetaOmGraph.getMainWindow());
+		File savedFile = null;
+		if(userSelectedOption == JFileChooser.APPROVE_OPTION) {
+			savedFile = saveDialog.getSelectedFile();
+		}
+		return savedFile;
+	}
+
+}
diff --git a/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/CustomMessagePane.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/CustomMessagePane.java
new file mode 100644
index 0000000..b953b15
--- /dev/null
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/CustomMessagePane.java
@@ -0,0 +1,146 @@
+/**
+ * 
+ */
+package edu.iastate.metnet.metaomgraph.ui;
+
+import javax.swing.JOptionPane;
+import edu.iastate.metnet.metaomgraph.MetaOmGraph;
+
+/**
+ * @author sumanth
+ * Creates custom message box with the options provided by the user.
+ * Set icon using the enum MessageBoxType.
+ * Set buttons using the enum MessageBoxButtons.
+ */
+public class CustomMessagePane {
+	public enum MessageBoxType{
+		ERROR,
+		INFORMATION,
+		WARNING,
+		QUESTION,
+		PLAIN
+	}
+
+	public enum MessageBoxButtons{
+		OK,
+		YES_NO,
+		YES_NO_CANCEL,
+		OK_CANCEL
+	}
+
+	public enum UserClickedButton{
+		OK,
+		YES,
+		NO,
+		CANCEL
+	}
+	
+	private MessageBoxType messageType;
+	private MessageBoxButtons buttonsType;
+	private String textToDisplay;
+	private String messageBoxTitle;
+	
+	/**
+	 * Constructor to display default message box with Ok button.
+	 * @param messageBoxTitle
+	 * @param textToDisplay
+	 */
+	public CustomMessagePane(String messageBoxTitle, String textToDisplay) {
+		this.messageBoxTitle = messageBoxTitle;
+		this.textToDisplay = textToDisplay;
+		this.buttonsType = MessageBoxButtons.OK;
+		this.messageType = MessageBoxType.PLAIN;
+	}
+	
+	/**
+	 * Constructor to specify the icon/message type with Ok button.
+	 * @param messageBoxTitle
+	 * @param textToDisplay
+	 * @param messageType
+	 */
+	public CustomMessagePane(String messageBoxTitle, String textToDisplay, MessageBoxType messageType) {
+		this.messageBoxTitle = messageBoxTitle;
+		this.textToDisplay = textToDisplay;
+		this.messageType = messageType;
+		this.buttonsType = MessageBoxButtons.OK;
+	}
+	
+	/**
+	 * Constructor to specify the buttons of message box.
+	 * @param messageBoxTitle
+	 * @param textToDisplay
+	 * @param buttonsType
+	 */
+	public CustomMessagePane(String messageBoxTitle, String textToDisplay, MessageBoxButtons buttonsType) {
+		this.messageBoxTitle = messageBoxTitle;
+		this.textToDisplay = textToDisplay;
+		this.buttonsType = buttonsType;
+		this.messageType = MessageBoxType.PLAIN;
+	}
+	
+	/**
+	 * Constructor to create custom message box with all the custom options.
+	 * @param messageBoxTitle
+	 * @param textToDisplay
+	 * @param messageType
+	 * @param buttonsType
+	 */
+	public CustomMessagePane(String messageBoxTitle, String textToDisplay, MessageBoxType messageType, 
+			MessageBoxButtons buttonsType) {
+		this.messageType = messageType;
+		this.buttonsType = buttonsType;
+		this.messageBoxTitle = messageBoxTitle;
+		this.textToDisplay = textToDisplay;
+	}
+	
+	private UserClickedButton determineButtonClicked(int resultReturned) {
+		if(buttonsType == MessageBoxButtons.OK)
+			return UserClickedButton.OK;
+		else if(buttonsType == MessageBoxButtons.YES_NO) {
+			return (resultReturned == 0) ? UserClickedButton.YES :  UserClickedButton.NO;
+		}
+		else if(buttonsType == MessageBoxButtons.OK_CANCEL) {
+			return (resultReturned == 0) ? UserClickedButton.OK :  UserClickedButton.CANCEL;
+		}
+		else {
+			if(resultReturned == 0)
+				return UserClickedButton.YES;
+			else if(resultReturned == 1)
+				return UserClickedButton.NO;
+			else
+				return UserClickedButton.CANCEL;
+		}
+	}
+	
+	/**
+	 * Displays message box.
+	 * @return enum UserClickedButton
+	 */
+	public UserClickedButton displayMessageBox() {
+		int selectedButton = JOptionPane.showConfirmDialog(MetaOmGraph.getMainWindow(), textToDisplay, messageBoxTitle, 
+				buttonsType.ordinal() - 1, messageType.ordinal());
+		return determineButtonClicked(selectedButton);
+	}
+	
+	/**
+	 * Displays message box with the text provided.
+	 * @param textToDisplay
+	 * @return enum UserClickedButton
+	 */
+	public UserClickedButton displayMessageBox(String textToDisplay) {
+		this.textToDisplay = textToDisplay;
+		return displayMessageBox();
+	}
+	
+	/**
+	 * Displays message box with the text provided and the message.
+	 * @param messageBoxTitle
+	 * @param textToDisplay
+	 * @return
+	 */
+	public UserClickedButton displayMessageBox(String messageBoxTitle, String textToDisplay) {
+		this.textToDisplay = textToDisplay;
+		this.messageBoxTitle = messageBoxTitle;
+		return displayMessageBox();
+	}
+}
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/DiffCorrResultsTable.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/DiffCorrResultsTable.java
index 154bda4..66cf71a 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/DiffCorrResultsTable.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/DiffCorrResultsTable.java
@@ -6,12 +6,9 @@ import java.awt.Point;
 import java.awt.event.MouseAdapter;
 import java.awt.event.MouseEvent;
 import java.io.IOException;
-import java.text.SimpleDateFormat;
 import java.util.ArrayList;
-import java.util.Date;
 import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 import java.util.Vector;
 
 import javax.swing.JComboBox;
@@ -31,7 +28,6 @@ import javax.swing.table.TableCellRenderer;
 import org.apache.commons.math3.analysis.function.Atan;
 import org.apache.commons.math3.analysis.function.Atanh;
 import org.apache.commons.math3.distribution.NormalDistribution;
-import org.apache.logging.log4j.Logger;
 
 import edu.iastate.metnet.metaomgraph.AdjustPval;
 import edu.iastate.metnet.metaomgraph.MetaOmGraph;
@@ -40,7 +36,6 @@ import edu.iastate.metnet.metaomgraph.chart.BoxPlot;
 import edu.iastate.metnet.metaomgraph.chart.HistogramChart;
 import edu.iastate.metnet.metaomgraph.chart.MetaOmChartPanel;
 import edu.iastate.metnet.metaomgraph.chart.ScatterPlotChart;
-import edu.iastate.metnet.metaomgraph.logging.ActionProperties;
 import edu.iastate.metnet.metaomgraph.DecimalFormatRenderer;
 import edu.iastate.metnet.metaomgraph.utils.Utils;
 import javax.swing.JMenu;
@@ -51,7 +46,6 @@ import javax.swing.event.MenuListener;
 import javax.swing.event.MenuEvent;
 
 public class DiffCorrResultsTable extends JInternalFrame {
-	
 	private JTable table;
 	private List<String> featureNames;
 	private List<Double> corrVals1;
@@ -155,7 +149,7 @@ public class DiffCorrResultsTable extends JInternalFrame {
 		mntmExportToFile.addActionListener(new ActionListener() {
 			@Override
 			public void actionPerformed(ActionEvent arg0) {
-				Utils.saveJTabletofile(table, "Diff Correlation Table");
+				Utils.saveJTabletofile(table);
 			}
 		});
 		mnFile.add(mntmExportToFile);
@@ -181,32 +175,7 @@ public class DiffCorrResultsTable extends JInternalFrame {
 					return;
 				}
 
-				if (myProject.addGeneList(listName, rowIndices, true, false)) {
-					
-					try {
-						//Harsha - reproducibility log
-						HashMap<String,Object> actionMap = new HashMap<String,Object>();
-						actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-						HashMap<String,Object> dataMap = new HashMap<String,Object>();
-						dataMap.put("Exported List Name", listName);
-						dataMap.put("List Elements Count", rowIndices.length);
-						Map<Integer,String> selectedItems = new HashMap<Integer,String>();
-
-						for(int rowNum: rowIndices) {
-							selectedItems.put(rowNum, myProject.getDefaultRowNames(rowNum));
-						}
-						dataMap.put("Selected Rows", selectedItems);
-						HashMap<String,Object> resultLog = new HashMap<String,Object>();
-						resultLog.put("result", "OK");
-
-						ActionProperties mergeListAction = new ActionProperties("export-to-list",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-						mergeListAction.logActionProperties();
-					}
-					catch(Exception e1) {
-
-					}
-					
+				if (myProject.addGeneList(listName, rowIndices, true)) {
 					JOptionPane.showMessageDialog(DiffCorrResultsTable.this, "List" + listName + " added", "List added",
 							JOptionPane.INFORMATION_MESSAGE);
 				}
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/DisplayMetadataEditor.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/DisplayMetadataEditor.java
index f7feb43..39bb726 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/DisplayMetadataEditor.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/DisplayMetadataEditor.java
@@ -22,6 +22,7 @@ import javax.swing.BoxLayout;
 import javax.swing.DefaultListModel;
 import javax.swing.DropMode;
 import javax.swing.JButton;
+import javax.swing.JDialog;
 import javax.swing.JFrame;
 import javax.swing.JList;
 import javax.swing.JOptionPane;
@@ -44,7 +45,7 @@ import edu.iastate.metnet.metaomgraph.MetaOmGraph;
 import edu.iastate.metnet.metaomgraph.MetadataCollection;
 import edu.iastate.metnet.metaomgraph.MetadataTreeStructure;
 
-public class DisplayMetadataEditor extends JFrame implements ActionListener {
+public class DisplayMetadataEditor extends JDialog implements ActionListener {
 
 	private JTree tree = null;
 	private List<String> headers;
@@ -60,6 +61,7 @@ public class DisplayMetadataEditor extends JFrame implements ActionListener {
 	public DisplayMetadataEditor() {
 		// TODO Auto-generated constructor stub
 		//treeStruct = MetaOmGraph.getActiveProject().returntree();
+		setModal(true);
 		this.tree = treeStruct.getTree();
 		this.headers = treeStruct.getList();
 		mogColl = MetaOmGraph.getActiveProject().getMetadataHybrid().getMetadataCollection();
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/DualTablePanel.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/DualTablePanel.java
index e6d2441..98fb3b9 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/DualTablePanel.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/DualTablePanel.java
@@ -4,6 +4,7 @@ import edu.iastate.metnet.metaomgraph.AnimatedSwingWorker;
 import edu.iastate.metnet.metaomgraph.MetaOmGraph;
 import edu.iastate.metnet.metaomgraph.utils.Utils;
 import edu.iastate.metnet.metaomgraph.Metadata.MetadataQuery;
+import edu.iastate.metnet.metaomgraph.SearchMatchType;
 
 import java.awt.BorderLayout;
 import java.awt.Color;
@@ -221,7 +222,7 @@ public class DualTablePanel extends JPanel implements ActionListener {
 			for (int i = 0; i < queries.length; i++) {
 
 				matchingRows.addAll(
-						getMatchingRow(queries[i].getField(), queries[i].getTerm(), inactiveTable, queries[i].isExact()));
+						getMatchingRow(queries[i].getField(), queries[i].getTerm(), inactiveTable, queries[i].getMatchType()));
 			}
 
 		} else {
@@ -229,7 +230,7 @@ public class DualTablePanel extends JPanel implements ActionListener {
 			for (int i = 0; i < queries.length; i++) {
 				java.util.List<Integer> temp = new ArrayList<>();
 				temp.addAll(
-						getMatchingRow(queries[i].getField(), queries[i].getTerm(), inactiveTable, queries[i].isExact()));
+						getMatchingRow(queries[i].getField(), queries[i].getTerm(), inactiveTable, queries[i].getMatchType()));
 				tempList.add(temp);
 			}
 
@@ -261,7 +262,7 @@ public class DualTablePanel extends JPanel implements ActionListener {
 		
 	}
 
-	private java.util.List<Integer> getMatchingRow(String colName, String val, JTable tab, boolean exact) {
+	private java.util.List<Integer> getMatchingRow(String colName, String val, JTable tab, SearchMatchType matchType) {
 		java.util.List<Integer> res = new ArrayList<>();
 
 		// special case
@@ -277,16 +278,21 @@ public class DualTablePanel extends JPanel implements ActionListener {
 					if (tab.getModel().getValueAt(i, j) != null) {
 						valAtij = tab.getModel().getValueAt(i, j).toString();
 					}
-					if (exact) {
+					if (matchType == SearchMatchType.IS) {
 						if (!valAtij.equals(val)) {
 							breakFlag = true;
 							break;
 						}
-					} else {
+					} else if(matchType == SearchMatchType.CONTAINS){
 						if (!valAtij.contains(val)) {
 							breakFlag = true;
 							break;
 						}
+					} else {
+						if(valAtij.equals(val)) {
+							breakFlag = true;
+							break;
+						}
 					}
 				}
 				if (!breakFlag) {
@@ -305,12 +311,12 @@ public class DualTablePanel extends JPanel implements ActionListener {
 					if (tab.getModel().getValueAt(i, j) != null) {
 						valAtij = tab.getModel().getValueAt(i, j).toString();
 					}
-					if (exact) {
+					if (matchType == SearchMatchType.IS) {
 						if (valAtij.equals(val)) {
 							foundFlag = true;
 							break;
 						}
-					} else {
+					} else if(matchType == SearchMatchType.CONTAINS){
 						if (valAtij.contains(val)) {
 							// JOptionPane.showMessageDialog(null, "col" + j + ":" + tab.getColumnName(j) +
 							// " row:" + i);
@@ -319,6 +325,11 @@ public class DualTablePanel extends JPanel implements ActionListener {
 							foundFlag = true;
 							break;
 						}
+					} else {
+						if (!valAtij.equals(val)) {
+							foundFlag = true;
+							break;
+						}
 					}
 				}
 
@@ -335,14 +346,18 @@ public class DualTablePanel extends JPanel implements ActionListener {
 				if (tab.getModel().getValueAt(i, colIndex) != null) {
 					valAtij = tab.getModel().getValueAt(i, colIndex).toString();
 				}
-				if (exact) {
+				if (matchType == SearchMatchType.IS) {
 					if (valAtij.equals(val)) {
 						res.add(i);
 					}
-				} else {
+				} else if(matchType == SearchMatchType.CONTAINS){
 					if (valAtij.contains(val)) {
 						res.add(i);
 					}
+				} else {
+					if (!valAtij.equals(val)) {
+						res.add(i);
+					}
 				}
 			}
 
@@ -371,7 +386,7 @@ public class DualTablePanel extends JPanel implements ActionListener {
 			for (int i = 0; i < queries.length; i++) {
 
 				matchingRows.addAll(
-						getMatchingRow(queries[i].getField(), queries[i].getTerm(), activeTable, queries[i].isExact()));
+						getMatchingRow(queries[i].getField(), queries[i].getTerm(), activeTable, queries[i].getMatchType()));
 			}
 
 		} else {
@@ -379,7 +394,7 @@ public class DualTablePanel extends JPanel implements ActionListener {
 			for (int i = 0; i < queries.length; i++) {
 				java.util.List<Integer> temp = new ArrayList<>();
 				temp.addAll(
-						getMatchingRow(queries[i].getField(), queries[i].getTerm(), activeTable, queries[i].isExact()));
+						getMatchingRow(queries[i].getField(), queries[i].getTerm(), activeTable, queries[i].getMatchType()));
 				tempList.add(temp);
 			}
 
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ListMergePanel.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ListMergePanel.java
index b0517d3..450029f 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ListMergePanel.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ListMergePanel.java
@@ -1,24 +1,16 @@
 package edu.iastate.metnet.metaomgraph.ui;
 
-import edu.iastate.metnet.metaomgraph.MetaOmGraph;
 import edu.iastate.metnet.metaomgraph.MetaOmProject;
-import edu.iastate.metnet.metaomgraph.logging.ActionProperties;
 import edu.iastate.metnet.metaomgraph.utils.Utils;
 
 import java.awt.BorderLayout;
 import java.awt.Dimension;
 import java.awt.Frame;
 import java.awt.event.ActionEvent;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Date;
-import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
-import java.util.Map;
 import java.util.Set;
 import javax.swing.AbstractAction;
 import javax.swing.BoxLayout;
@@ -30,16 +22,12 @@ import javax.swing.JOptionPane;
 import javax.swing.JPanel;
 import javax.swing.JScrollPane;
 import javax.swing.JTextField;
-import javax.swing.JTextPane;
-
-import org.apache.logging.log4j.Logger;
 
 public class ListMergePanel extends JPanel {
 	private MetaOmProject myProject;
 	private JCheckBox[] listBoxes;
 	private JTextField nameField;
 
-
 	public ListMergePanel(MetaOmProject project) {
 		myProject = project;
 		String[] lists = myProject.getGeneListNames();
@@ -73,24 +61,7 @@ public class ListMergePanel extends JPanel {
 		return result.toArray(new Integer[0]);
 	}
 
-	public String[] getSelectedListNames() {
-		ArrayList<String> result = new ArrayList<String>();
-
-		for (int i = 0; i < listBoxes.length; i++) {
-			if (listBoxes[i].isSelected()) {
-				result.add((String)listBoxes[i].getText());
-			}
-		}
-		
-		String [] selListNames = new String [result.size()];
-		
-		for(int j=0;j<result.size();j++) {
-			selListNames[j] = result.get(j);
-		}
-		return selListNames;
-	}
-
-
+	
 
 	public Integer[] getMergedList(boolean intersect) {
 		List<Integer> result = new ArrayList<>();
@@ -101,7 +72,7 @@ public class ListMergePanel extends JPanel {
 		int j = (arrayOfInteger1 = selected).length;
 		for (int i = 0; i < j; i++) {
 			int listNum = arrayOfInteger1[i].intValue();
-
+			
 			//String listName = myProject.getGeneListNames()[listNum];
 			//fix correct name
 			String listName=listBoxes[listNum].getText();
@@ -124,7 +95,7 @@ public class ListMergePanel extends JPanel {
 			Set<Integer> resultSet = new HashSet<Integer>(result);
 			return resultSet.toArray(new Integer[0]);
 		}
-
+		
 		//find intersection of all lists in allRows
 		result=Utils.getListIntersection(allRows);
 		return result.toArray(new Integer[0]);
@@ -148,10 +119,7 @@ public class ListMergePanel extends JPanel {
 		JButton okButton = new JButton(new AbstractAction("OK") {
 			@Override
 			public void actionPerformed(ActionEvent e) {
-				
-				try {
 				Integer[] selected = mergePanel.getSelectedLists();
-				String [] selectedListNames = mergePanel.getSelectedListNames();
 				if (selected.length <= 1) {
 					StringBuilder text = new StringBuilder(selected.length + " list");
 					if (selected.length == 0) {
@@ -167,51 +135,20 @@ public class ListMergePanel extends JPanel {
 					return;
 				}
 				Integer[] merged = mergePanel.getMergedList(intersect.isSelected());
-
+				
 				if(merged.length<1) {
 					JOptionPane.showMessageDialog(null, "No items to put in new list. List can't be created", "List can't be created", JOptionPane.ERROR_MESSAGE);
 					return;
 				}
-
+				
 				int[] intMerged = new int[merged.length];
 				for (int i = 0; i < intMerged.length; i++) {
 					intMerged[i] = merged[i].intValue();
 				}
-				if (mergePanel.myProject.addGeneList(listName, intMerged, true, false)) {
-
-					try {
-						//Harsha - reproducibility log
-						HashMap<String,Object> actionMap = new HashMap<String,Object>();
-						actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-						actionMap.put("section", "Feature Metadata");
-
-						HashMap<String,Object> dataMap = new HashMap<String,Object>();
-						dataMap.put("Merged List Name", listName);
-						dataMap.put("Lists Merged", selectedListNames);
-						dataMap.put("List Elements Count", intMerged.length);
-						Map<Integer,String> selectedItems = new HashMap<Integer,String>();
-
-						for(int rowNum: intMerged) {
-							selectedItems.put(rowNum, mergePanel.myProject.getDefaultRowNames(rowNum));
-						}
-						dataMap.put("Selected Rows", selectedItems);
-						HashMap<String,Object> resultLog = new HashMap<String,Object>();
-						resultLog.put("result", "OK");
-
-						ActionProperties mergeListAction = new ActionProperties("merge-lists",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-						mergeListAction.logActionProperties();
-					}
-					catch(Exception e1) {
-
-					}
-
+				if (mergePanel.myProject.addGeneList(listName, intMerged, true)) {
 					dialog.dispose();
 				}
 
-				}
-				catch(Exception ee) {
-					
-				}
 			}
 		});
 		JButton cancelButton = new JButton(new AbstractAction("Cancel") {
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetaOmTablePanel.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetaOmTablePanel.java
index 5a60e2a..7779caa 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetaOmTablePanel.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetaOmTablePanel.java
@@ -10,7 +10,6 @@ import edu.iastate.metnet.metaomgraph.chart.HistogramChart;
 import edu.iastate.metnet.metaomgraph.chart.MakeChartWithR;
 import edu.iastate.metnet.metaomgraph.chart.MetaOmChartPanel;
 import edu.iastate.metnet.metaomgraph.chart.ScatterPlotChart;
-import edu.iastate.metnet.metaomgraph.logging.ActionProperties;
 import edu.iastate.metnet.metaomgraph.throbber.MetaOmThrobber;
 import edu.iastate.metnet.metaomgraph.throbber.MultiFrameImageThrobber;
 import edu.iastate.metnet.metaomgraph.throbber.Throbber;
@@ -35,7 +34,6 @@ import javax.swing.tree.DefaultTreeModel;
 import javax.swing.tree.TreeNode;
 import javax.swing.tree.TreePath;
 
-import org.apache.commons.math3.random.RandomDataGenerator;
 
 import java.awt.*;
 import java.awt.event.*;
@@ -46,14 +44,11 @@ import java.io.FileWriter;
 import java.io.IOException;
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.text.SimpleDateFormat;
 import java.util.*;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
 public class MetaOmTablePanel extends JPanel implements ActionListener, ListSelectionListener, ChangeListener {
 
@@ -87,13 +82,12 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 	public static final String GRAPH_BOXPLOT_COMMAND = "make boxplot";
 	public static final String GRAPH_BOXPLOT_COLS_COMMAND = "col boxplot";
 	public static final String MAKE_HISTOGRAM_COMMAND = "create histogram";
-
 	// private static int _N = MetaOmGraph.getNumPermutations();
 	// private static int _T = MetaOmGraph.getNumThreads();
 	private JButton reportButton;
 	private JButton listFromFilterButton;
 	// urmi
-	private JButton saveMainTableButton;
+	private MenuButton saveMainTableButton;
 	private MenuButton plotButton;
 	private JMenuItem plotListItem;
 
@@ -139,8 +133,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 	private JMenuItem weightedEuclideanItem;
 	private JMenuItem weightedManhattanItem;
 	private JMenuItem saveCorrelationItem;
-
-
 	// urmi
 	private JMenuItem diffCorrelation;
 	private JMenuItem diffCorrelationWizard;
@@ -188,9 +180,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 
 	JMenu plotRMenu;
 
-	//Harsha
-	private String previousListItemSelected="";
-
 	public MetaOmTablePanel(MetaOmProject project) {
 		myProject = project;
 		setLayout(new BorderLayout());
@@ -542,9 +531,21 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 		dataToolbar.add(analyzeMenuButton);
 
 		dataToolbar.add(new Separator());
-		saveMainTableButton = new JButton(theme.getExcel());
-		saveMainTableButton.setActionCommand("savemaintab");
-		saveMainTableButton.addActionListener(this);
+		
+		saveMainTableButton = new MenuButton(theme.getExcel(), null);
+		saveMainTableButton.setToolTipText("Export table to txt or excel file");
+			
+		JPopupMenu exportMenu = new JPopupMenu();
+		JMenuItem exportToTextItem = new JMenuItem("Export to text file");
+		exportToTextItem.setActionCommand("ExportToText");
+		exportToTextItem.addActionListener(this);
+		exportMenu.add(exportToTextItem);
+		JMenuItem exportToExcelItem = new JMenuItem("Export to excel workbook");
+		exportToExcelItem.setActionCommand("ExportToExcel");
+		exportToExcelItem.addActionListener(this);
+		exportMenu.add(exportToExcelItem);
+		
+		saveMainTableButton.setMenu(exportMenu);
 		dataToolbar.add(saveMainTableButton);
 
 		reportButton = new JButton("Finding samples", theme.getReport());
@@ -733,7 +734,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 	}
 
 	public void selectList(String listName) {
-
 		geneLists.setSelectedValue(listName, true);
 	}
 
@@ -779,7 +779,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 
 	@Override
 	public void valueChanged(ListSelectionEvent event) {
-
 		int[] oldWidths = new int[listDisplay.getColumnCount()];
 		for (int x = 0; x < oldWidths.length; x++)
 			oldWidths[x] = listDisplay.getColumnModel().getColumn(x).getPreferredWidth();
@@ -820,29 +819,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 			listRenameButton.setEnabled(false);
 		}
 		getTable().requestFocus();
-
-		try {
-		HashMap<String,Object> actionMap = new HashMap<String,Object>();
-		actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-		HashMap<String,Object> dataMap = new HashMap<String,Object>();
-		String selList = geneLists.getSelectedValue().toString();
-		dataMap.put("selectedList", selList);
-		dataMap.put("numElementsInList", myProject.getGeneListRowNumbers(selList).length);
-
-		HashMap<String,Object> result = new HashMap<String,Object>();
-		result.put("result", "OK");
-
-		ActionProperties listSelectAction = new ActionProperties("select-list",actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-		if(previousListItemSelected != selList ) {
-			previousListItemSelected = selList;
-			//listSelectAction.logActionProperties();
-		}
-		}
-		catch(Exception e) {
-			
-		}
-
 	}
 
 	/**
@@ -851,9 +827,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 	 * @throws IOException
 	 */
 	public void launchEnsembl(String db) throws URISyntaxException, IOException {
-
-		HashMap<String,Object> dataMap = new HashMap<String,Object>();
-		String cmd = "launch-ensembl";
 		int[] selected = listDisplay.getSelectedRows();
 		if (selected.length >= 10) {
 			int dialogButton = JOptionPane.YES_NO_OPTION;
@@ -865,37 +838,19 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 			}
 		}
 		URI ns = null;
-		String urls = "";
-		String genes = "";
 		for (int i = 0; i < selected.length; i++) {
 			String selectedID = listDisplay.getValueAt(selected[i], myProject.getDefaultColumn()) + "";
 			// check if this id is transcript or gene
 			if (db == "all") {
 				ns = new URI("https://www.ensembl.org/Multi/Search/Results?q=" + selectedID + ";site=ensembl_all");
 			} else if (db == "plants") {
-				cmd = "launch-ensembl-plants";
 				ns = new URI("https://plants.ensembl.org/Multi/Search/Results?species=all;idx=;q=" + selectedID
 						+ ";site=ensemblunit");
 			}
 			java.awt.Desktop.getDesktop().browse(ns);
 
-			urls += ns.toASCIIString()+",";
-			genes += selectedID+";";
 		}
 
-		//Harsha - reproducibility log
-		HashMap<String,Object> actionMap = new HashMap<String,Object>();
-		actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-
-		dataMap.put("URLS",urls);
-		dataMap.put("geneList", genes);
-		HashMap<String,Object> resultLog = new HashMap<String,Object>();
-		resultLog.put("result", "OK");
-
-		ActionProperties launchEnsembl = new ActionProperties(cmd,actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-		launchEnsembl.logActionProperties();
-
 	}
 
 	/**
@@ -904,9 +859,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 	 * @throws IOException
 	 */
 	public void launchRefSeq() throws URISyntaxException, IOException {
-
-		HashMap<String,Object> dataMap = new HashMap<String,Object>();
-
 		int[] selected = listDisplay.getSelectedRows();
 		if (selected.length >= 10) {
 			int dialogButton = JOptionPane.YES_NO_OPTION;
@@ -918,9 +870,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 			}
 		}
 		URI ns = null;
-		String urls = "";
-		String genes = "";
-
 		for (int i = 0; i < selected.length; i++) {
 			String selectedID = listDisplay.getValueAt(selected[i], myProject.getDefaultColumn()) + "";
 			if (selectedID.contains(".")) {
@@ -933,30 +882,11 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 					"https://www.ncbi.nlm.nih.gov/nuccore/?term=" + selectedID + "[Text+Word]+AND+srcdb_refseq[PROP]");
 			java.awt.Desktop.getDesktop().browse(ns);
 
-			urls += ns.toASCIIString()+",";
-			genes += selectedID+";";
-
 		}
 
-		//Harsha - reproducibility log
-		HashMap<String,Object> actionMap = new HashMap<String,Object>();
-		actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-
-		dataMap.put("URLS",urls);
-		dataMap.put("geneList", genes);
-		HashMap<String,Object> resultLog = new HashMap<String,Object>();
-		resultLog.put("result", "OK");
-
-		ActionProperties launchRefSeqAction = new ActionProperties("launch-ref-seq",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-		launchRefSeqAction.logActionProperties();
-
 	}
 
 	public void launchGeneCards() throws URISyntaxException, IOException {
-
-		HashMap<String,Object> dataMap = new HashMap<String,Object>();
-
 		int[] selected = listDisplay.getSelectedRows();
 		if (selected.length >= 10) {
 			int dialogButton = JOptionPane.YES_NO_OPTION;
@@ -968,8 +898,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 			}
 		}
 		URI ns = null;
-		String urls = "";
-		String genes = "";
 		for (int i = 0; i < selected.length; i++) {
 			String selectedID = listDisplay.getValueAt(selected[i], myProject.getDefaultColumn()) + "";
 			if (selectedID.contains(".")) {
@@ -980,44 +908,27 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 			// check if this id is transcript or gene
 			ns = new URI("https://www.genecards.org/Search/Keyword?queryString=" + selectedID);
 			java.awt.Desktop.getDesktop().browse(ns);
-			urls += ns.toASCIIString()+",";
-			genes += selectedID+";";
-		}
-
 
-		//Harsha - reproducibility log
-		HashMap<String,Object> actionMap = new HashMap<String,Object>();
-		actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-
-		dataMap.put("URLS",urls);
-		dataMap.put("geneList", genes);
-		HashMap<String,Object> resultLog = new HashMap<String,Object>();
-		resultLog.put("result", "OK");
-
-		ActionProperties launchGeneCardsAction = new ActionProperties("launch-gene-cards",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-		launchGeneCardsAction.logActionProperties();
+		}
 
 	}
 
 	public void launchAtGeneSearch() {
 
-		callExternalSite("http://metnetweb.gdcb.iastate.edu/AtGeneSearch/index.php?genelist=", "","launch-at-gene-search");
+		callExternalSite("http://metnetweb.gdcb.iastate.edu/AtGeneSearch/index.php?genelist=", "");
 	}
 
 	public void launchAraportThaleMine() {
 
-		callExternalSite("http://www.araport.org/locus/", "","launch-araport-thalemine");
+		callExternalSite("http://www.araport.org/locus/", "");
 	}
 
 	public void launchAraportJbrowse() {
 
-		callExternalSite("http://www.araport.org/locus/", "browse","launch-araport-jbrowse");
+		callExternalSite("http://www.araport.org/locus/", "browse");
 	}
 
-	private void callExternalSite(String url, String option, String site) {
-
-
+	private void callExternalSite(String url, String option) {
 		int[] selected = listDisplay.getSelectedRows();
 		String geneList = "";
 		boolean found = false;
@@ -1031,41 +942,19 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 			}
 		}
 
-		//Harsha - reproducibility log
-		HashMap<String,Object> actionMap = new HashMap<String,Object>();
-		actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-		HashMap<String,Object> dataMap = new HashMap<String,Object>();
-		dataMap.put("geneList", geneList);
-		HashMap<String,Object> resultLog = new HashMap<String,Object>();
-
-		
 		// JOptionPane.showMessageDialog(null, "this gene:"+geneList);
 		if (geneList.equals("")) {
 			JOptionPane.showMessageDialog(getParent(), "Unable to find any locus IDs in the selected rows", "Error", 0);
-			resultLog.put("result", "Error");
-			resultLog.put("resultComments", "Unable to find any locus IDs in the selected rows");
-			ActionProperties launchExternalSiteAction = new ActionProperties(site,actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			launchExternalSiteAction.logActionProperties();
 			return;
 		}
 
 		String urlString = url + geneList;
 		if (option != "")
 			urlString = url + geneList + "/" + option;
-
-		
-		dataMap.put("URLS",urlString);
-		
 		try {
 			Class.forName("java.awt.Desktop");
 			Desktop.getDesktop().browse(new URI(urlString));
 			System.out.println("Launched a browser using Desktop");
-
-
-			resultLog.put("result", "OK");
-			ActionProperties launchExternalSiteAction = new ActionProperties(site,actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			launchExternalSiteAction.logActionProperties();
-
 		} catch (Exception e) {
 			try {
 				BrowserLauncher launcher = new BrowserLauncher(null);
@@ -1074,17 +963,8 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 				BrowserLauncherRunner runner = new BrowserLauncherRunner(launcher, urlString, errorHandler);
 				Thread launcherThread = new Thread(runner);
 				launcherThread.start();
-
-				resultLog.put("result", "OK");
-				ActionProperties launchExternalSiteAction = new ActionProperties(site,actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				launchExternalSiteAction.logActionProperties();
-
 			} catch (Exception e2) {
 				JOptionPane.showMessageDialog(getParent(), "Unable to launch web browser", "Error", 0);
-				resultLog.put("result", "Error");
-				resultLog.put("resultComments", "Unable to launch web browser");
-				ActionProperties launchExternalSiteAction = new ActionProperties(site,actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				launchExternalSiteAction.logActionProperties();
 				e2.printStackTrace();
 			}
 		}
@@ -1102,36 +982,16 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 				}
 			}
 		}
-		
-		//Harsha - reproducibility log
-		HashMap<String,Object> actionMap = new HashMap<String,Object>();
-		actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-		HashMap<String,Object> dataMap = new HashMap<String,Object>();
-		dataMap.put("geneList", geneList);
-		HashMap<String,Object> resultLog = new HashMap<String,Object>();
-		
 		if (geneList.equals("")) {
 			JOptionPane.showMessageDialog(getParent(), "Unable to find any locus IDs in the selected rows", "Error", 0);
-			
-			resultLog.put("result", "Error");
-			resultLog.put("resultComments", "Unable to find any locus IDs in the selected rows");
-			ActionProperties launchTairAction = new ActionProperties("launch-tair",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			launchTairAction.logActionProperties();
 			return;
 		}
 		String urlString = "http://www.arabidopsis.org/servlets/Search?type=general&name=" + geneList
 				+ "&action=detail&method=4&sub_type=gene";
-
-		
-		dataMap.put("URLS",urlString);
-		
 		try {
 			Class.forName("java.awt.Desktop");
 			Desktop.getDesktop().browse(new URI(urlString));
 			System.out.println("Launched a browser using Desktop");
-			resultLog.put("result", "OK");
-			ActionProperties launchTairAction = new ActionProperties("launch-tair",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			launchTairAction.logActionProperties();
 		} catch (Exception e) {
 			try {
 				BrowserLauncher launcher = new BrowserLauncher(null);
@@ -1140,15 +1000,8 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 				BrowserLauncherRunner runner = new BrowserLauncherRunner(launcher, urlString, errorHandler);
 				Thread launcherThread = new Thread(runner);
 				launcherThread.start();
-				resultLog.put("result", "OK");
-				ActionProperties launchTairAction = new ActionProperties("launch-tair",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				launchTairAction.logActionProperties();
 			} catch (Exception e2) {
 				JOptionPane.showMessageDialog(getParent(), "Unable to launch web browser", "Error", 0);
-				resultLog.put("result", "Error");
-				resultLog.put("resultComments", "Unable to launch web browser");
-				ActionProperties launchTairAction = new ActionProperties("launch-tair",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				launchTairAction.logActionProperties();
 				e2.printStackTrace();
 			}
 		}
@@ -1199,199 +1052,19 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 	}
 
 	public void graphSelectedRows() {
-
-		HashMap<String,Object> actionMap = new HashMap<String,Object>();
-		HashMap<String,Object> dataMap = new HashMap<String,Object>();
-		HashMap<String,Object> result = new HashMap<String,Object>();
-		
-		try {
-		actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-		actionMap.put("section", "Feature Metadata");
-		
-		String selList = geneLists.getSelectedValue().toString();
-		dataMap.put("Selected List", selList);
-		dataMap.put("Selected Features", getSelectedGeneNames());
-		dataMap.put("Data Transformation", MetaOmGraph.getInstance().getTransform());
-		dataMap.put("Default XAxis", myProject.getDefaultXAxis());
-		dataMap.put("Default YAxis", myProject.getDefaultYAxis());
-		dataMap.put("Default Chart Title", myProject.getDefaultTitle());
-		dataMap.put("Color 1", myProject.getColor1());
-		dataMap.put("Color 2", myProject.getColor2());
-		
-		result.put("result", "OK");
-		result.put("userComments", "");
-
-		ActionProperties lineChartAction = new ActionProperties("line-chart",actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-		lineChartAction.logActionProperties();
-		}
-		catch(Exception e1) {
-			
-		}
-
 		new MetaOmChartPanel(getSelectedRowsInList(), myProject.getDefaultXAxis(), myProject.getDefaultYAxis(),
 				myProject.getDefaultTitle(), myProject.getColor1(), myProject.getColor2(), myProject)
-		.createInternalFrame();
+						.createInternalFrame();
 	}
 
-
-	//Playback method
-	public void graphSelectedRows(int [] selectedRows) {
-
-		new MetaOmChartPanel(selectedRows, myProject.getDefaultXAxis(), myProject.getDefaultYAxis(),
-				myProject.getDefaultTitle(), myProject.getColor1(), myProject.getColor2(), myProject)
-		.createInternalFrame(true);
-	}
-	
-	public void createHistogram() {
-		
-		HashMap<String,Object> result= new HashMap<String,Object>();
-		HashMap<String,Object> actionMap = new HashMap<String,Object>();
-		HashMap<String,Object> dataMap = new HashMap<String,Object>();
-		try {
-		actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-		String selList = geneLists.getSelectedValue().toString();
-		dataMap.put("Selected List", selList);
-		dataMap.put("Selected Features", getSelectedGeneNames());
-		dataMap.put("Data Transformation", MetaOmGraph.getInstance().getTransform());
-		dataMap.put("Default XAxis", myProject.getDefaultXAxis());
-		dataMap.put("Default YAxis", myProject.getDefaultYAxis());
-		dataMap.put("Default Chart Title", myProject.getDefaultTitle());
-		dataMap.put("Color 1", myProject.getColor1());
-		dataMap.put("Color 2", myProject.getColor2());
-		
-		
-		result.put("result", "OK");
-		result.put("userComments","");
-		}
-		catch(Exception e) {
-			
-		}
-		ActionProperties histogramAction = new ActionProperties("histogram",actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-
-		
-
-		EventQueue.invokeLater(new Runnable() {
-			@Override
-			public void run() {
-				try {// get data for selected rows
-					int[] selected = getSelectedRowsInList();
-					// number of bins
-					int nBins = myProject.getIncludedDataColumnCount() / 10;
-					HistogramChart f = new HistogramChart(selected, nBins, myProject, 1, null);
-					MetaOmGraph.getDesktop().add(f);
-					f.setDefaultCloseOperation(2);
-					f.setClosable(true);
-					f.setResizable(true);
-					f.pack();
-					f.setSize(1000, 700);
-					f.setVisible(true);
-					f.toFront();
-
-				} catch (Exception e) {
-					JOptionPane.showMessageDialog(null, "Error occured while reading data!!!", "Error",
-							JOptionPane.ERROR_MESSAGE);
-					result.put("result","Error");
-					result.put("resultComments", "Error occured while reading data!!!");
-					result.put("userComments", "");
-					histogramAction.logActionProperties();
-					e.printStackTrace();
-					return;
-				}
-			}
-		});
-		
-		try {
-		histogramAction.logActionProperties();
-		}
-		catch(Exception e) {
-			
-		}
-		return;
-		
-	}
-	
-	
-	//Playback method
-	public void createHistogram(int[] selected) {
-		
-		EventQueue.invokeLater(new Runnable() {
-			@Override
-			public void run() {
-				try {
-					// number of bins
-					int nBins = myProject.getIncludedDataColumnCount() / 10;
-					HistogramChart f = new HistogramChart(selected, nBins, myProject, 1, null);
-					MetaOmGraph.getDesktop().add(f);
-					f.setDefaultCloseOperation(2);
-					f.setClosable(true);
-					f.setResizable(true);
-					f.pack();
-					f.setSize(1000, 700);
-					f.setVisible(true);
-					f.toFront();
-
-				} catch (Exception e) {
-					JOptionPane.showMessageDialog(null, "Error occured while reading data!!!", "Error",
-							JOptionPane.ERROR_MESSAGE);
-					e.printStackTrace();
-					return;
-				}
-			}
-		});
-		
-		return;
-		
-	}
-
-
 	public void makeBoxPlot() {
 		int[] selected = getSelectedRowsInList();
-
-		HashMap<String,Object> actionMap = new HashMap<String,Object>();
-		HashMap<String,Object> dataMap = new HashMap<String,Object>();
-		HashMap<String,Object> result = new HashMap<String,Object>();
-
-		try {
-		actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-		actionMap.put("section", "Feature Metadata");
-		
-		String selList = geneLists.getSelectedValue().toString();
-		dataMap.put("Selected List", selList);
-		dataMap.put("Selected Features", getSelectedGeneNames());
-		dataMap.put("Data Transformation", MetaOmGraph.getInstance().getTransform());
-		dataMap.put("Default XAxis", myProject.getDefaultXAxis());
-		dataMap.put("Default YAxis", myProject.getDefaultYAxis());
-		dataMap.put("Default Chart Title", myProject.getDefaultTitle());
-		dataMap.put("Color 1", myProject.getColor1());
-		dataMap.put("Color 2", myProject.getColor2());
-		
-		
-		result.put("result", "OK");
-		result.put("userComments", "");
-		}
-		catch(Exception e1) {
-			
-		}
-
-		ActionProperties boxPlotAction = new ActionProperties("box-plot",actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-
 		if (selected.length < 1) {
 			JOptionPane.showMessageDialog(null, "Please select one or more rows and try again.",
 					"Invalid number of rows selected", JOptionPane.ERROR_MESSAGE);
-			try {
-			result.put("result", "Error");
-			result.put("resultComments", "Invalid number of rows selected.Please select one or more rows and try again.");
-			result.put("userComments", "");
-			boxPlotAction.logActionProperties();
-			}
-			catch(Exception e1) {
-				
-			}
 			return;
 		}
 
-
 		// get data for box plot as hasmap
 		HashMap<Integer, double[]> plotData = new HashMap<>();
 		for (int i = 0; i < selected.length; i++) {
@@ -1426,70 +1099,7 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 				} catch (Exception e) {
 					JOptionPane.showMessageDialog(null, "Error occured while reading data!!!", "Error",
 							JOptionPane.ERROR_MESSAGE);
-					result.put("result","Error");
-					result.put("resultComments", "Error occured while reading data!!!");
-					result.put("userComments","");
-					e.printStackTrace();
-					return;
-				}
-			}
-		});
-
-		try {
-		boxPlotAction.logActionProperties();
-		}
-		catch(Exception e1) {
-			
-		}
-
-		return;
-	}
-	
-	
-//Playback method
-	public void makeBoxPlot(int[] selected) {
-		
-		if (selected.length < 1) {
-			JOptionPane.showMessageDialog(null, "Please select one or more rows and try again.",
-					"Invalid number of rows selected", JOptionPane.ERROR_MESSAGE);
-			return;
-		}
-
-
-		// get data for box plot as hasmap
-		HashMap<Integer, double[]> plotData = new HashMap<>();
-		for (int i = 0; i < selected.length; i++) {
-			double[] dataY = null;
-			try {
-				// dataY = myProject.getIncludedData(selected[i]);
-				// send all data; excluded data will be excluded in the boxplot class; this
-				// helps in splitting data by categories by reusing cluster function
-				dataY = myProject.getAllData(selected[i]);
-			} catch (IOException e) {
-				// TODO Auto-generated catch block
-				e.printStackTrace();
-			}
-			plotData.put(selected[i], dataY);
-		}
 
-		EventQueue.invokeLater(new Runnable() {
-			@Override
-			public void run() {
-				try {// get data for selected rows
-
-					BoxPlot f = new BoxPlot(plotData, 0, myProject);
-					MetaOmGraph.getDesktop().add(f);
-					f.setDefaultCloseOperation(2);
-					f.setClosable(true);
-					f.setResizable(true);
-					f.pack();
-					f.setSize(1000, 700);
-					f.setVisible(true);
-					f.toFront();
-
-				} catch (Exception e) {
-					JOptionPane.showMessageDialog(null, "Error occured while reading data!!!", "Error",
-							JOptionPane.ERROR_MESSAGE);
 					e.printStackTrace();
 					return;
 				}
@@ -1498,53 +1108,12 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 
 		return;
 	}
-	
-	
-	
 
 	public void graphPairs() {
 		int[] selected = getSelectedRowsInList();
-
-		HashMap<String,Object> actionMap = new HashMap<String,Object>();
-		HashMap<String,Object> dataMap = new HashMap<String,Object>();
-		HashMap<String,Object> result = new HashMap<String,Object>();
-		
-		try {
-		actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-		actionMap.put("section", "Feature Metadata");
-		
-		String selList = geneLists.getSelectedValue().toString();
-		dataMap.put("Selected List", selList);
-		dataMap.put("Selected Features", getSelectedGeneNames());
-		dataMap.put("Data Transformation", MetaOmGraph.getInstance().getTransform());
-		dataMap.put("Default XAxis", myProject.getDefaultXAxis());
-		dataMap.put("Default YAxis", myProject.getDefaultYAxis());
-		dataMap.put("Default Chart Title", myProject.getDefaultTitle());
-		dataMap.put("Color 1", myProject.getColor1());
-		dataMap.put("Color 2", myProject.getColor2());
-		
-		
-		result.put("result", "OK");
-		result.put("userComments", "");
-		}
-		catch(Exception e1) {
-			
-		}
-		ActionProperties scatterPlotAction = new ActionProperties("scatter-plot",actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-
-
 		if (selected.length < 2) {
 			JOptionPane.showMessageDialog(null, "Please select two or more rows and try again to plot a scatterplot.",
 					"Invalid number of rows selected", JOptionPane.ERROR_MESSAGE);
-
-			try {
-			result.put("result","Error");
-			result.put("resultComments","Invalid number of rows selected.Please select two or more rows and try again to plot a scatterplot.");
-			scatterPlotAction.logActionProperties();
-			}
-			catch(Exception e1) {
-				
-			}
 			return;
 		}
 
@@ -1567,59 +1136,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 					JOptionPane.showMessageDialog(null, "Error occured while reading data!!!", "Error",
 							JOptionPane.ERROR_MESSAGE);
 
-					try {
-					result.put("result","Error");
-					result.put("resultComments", "Error occured while reading data!!!");
-					}
-					catch(Exception e1) {
-						
-					}
-					e.printStackTrace();
-					return;
-				}
-			}
-		});
-
-		try {
-		scatterPlotAction.logActionProperties();
-		}
-		catch(Exception e1) {
-			
-		}
-
-		return;
-	}
-	
-	
-	
-	//Playback method
-	public void graphPairs(int[] selected) {
-	
-
-		if (selected.length < 2) {
-			JOptionPane.showMessageDialog(null, "Please select two or more rows and try again to plot a scatterplot.",
-					"Invalid number of rows selected", JOptionPane.ERROR_MESSAGE);
-			return;
-		}
-
-		EventQueue.invokeLater(new Runnable() {
-			@Override
-			public void run() {
-				try {// get data for selected rows
-
-					ScatterPlotChart f = new ScatterPlotChart(selected, 0, myProject);
-					MetaOmGraph.getDesktop().add(f);
-					f.setDefaultCloseOperation(2);
-					f.setClosable(true);
-					f.setResizable(true);
-					f.pack();
-					f.setSize(1000, 700);
-					f.setVisible(true);
-					f.toFront();
-
-				} catch (Exception e) {
-					JOptionPane.showMessageDialog(null, "Error occured while reading data!!!", "Error",
-							JOptionPane.ERROR_MESSAGE);
 					e.printStackTrace();
 					return;
 				}
@@ -1628,63 +1144,20 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 
 		return;
 	}
-	
 
 	public void graphSelectedList() {
 		int[] selected = myProject.getGeneListRowNumbers((String) geneLists.getSelectedValue());
 		new MetaOmChartPanel(selected, myProject.getDefaultXAxis(), myProject.getDefaultYAxis(),
 				myProject.getDefaultTitle(), myProject.getColor1(), myProject.getColor2(), myProject)
-		.createInternalFrame();
-
-		HashMap<String,Object> actionMap = new HashMap<String,Object>();
-		HashMap<String,Object> dataMap = new HashMap<String,Object>();
-		HashMap<String,Object> result = new HashMap<String,Object>();
-		
-		try {
-		actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-		actionMap.put("section", "Feature Metadata");
-		
-		dataMap.put("Selected Features", "Entire");
-		dataMap.put("Data Transformation", MetaOmGraph.getInstance().getTransform());
-		dataMap.put("Default XAxis", myProject.getDefaultXAxis());
-		dataMap.put("Default YAxis", myProject.getDefaultYAxis());
-		dataMap.put("Default Chart Title", myProject.getDefaultTitle());
-		dataMap.put("Color 1", myProject.getColor1());
-		dataMap.put("Color 2", myProject.getColor2());
-		
-		result.put("result", "OK");
-
-		ActionProperties entireDataGraphAction = new ActionProperties("entire-data-graph",actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-		entireDataGraphAction.logActionProperties();
-		}
-		catch(Exception e2) {
-			
-		}
+						.createInternalFrame();
 	}
 
 	public void graphFilteredList() {
 		int[] trueRows = getAllTrueRows();
-
-		HashMap<String,Object> actionMap = new HashMap<String,Object>();
-		actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-		actionMap.put("section", "All");
-		
-		HashMap<String,Object> dataMap = new HashMap<String,Object>();
-
-		HashMap<String,Object> result = new HashMap<String,Object>();
-		result.put("result", "OK");
-
-		dataMap.put("filtered-graph-type", "general");
-
 		if (geneLists.getSelectedValue().equals("Complete List")) {
 			new MetaOmChartPanel(trueRows, myProject.getDefaultXAxis(), myProject.getDefaultYAxis(),
 					myProject.getDefaultTitle(), myProject.getColor1(), myProject.getColor2(), myProject)
-			.createInternalFrame();
-
-			dataMap.put("selectedRows", trueRows);
-			actionMap.put("filtered-graph-type", "complete");
-
-
+							.createInternalFrame();
 		} else {
 			int[] entries = myProject.getGeneListRowNumbers((String) geneLists.getSelectedValue());
 			int[] selected = new int[listDisplay.getSelectedRowCount()];
@@ -1694,14 +1167,8 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 
 			new MetaOmChartPanel(selected, myProject.getDefaultXAxis(), myProject.getDefaultYAxis(),
 					myProject.getDefaultTitle(), myProject.getColor1(), myProject.getColor2(), myProject)
-			.createInternalFrame();
-
-			dataMap.put("selectedRows", selected);
+							.createInternalFrame();
 		}
-
-		ActionProperties filteredGraphAction = new ActionProperties("filtered-graph",actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-
-		filteredGraphAction.logActionProperties();
 	}
 
 	public void deleteSelectedList() {
@@ -1716,26 +1183,12 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 	public String getSelectedGeneName() {
 		if (listDisplay.getSelectedRow() != -1) {
 			return myProject.getRowNames()[myProject
-			                               .getGeneListRowNumbers(geneLists.getSelectedValue().toString())[getTrueSelectedRow()]][myProject
-			                                                                                                                      .getDefaultColumn()].toString();
+					.getGeneListRowNumbers(geneLists.getSelectedValue().toString())[getTrueSelectedRow()]][myProject
+							.getDefaultColumn()].toString();
 		}
 		return null;
 	}
 
-	public Map<Integer,String> getSelectedGeneNames() {
-
-		int [] rowIndices = getSelectedRowsInList();
-		HashMap<Integer,String> geneNames = new HashMap<Integer,String>();
-
-		for(int geneNum = 0; geneNum < rowIndices.length; geneNum++) {
-			geneNames.put(rowIndices[geneNum],myProject.getRowNames()[rowIndices[geneNum]][myProject
-			                                                                               .getDefaultColumn()].toString());
-		}
-		return geneNames;
-		//return listDisplay.getSelectedRows();
-
-	}
-
 	public int getSelectedGeneIndex() {
 		String activeList = geneLists.getSelectedValue().toString();
 		int selectedRow = sorter.modelIndex(listDisplay.getSelectedRow());
@@ -1922,7 +1375,7 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 		if ("delete list".equals(e.getActionCommand())) {
 			int result = JOptionPane.showConfirmDialog(MetaOmGraph.getMainWindow(),
 					"Are you sure you want to delete the selected lists '" + geneLists.getSelectedValue().toString()
-					+ "'?",
+							+ "'?",
 					"Confirm", 0, 3);
 			if (result == 0)
 				deleteSelectedList();
@@ -2004,52 +1457,9 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 		 *         under same parent
 		 */
 		if ("plot reps".equals(e.getActionCommand())) {
-
-			//Harsha - reproducibility log
-
-			HashMap<String,Object> actionMap = new HashMap<String,Object>();
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-			HashMap<String,Object> resultLog = new HashMap<String,Object>();
-			
-			try {
-			actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-			actionMap.put("section","Feature Metadata");
-			
-			String selList = geneLists.getSelectedValue().toString();
-			dataMap.put("Selected List", selList);
-			dataMap.put("Selected Features", getSelectedGeneNames());
-			dataMap.put("Data Transformation", MetaOmGraph.getInstance().getTransform());
-			dataMap.put("Default XAxis", myProject.getDefaultXAxis());
-			dataMap.put("Default YAxis", myProject.getDefaultYAxis());
-			dataMap.put("Default Chart Title", myProject.getDefaultTitle());
-			dataMap.put("Color 1", myProject.getColor1());
-			dataMap.put("Color 2", myProject.getColor2());
-
-			
-			resultLog.put("result", "OK");
-			resultLog.put("userComments", "");
-			}
-			catch(Exception e2) {
-				
-			}
-			ActionProperties defaultGroupingAction = new ActionProperties("line-chart-default-grouping",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-
-
 			// if no reps find reps
 			if (myProject.getMetadataHybrid() == null) {
 				JOptionPane.showMessageDialog(MetaOmGraph.getMainWindow(), "No data to calculate rep information...");
-				
-				try {
-				dataMap.put("groupingAttribute", "default");
-				resultLog.put("result", "Error");
-				resultLog.put("resultComments", "No data to calculate rep information...");
-				resultLog.put("userComments", "");
-
-				defaultGroupingAction.logActionProperties();
-				}
-				catch(Exception e1) {
-					
-				}
 				return;
 			}
 			// plot reps
@@ -2072,17 +1482,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 				groupNames = result.getGroupnames();
 				if (sampleNames.length == 0) {
 					JOptionPane.showMessageDialog(this, "There are no sample names!");
-
-					try {
-					dataMap.put("groupingAttribute", "default");
-					resultLog.put("result", "Error");
-					resultLog.put("resultComments", "There are no sample names!");
-					resultLog.put("userComments", "");
-					defaultGroupingAction.logActionProperties();
-					}
-					catch(Exception e1) {
-						
-					}
 					return;
 				}
 			}
@@ -2092,63 +1491,13 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 					myProject.getDefaultTitle(), myProject.getColor1(), myProject.getColor2(), myProject, myVals,
 					myStddevs, repCounts, groupNames, sampleNames, true, repsMapDefault);
 			ob.createInternalFrame();
-
-			try {
-			dataMap.put("groupingAttribute", "default");
-			defaultGroupingAction.logActionProperties();
-			}
-			catch(Exception e2) {
-				
-			}
 			return;
 		}
 
 		if ("choose reps".equals(e.getActionCommand())) {
-
-			//Harsha - reproducibility log
-
-			HashMap<String,Object> actionMap = new HashMap<String,Object>();
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-			HashMap<String,Object> resultLog = new HashMap<String,Object>();
-			
-			try {
-			actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-			actionMap.put("section", "Feature Metadata");
-			
-			String selList = geneLists.getSelectedValue().toString();
-			dataMap.put("Selected List", selList);
-			dataMap.put("Selected Features", getSelectedGeneNames());
-			dataMap.put("Data Transformation", MetaOmGraph.getInstance().getTransform());
-			dataMap.put("Default XAxis", myProject.getDefaultXAxis());
-			dataMap.put("Default YAxis", myProject.getDefaultYAxis());
-			dataMap.put("Default Chart Title", myProject.getDefaultTitle());
-			dataMap.put("Color 1", myProject.getColor1());
-			dataMap.put("Color 2", myProject.getColor2());
-			
-			
-			resultLog.put("result", "OK");
-			resultLog.put("userComments", "");
-			}
-			catch(Exception e1) {
-				
-			}
-			ActionProperties chooseGroupingAction = new ActionProperties("line-chart-choose-grouping",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-
-
 			// if no reps find reps
 			if (myProject.getMetadataHybrid() == null) {
 				JOptionPane.showMessageDialog(MetaOmGraph.getMainWindow(), "No data to calculate rep information...");
-
-				try {
-				dataMap.put("groupingAttribute", null);
-				resultLog.put("result", "Error");
-				resultLog.put("resultComments", "No data to calculate rep information...");
-				resultLog.put("userComments", "");
-				chooseGroupingAction.logActionProperties();
-				}
-				catch(Exception e2) {
-					
-				}
 				return;
 			}
 
@@ -2183,18 +1532,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 				groupNames = result.getGroupnames();
 				if (sampleNames.length == 0) {
 					JOptionPane.showMessageDialog(this, "There are no sample names!");
-
-					try {
-					dataMap.put("groupingAttribute", input);
-					resultLog.put("result", "Error");
-					resultLog.put("resultComments", "There are no sample names!");
-					resultLog.put("userComments", "");
-
-					chooseGroupingAction.logActionProperties();
-					}
-					catch(Exception e2) {
-						
-					}
 					return;
 				}
 			}
@@ -2202,15 +1539,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 					myProject.getDefaultTitle(), myProject.getColor1(), myProject.getColor2(), myProject, myVals,
 					myStddevs, repCounts, groupNames, sampleNames, true, repsMap);
 			ob.createInternalFrame();
-
-			try {
-			dataMap.put("groupingAttribute", input);
-			chooseGroupingAction.logActionProperties();
-			}
-			catch(Exception e3) {
-				
-			}
-
 			return;
 		}
 
@@ -2230,8 +1558,33 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 			return;
 		}
 		if ("create histogram".equals(e.getActionCommand())) {
+			EventQueue.invokeLater(new Runnable() {
+				@Override
+				public void run() {
+					try {// get data for selected rows
+						int[] selected = getSelectedRowsInList();
+						// number of bins
+						int nBins = myProject.getIncludedDataColumnCount() / 10;
+						HistogramChart f = new HistogramChart(selected, nBins, myProject, 1, null);
+						MetaOmGraph.getDesktop().add(f);
+						f.setDefaultCloseOperation(2);
+						f.setClosable(true);
+						f.setResizable(true);
+						f.pack();
+						f.setSize(1000, 700);
+						f.setVisible(true);
+						f.toFront();
 
-			createHistogram();
+					} catch (Exception e) {
+						JOptionPane.showMessageDialog(null, "Error occured while reading data!!!", "Error",
+								JOptionPane.ERROR_MESSAGE);
+
+						e.printStackTrace();
+						return;
+					}
+				}
+			});
+			return;
 		}
 		if ("create heatmap".equals(e.getActionCommand())) {
 			// create heat map for selected rows over all included columns
@@ -2363,21 +1716,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 		}
 		if ("viewmetaform".equals(e.getActionCommand())) {
 			// JOptionPane.showMessageDialog(null, "showmwta...");
-
-			//Harsha - reproducibility log
-
-			HashMap<String,Object> actionMap = new HashMap<String,Object>();
-			actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-			String selList = geneLists.getSelectedValue().toString();
-			dataMap.put("selectedList", selList);
-
-			HashMap<String,Object> result = new HashMap<String,Object>();
-			result.put("result", "OK");
-
-
-
 			EventQueue.invokeLater(new Runnable() {
 
 				@Override
@@ -2386,11 +1724,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 						HashMap<String, CorrelationMetaCollection> metaCorrRes = myProject.getMetaCorrRes();
 						if (metaCorrRes == null || metaCorrRes.size() < 1) {
 							JOptionPane.showMessageDialog(null, "No correlations found...");
-
-							result.put("result", "Error");
-							result.put("resultComments", "No correlations found...");
-							ActionProperties viewCorrelationsAction = new ActionProperties("view-correlations",actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-							viewCorrelationsAction.logActionProperties();
 							return;
 						}
 						CorrelationMetaTable frame = new CorrelationMetaTable(metaCorrRes);
@@ -2399,17 +1732,12 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 								MetaOmGraph.getMainWindow().getHeight() / 2);
 						MetaOmGraph.getDesktop().add(frame);
 						frame.setSelected(true);
-						ActionProperties viewCorrelationsAction = new ActionProperties("view-correlations",actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-						viewCorrelationsAction.logActionProperties();
 					} catch (Exception e) {
 						e.printStackTrace();
 					}
 				}
 			});
 
-			ActionProperties viewCorrelationsAction = new ActionProperties("view-correlations",actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			viewCorrelationsAction.logActionProperties();
-
 			return;
 		}
 		if (ATGENESEARCH_COMMAND.equals(e.getActionCommand())) {
@@ -2420,19 +1748,19 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 			makeListFromFilter();
 			return;
 		}
+		
+		if("ExportToExcel".equals(e.getActionCommand())) {
+			Utils.saveJTableToExcel(listDisplay);
+			return;
+		}
 
-		if ("savemaintab".equals(e.getActionCommand())) {
-
-			Utils.saveJTabletofile(listDisplay, "Feature Metadata");
+		if ("ExportToText".equals(e.getActionCommand())) {
+			Utils.saveJTabletofile(listDisplay);
 			return;
 		}
+		
 		if ("advancefilter".equals(e.getActionCommand())) {
 
-			//Harsha - reproducibility log
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-			HashMap<String,Object> result = new HashMap<String,Object>();
-			result.put("result", "OK");
-
 			// show advance filter options
 			final TreeSearchQueryConstructionPanel tsp = new TreeSearchQueryConstructionPanel(
 					MetaOmGraph.getActiveProject(), true);
@@ -2474,12 +1802,8 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 				allFilter += thisFilter + ";";
 			}
 
-			dataMap.put("allFilters", allFilter);
 			filterField.setText(allFilter);
 
-			//			ActionProperties advancedFilterAction = new ActionProperties("advanced-filter",null,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			//			advancedFilterAction.logActionProperties();
-
 			return;
 		}
 		if (("edit list".equals(e.getActionCommand())) || ("new list".equals(e.getActionCommand()))) {
@@ -2529,43 +1853,15 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 				|| ("manhattan distance".equals(e.getActionCommand()))
 				|| ("weighted euclidean distance".equals(e.getActionCommand()))
 				|| ("weighted manhattan distance".equals(e.getActionCommand()))) {
-
-
-			//Harsha - reproducibility log
-			HashMap<String,Object> actionMap = new HashMap<String,Object>();
-			actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-			String selList = geneLists.getSelectedValue().toString();
-			dataMap.put("selectedList", selList);
-			dataMap.put("selectedGenes", getSelectedGeneNames());
-			dataMap.put("transformationData", MetaOmGraph.getInstance().getTransform());
-			
-			HashMap<String,Object> result = new HashMap<String,Object>();
-
 			if (listDisplay.getSelectedRowCount() < 1) {
 				JOptionPane.showMessageDialog(MetaOmGraph.getMainWindow(), "Please select a row to analyze!", "Error",
 						0);
-
-				result.put("result", "Error");
-				result.put("resultComments", "Please select a row to analyze!");
-
-				ActionProperties multiSelectAction = new ActionProperties(e.getActionCommand().replaceAll(" ", "-"),actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				multiSelectAction.logActionProperties();
-
 				return;
 			}
 
 			if (listDisplay.getSelectedRowCount() > 1) {
 				JOptionPane.showMessageDialog(MetaOmGraph.getMainWindow(), "Please select only one row to analyze!",
 						"Error", 0);
-
-				result.put("result", "Error");
-				result.put("resultComments", "Please select only one row to analyze!");
-
-				ActionProperties multiSelectAction = new ActionProperties(e.getActionCommand().replaceAll(" ", "-"),actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				multiSelectAction.logActionProperties();
-
 				return;
 			}
 
@@ -2639,18 +1935,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 			if (name == null || name.equals(""))
 				return;
 
-
-			//Harsha - Reproducibility log
-
-
-			dataMap.put("correlationName", name);
-			dataMap.put("targetName", targetName);
-			result.put("result", "OK");
-
-			ActionProperties multiSelectAction = new ActionProperties(e.getActionCommand().replaceAll(" ", "-"),actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-
-
-
 			try {
 				if ("pearson correlation".equals(e.getActionCommand())) {
 					// measure time
@@ -2661,8 +1945,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 					// float timeElapsed = endTime - startTime;
 					// timeElapsed = (timeElapsed / (float) 1000000000.00);
 					// JOptionPane.showMessageDialog(null, "Time taken:" + timeElapsed);
-					multiSelectAction.logActionProperties();
-
 				} else if ("pearson correlationP".equals(e.getActionCommand())) {
 					// Meta-analysis model
 					// store all the meta corr results in a list of objects
@@ -2670,11 +1952,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 					if (myProject.getMetadataHybrid() == null) {
 						JOptionPane.showMessageDialog(null, "No metadata loaded", "Metadata not found",
 								JOptionPane.INFORMATION_MESSAGE);
-
-						result.put("result", "Error");
-						result.put("resultComments", "No metadata loaded");
-
-						multiSelectAction.logActionProperties();
 						return;
 					}
 					TreeMap<String, List<Integer>> groupsMap = myProject.getMetadataHybrid().getDefaultRepsMap();
@@ -2726,7 +2003,7 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 										// CorrelationMeta temp = ob.doComputation(remFlag);
 										// target gene name to correlation meta object
 										String thisgeneName = myProject.getRowName(entries[j])[myProject
-										                                                       .getDefaultColumn()].toString();
+												.getDefaultColumn()].toString();
 										// JOptionPane.showMessageDialog(null, "this gene name:"+thisgeneName);
 										// add gene name in corrmeta obj
 										temp.settargetName(thisgeneName);
@@ -2791,7 +2068,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 								myProject.setLastCorrelation(result, nameSave);
 
 							}
-							multiSelectAction.logActionProperties();
 							progress.dispose();
 						}
 					};
@@ -2825,11 +2101,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 					if (myProject.getMetadataHybrid() == null) {
 						JOptionPane.showMessageDialog(null, "No metadata loaded", "Metadata not found",
 								JOptionPane.INFORMATION_MESSAGE);
-
-						result.put("result", "Error");
-						result.put("resultComments", "No metadata loaded");
-
-						multiSelectAction.logActionProperties();
 						return;
 					}
 
@@ -2884,7 +2155,7 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 										double thisrVal = 0;
 										CorrelationMeta temp = new CorrelationMeta(pv[0], pv[1]);
 										String thisgeneName = myProject.getRowName(entries[j])[myProject
-										                                                       .getDefaultColumn()].toString();
+												.getDefaultColumn()].toString();
 										temp.settargetName(thisgeneName);
 										corrMetaResList.add(temp);
 										// JOptionPane.showMessageDialog(null, "P val for row:"+j+" is:"+pv);
@@ -2933,7 +2204,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 										"ShuffleWithInGrps", targetName, corrMetaResList);
 								myProject.addMetaCorrRes(nameSave, cmcObj);
 							}
-							multiSelectAction.logActionProperties();
 							progress.dispose();
 						}
 					};
@@ -2996,7 +2266,7 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 										double thisrVal = 0;
 										CorrelationMeta temp = new CorrelationMeta(pv[0], pv[1]);
 										String thisgeneName = myProject.getRowName(entries[j])[myProject
-										                                                       .getDefaultColumn()].toString();
+												.getDefaultColumn()].toString();
 										temp.settargetName(thisgeneName);
 										corrMetaResList.add(temp);
 
@@ -3022,11 +2292,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 								ioe.printStackTrace();
 								progress.dispose();
 								errored = true;
-
-								result.put("result", "Error");
-								result.put("resultComments", "Error reading project data");
-
-								multiSelectAction.logActionProperties();
 								return null;
 							} catch (ArrayIndexOutOfBoundsException oob) {
 								progress.dispose();
@@ -3049,7 +2314,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 										"ShuffleAll", targetName, corrMetaResList);
 								myProject.addMetaCorrRes(nameSave, cmcObj);
 							}
-							multiSelectAction.logActionProperties();
 							progress.dispose();
 						}
 					};
@@ -3070,16 +2334,9 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 						k = Integer.parseInt((String) JOptionPane.showInputDialog(null, "Please Enter the order k",
 								"Input the order", JOptionPane.QUESTION_MESSAGE, null, null,
 								String.valueOf(MetaOmGraph.getOrder())));
-
-						dataMap.put("numBins", binsM);
-						dataMap.put("order", k);
 					} catch (NumberFormatException nfe) {
 						JOptionPane.showMessageDialog(null, "Invalid number entered. Please try again.", "Error",
 								JOptionPane.ERROR_MESSAGE);
-						result.put("result", "Error");
-						result.put("resultComments", "Invalid number entered. Please try again.");
-
-						multiSelectAction.logActionProperties();
 						return;
 					}
 					// construct a uniform knot vector
@@ -3169,11 +2426,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 								ioe.printStackTrace();
 								progress.dispose();
 								errored = true;
-
-								result.put("result", "Error");
-								result.put("resultComments", "Error reading project data");
-
-								multiSelectAction.logActionProperties();
 								return null;
 							} catch (ArrayIndexOutOfBoundsException oob) {
 								progress.dispose();
@@ -3194,7 +2446,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 								myProject.setLastCorrelation(result, nameSave);
 
 							}
-							multiSelectAction.logActionProperties();
 							progress.dispose();
 						}
 					};
@@ -3220,17 +2471,9 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 						k = Integer.parseInt((String) JOptionPane.showInputDialog(null, "Please Enter the order k",
 								"Input the order", JOptionPane.QUESTION_MESSAGE, null, null,
 								String.valueOf(MetaOmGraph.getOrder())));
-
-						dataMap.put("numBins", binsM);
-						dataMap.put("order", k);
 					} catch (NumberFormatException nfe) {
 						JOptionPane.showMessageDialog(null, "Invalid number entered. Please try again.", "Error",
 								JOptionPane.ERROR_MESSAGE);
-
-						result.put("result", "Error");
-						result.put("resultComments", "Invalid number entered. Please try again.");
-
-						multiSelectAction.logActionProperties();
 						return;
 					}
 					// construct a uniform knot vector
@@ -3254,11 +2497,11 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 					// int _N = 100;
 					List<double[][]> shuffList = new ArrayList<>();
 					shuffList.add(targetwtMat); // shuffle _N time to create a list of
-					// shuffledlists
+												// shuffledlists
 					List<Integer> indices = IntStream.range(0, targetwtMat[0].length).boxed()
 							.collect(Collectors.toList());// indices of
-					// columns
-					// 0..num_Cols
+															// columns
+															// 0..num_Cols
 					for (int i = 0; i < _N; i++) {
 						// create _N shuffled mat and add to list
 						java.util.Collections.shuffle(indices);
@@ -3350,11 +2593,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 								ioe.printStackTrace();
 								progress.dispose();
 								errored = true;
-
-								result.put("result", "Error");
-								result.put("resultComments", "Error reading project data");
-
-								multiSelectAction.logActionProperties();
 								return null;
 							} catch (ArrayIndexOutOfBoundsException oob) {
 								progress.dispose();
@@ -3380,7 +2618,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 								myProject.addMetaCorrRes(nameSave, cmcObj);
 							}
 							progress.dispose();
-							multiSelectAction.logActionProperties();
 							System.gc();
 						}
 					};
@@ -3405,17 +2642,9 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 						k = Integer.parseInt((String) JOptionPane.showInputDialog(null, "Please Enter the order k",
 								"Input the order", JOptionPane.QUESTION_MESSAGE, null, null,
 								String.valueOf(MetaOmGraph.getOrder())));
-
-						dataMap.put("numBins", binsM);
-						dataMap.put("order", k);
 					} catch (NumberFormatException nfe) {
 						JOptionPane.showMessageDialog(null, "Invalid number entered. Please try again.", "Error",
 								JOptionPane.ERROR_MESSAGE);
-
-						result.put("result", "Error");
-						result.put("resultComments", "Invalid number entered. Please try again.");
-
-						multiSelectAction.logActionProperties();
 						return;
 					}
 					// construct a uniform knot vector
@@ -3445,11 +2674,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 					if (myProject.getMetadataHybrid() == null) {
 						JOptionPane.showMessageDialog(null, "No metadata loaded", "Metadata not found",
 								JOptionPane.INFORMATION_MESSAGE);
-
-						result.put("result", "Error");
-						result.put("resultComments", "No metadata loaded");
-
-						multiSelectAction.logActionProperties();
 						return;
 					}
 
@@ -3560,11 +2784,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 								ioe.printStackTrace();
 								progress.dispose();
 								errored = true;
-
-								result.put("result", "Error");
-								result.put("resultComments", "Error reading project data");
-
-								multiSelectAction.logActionProperties();
 								return null;
 							} catch (ArrayIndexOutOfBoundsException oob) {
 								progress.dispose();
@@ -3591,7 +2810,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 								myProject.addMetaCorrRes(nameSave, cmcObj);
 							}
 							progress.dispose();
-							multiSelectAction.logActionProperties();
 							System.gc();
 						}
 					};
@@ -3601,7 +2819,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 
 				else if ("spearman correlation".equals(e.getActionCommand())) {
 					MetaOmAnalyzer.doAnalysis(myProject, geneLists.getSelectedValue().toString(), target, name, 2);
-					multiSelectAction.logActionProperties();
 				}
 
 				else if ("spearman correlation2".equals(e.getActionCommand())) {
@@ -3623,11 +2840,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 					if (myProject.getMetadataHybrid() == null) {
 						JOptionPane.showMessageDialog(null, "No metadata loaded", "Metadata not found",
 								JOptionPane.INFORMATION_MESSAGE);
-
-						result.put("result", "Error");
-						result.put("resultComments", "No metadata loaded");
-
-						multiSelectAction.logActionProperties();
 						return;
 					}
 
@@ -3682,7 +2894,7 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 										// double thisrVal = 0;
 										CorrelationMeta temp = new CorrelationMeta(pv[0], pv[1]);
 										String thisgeneName = myProject.getRowName(entries[j])[myProject
-										                                                       .getDefaultColumn()].toString();
+												.getDefaultColumn()].toString();
 										temp.settargetName(thisgeneName);
 										corrMetaResList.add(temp);
 										// JOptionPane.showMessageDialog(null, "P val for row:"+j+" is:"+pv);
@@ -3705,11 +2917,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 								ioe.printStackTrace();
 								progress.dispose();
 								errored = true;
-
-								result.put("result", "Error");
-								result.put("resultComments", "Error reading project data");
-
-								multiSelectAction.logActionProperties();
 								return null;
 							} catch (ArrayIndexOutOfBoundsException oob) {
 								progress.dispose();
@@ -3734,7 +2941,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 								myProject.addMetaCorrRes(nameSave, cmcObj);
 							}
 							progress.dispose();
-							multiSelectAction.logActionProperties();
 						}
 					};
 					analyzeWorker.start();
@@ -3797,7 +3003,7 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 										// double thisrVal = 0;
 										CorrelationMeta temp = new CorrelationMeta(pv[0], pv[1]);
 										String thisgeneName = myProject.getRowName(entries[j])[myProject
-										                                                       .getDefaultColumn()].toString();
+												.getDefaultColumn()].toString();
 										temp.settargetName(thisgeneName);
 										corrMetaResList.add(temp);
 
@@ -3823,11 +3029,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 								ioe.printStackTrace();
 								progress.dispose();
 								errored = true;
-
-								result.put("result", "Error");
-								result.put("resultComments", "Error reading project data");
-
-								multiSelectAction.logActionProperties();
 								return null;
 							} catch (ArrayIndexOutOfBoundsException oob) {
 								progress.dispose();
@@ -3852,53 +3053,34 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 								myProject.addMetaCorrRes(nameSave, cmcObj);
 							}
 							progress.dispose();
-							multiSelectAction.logActionProperties();
 						}
 					};
 					analyzeWorker.start();
 					progress.setVisible(true);
 				} else if ("euclidean distance".equals(e.getActionCommand())) {
 					MetaOmAnalyzer.doAnalysis(myProject, geneLists.getSelectedValue().toString(), target, name, 4);
-					multiSelectAction.logActionProperties();
 				} else if ("canberra distance".equals(e.getActionCommand())) {
 					MetaOmAnalyzer.doAnalysis(myProject, geneLists.getSelectedValue().toString(), target, name, 3);
-					multiSelectAction.logActionProperties();
 				} else if ("manhattan distance".equals(e.getActionCommand())) {
 					MetaOmAnalyzer.doAnalysis(myProject, geneLists.getSelectedValue().toString(), target, name, 5);
-					multiSelectAction.logActionProperties();
 				} else if ("weighted euclidean distance".equals(e.getActionCommand())) {
 					MetaOmAnalyzer.doAnalysis(myProject, geneLists.getSelectedValue().toString(), target, name, 6);
-					multiSelectAction.logActionProperties();
 				} else if ("weighted manhattan distance".equals(e.getActionCommand())) {
 					MetaOmAnalyzer.doAnalysis(myProject, geneLists.getSelectedValue().toString(), target, name, 7);
-					multiSelectAction.logActionProperties();
 				}
 			} catch (
 
-					IOException ioe) {
+			IOException ioe) {
 				JOptionPane.showMessageDialog(MetaOmGraph.getMainWindow(), "Error reading project data", "IOException",
 						0);
-				result.put("result", "Error");
-				result.put("resultComments", "Error reading project data");
-				multiSelectAction.logActionProperties();
-
 				ioe.printStackTrace();
 			} catch (InterruptedException e1) {
 				// TODO Auto-generated catch block
-				result.put("result", "Error");
-				result.put("resultComments", "Interrupted Exception");
-				multiSelectAction.logActionProperties();
 				e1.printStackTrace();
 			} catch (ExecutionException e1) {
 				// TODO Auto-generated catch block
-				result.put("result", "Error");
-				result.put("resultComments", "Execution Exception");
-				multiSelectAction.logActionProperties();
 				e1.printStackTrace();
 			}
-
-
-			multiSelectAction.logActionProperties();
 			return;
 		}
 		if ("save correlation".equals(e.getActionCommand())) {
@@ -3906,7 +3088,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 			return;
 		}
 		if ("remove correlation".equals(e.getActionCommand())) {
-
 			if (!(e.getSource() instanceof JMenuItem))
 				return;
 
@@ -3915,20 +3096,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 					"Are you sure you want to delete " + source.getText() + "?", "Delete", 0) == 0) {
 				myProject.deleteInfoColumn(Integer.parseInt(source.getName()));
 			}
-
-			//Harsha - reproducibility log
-			HashMap<String,Object> actionMap = new HashMap<String,Object>();
-			actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-			dataMap.put("selectedCorrelation", source.getText());
-
-			HashMap<String,Object> result = new HashMap<String,Object>();
-			result.put("result", "OK");
-
-			ActionProperties deleteCorrelationAction = new ActionProperties("remove-correlation",actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			deleteCorrelationAction.logActionProperties();
-
 			return;
 		}
 		if ("remove all correlations".equals(e.getActionCommand())) {
@@ -3939,20 +3106,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 					myProject.deleteInfoColumn(corrCols.get(i).intValue());
 				}
 			}
-
-			//Harsha - reproducibility log
-			HashMap<String,Object> actionMap = new HashMap<String,Object>();
-			actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-			dataMap.put("selectedCorrelation", "All");
-
-			HashMap<String,Object> result = new HashMap<String,Object>();
-			result.put("result", "OK");
-
-			ActionProperties deleteAllCorrelationsAction = new ActionProperties("remove-all-correlations",actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			deleteAllCorrelationsAction.logActionProperties();
-
 			return;
 		}
 		if ("Exclude samples".equals(e.getActionCommand())) {
@@ -3978,20 +3131,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 				}
 			}
 
-			//Harsha - reproducibility log
-			HashMap<String,Object> actionMap = new HashMap<String,Object>();
-			actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-			dataMap.put("identifier", result);
-			dataMap.put("selectedGene", geneLists.getSelectedValue().toString());
-
-			HashMap<String,Object> resultLog = new HashMap<String,Object>();
-			resultLog.put("result", "OK");
-
-			ActionProperties pairwiseCorrelationsAction = new ActionProperties(e.getActionCommand().replaceAll(" ","-"),actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			pairwiseCorrelationsAction.logActionProperties();
-
 			if ("pairwise pearson".equals(e.getActionCommand())) {
 				try {
 					// measure time
@@ -4021,23 +3160,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 
 		if (("mutualInformationPairs".equals(e.getActionCommand()))) {
 			// JOptionPane.showMessageDialog(null, "PairwiseMI");
-
-			//Harsha - reproducibility log
-
-			HashMap<String,Object> actionMap = new HashMap<String,Object>();
-			actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-			String selList = geneLists.getSelectedValue().toString();
-			dataMap.put("selectedList", selList);
-			dataMap.put("selectedGenes", getSelectedGeneNames());
-			dataMap.put("transformationData", MetaOmGraph.getInstance().getTransform());
-			
-			HashMap<String,Object> resultLog = new HashMap<String,Object>();
-			resultLog.put("result", "OK");
-
-
-
 			String[] names = myProject.getInfoColumnNames();
 			String[] options = new String[names.length + 1];
 			options[0] = "Row Number";
@@ -4047,8 +3169,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 					"Pairwise Mutual Information", 3, null, options, options[0]);
 			if (result == null)
 				return;
-
-			dataMap.put("identifier", result);
 			int nameCol = -100;
 			for (int i = 0; (i < options.length) && (nameCol < 0); i++) {
 				if (options[i].equals(result.toString())) {
@@ -4065,20 +3185,9 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 				k = Integer.parseInt(
 						(String) JOptionPane.showInputDialog(null, "Please Enter the order k", "Input the order",
 								JOptionPane.QUESTION_MESSAGE, null, null, String.valueOf(MetaOmGraph.getOrder())));
-
-
-				dataMap.put("numBins", binsM);
-				dataMap.put("order", k);
-
 			} catch (NumberFormatException nfe) {
 				JOptionPane.showMessageDialog(null, "Invalid number entered. Please try again.", "Error",
 						JOptionPane.ERROR_MESSAGE);
-
-				resultLog.put("result","Error");
-				resultLog.put("resultComments", "Invalid number entered. Please try again.");
-
-				ActionProperties mutualInformationMatrixAction = new ActionProperties("mutual-information-matrix",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				mutualInformationMatrixAction.logActionProperties();
 				return;
 			}
 			// construct a uniform knot vector
@@ -4099,27 +3208,11 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 				e1.printStackTrace();
 			}
 
-			ActionProperties mutualInformationMatrixAction = new ActionProperties("mutual-information-matrix",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			mutualInformationMatrixAction.logActionProperties();
 		}
 
 		// relatedness matrix
 		if (("relatednessPairs".equals(e.getActionCommand()))) {
 			// JOptionPane.showMessageDialog(null, "PairwiseMI");
-
-			//Harsha - reproducibility log
-			HashMap<String,Object> actionMap = new HashMap<String,Object>();
-			actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-			String selList = geneLists.getSelectedValue().toString();
-			dataMap.put("selectedList", selList);
-			dataMap.put("selectedGenes", getSelectedGeneNames());
-
-			HashMap<String,Object> resultLog = new HashMap<String,Object>();
-			resultLog.put("result", "OK");
-
-
 			String[] names = myProject.getInfoColumnNames();
 			String[] options = new String[names.length + 1];
 			options[0] = "Row Number";
@@ -4129,9 +3222,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 					"Pairwise Mutual Information", 3, null, options, options[0]);
 			if (result == null)
 				return;
-
-			dataMap.put("identifier", result);
-
 			int nameCol = -100;
 			for (int i = 0; (i < options.length) && (nameCol < 0); i++) {
 				if (options[i].equals(result.toString())) {
@@ -4148,20 +3238,9 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 				k = Integer.parseInt(
 						(String) JOptionPane.showInputDialog(null, "Please Enter the order k", "Input the order",
 								JOptionPane.QUESTION_MESSAGE, null, null, String.valueOf(MetaOmGraph.getOrder())));
-
-				dataMap.put("numBins", binsM);
-				dataMap.put("order", k);
-
 			} catch (NumberFormatException nfe) {
 				JOptionPane.showMessageDialog(null, "Invalid number entered. Please try again.", "Error",
 						JOptionPane.ERROR_MESSAGE);
-
-				resultLog.put("result","Error");
-				resultLog.put("resultComments", "Invalid number entered. Please try again.");
-
-				ActionProperties relatednessMatrixAction = new ActionProperties("relatedness-matrix",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				relatednessMatrixAction.logActionProperties();
-
 				return;
 			}
 			// construct a uniform knot vector
@@ -4184,8 +3263,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 				e1.printStackTrace();
 			}
 
-			ActionProperties relatednessMatrixAction = new ActionProperties("relatedness-matrix",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			relatednessMatrixAction.logActionProperties();
 		}
 
 		if (("DiffCorrelation".equals(e.getActionCommand()))) {
@@ -4193,44 +3270,21 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 			// calculate r and p values using each group
 			// create 4 lists r1,pv1,r2,pv2
 			// select two corr columns and do z test
-
-			//Harsha - reproducibility log
-			HashMap<String,Object> resultLog = new HashMap<String,Object>();
-
 			String col1 = selectCorrColumn();
 			if (col1 == null) {
 				JOptionPane.showMessageDialog(null, "No correlation columns found!", "Error",
 						JOptionPane.ERROR_MESSAGE);
-				resultLog.put("result", "Error");
-				resultLog.put("resultLog", "No correlation columns found!");
-
 				return;
 			}
 			int n1 = 0;
-
-			//Harsha - reproducibility log
-			HashMap<String,Object> actionMap = new HashMap<String,Object>();
-			actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-			String selList = geneLists.getSelectedValue().toString();
-			dataMap.put("selectedList", selList);
-			dataMap.put("correlationColumn1", col1);
-
-
-			resultLog.put("result", "OK");
 			try {
 				n1 = Integer.parseInt((String) JOptionPane.showInputDialog(null,
 						"Please Enter the sample size for selected correlation (N1)", "Input N1",
 						JOptionPane.QUESTION_MESSAGE, null, null, String.valueOf(n1)));
-				dataMap.put("sampleSize_N1", n1);
 
 			} catch (NumberFormatException nfe) {
 				JOptionPane.showMessageDialog(null, "Invalid integer entered. Please try again.", "Error",
 						JOptionPane.ERROR_MESSAGE);
-
-				resultLog.put("result", "Error");
-				resultLog.put("resultLog", "Invalid integer entered. Please try again.");
 				return;
 			}
 
@@ -4238,27 +3292,17 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 			if (col2 == null) {
 				JOptionPane.showMessageDialog(null, "No correlation columns found!", "Error",
 						JOptionPane.ERROR_MESSAGE);
-
-				resultLog.put("result", "Error");
-				resultLog.put("resultLog", "No correlation columns found!");
 				return;
 			}
-
-			dataMap.put("correlationColumn2", col2);
 			int n2 = 0;
 			try {
 				n2 = Integer.parseInt((String) JOptionPane.showInputDialog(null,
 						"Please Enter the sample size for selected correlation (N2)", "Input N2",
 						JOptionPane.QUESTION_MESSAGE, null, null, String.valueOf(n2)));
-				dataMap.put("sampleSize_N2", n2);
 
 			} catch (NumberFormatException nfe) {
 				JOptionPane.showMessageDialog(null, "Invalid integer entered. Please try again.", "Error",
 						JOptionPane.ERROR_MESSAGE);
-				resultLog.put("result", "Error");
-				resultLog.put("resultLog", "Invalid integer entered. Please try again.");
-				ActionProperties existingDifferentialAction = new ActionProperties("differential-correlation-with-existing-columns",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				existingDifferentialAction.logActionProperties();
 				return;
 			}
 
@@ -4286,45 +3330,22 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 			MetaOmGraph.getDesktop().add(frame);
 			frame.setVisible(true);
 
-			ActionProperties existingDifferentialAction = new ActionProperties("differential-correlation-with-existing-columns",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			existingDifferentialAction.logActionProperties();
-
 		}
 
 		if (("NewDiffCorrelation".equals(e.getActionCommand()))) {
-
-			//Harsha - reproducibility log
-			HashMap<String,Object> actionMap = new HashMap<String,Object>();
-			actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-			HashMap<String,Object> resultLog = new HashMap<String,Object>();
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-
 			if (myProject.getMetadataHybrid() == null) {
 				JOptionPane.showMessageDialog(null, "No metadata read", "No metadata", JOptionPane.ERROR_MESSAGE);
-				resultLog.put("result", "Error");
-				resultLog.put("resultComments", "No metadata read");
 				return;
 			}
 			if (listDisplay.getSelectedRowCount() < 1) {
 				JOptionPane.showMessageDialog(MetaOmGraph.getMainWindow(), "Please select a row to analyze!", "Error",
 						0);
-				resultLog.put("result", "Error");
-				resultLog.put("resultComments", "Please select a row to analyze!");
-
-				ActionProperties newDifferentialAction = new ActionProperties("new-differential-correlation",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				newDifferentialAction.logActionProperties();
 				return;
 			}
 
 			if (listDisplay.getSelectedRowCount() > 1) {
 				JOptionPane.showMessageDialog(MetaOmGraph.getMainWindow(), "Please select only one row to analyze!",
 						"Error", 0);
-				resultLog.put("result", "Error");
-				resultLog.put("resultComments", "Please select only one row to analyze!");
-
-				ActionProperties newDifferentialAction = new ActionProperties("new-differential-correlation",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				newDifferentialAction.logActionProperties();
 				return;
 			}
 
@@ -4335,40 +3356,15 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 			lframe.setSize(MetaOmGraph.getMainWindow().getWidth() / 2, MetaOmGraph.getMainWindow().getHeight() / 2);
 			MetaOmGraph.getDesktop().add(lframe);
 			lframe.setVisible(true);
-
-			//Harsha - reproducibility log
-
-			String selList = geneLists.getSelectedValue().toString();
-			dataMap.put("selectedList", selList);
-			dataMap.put("selectedGene", rowName);
-
-
-			resultLog.put("result", "OK");
-
-			ActionProperties newDifferentialAction = new ActionProperties("new-differential-correlation",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			newDifferentialAction.logActionProperties();
-
 			return;
 
 		}
 
 		if (("LoadDiffCorrelation".equals(e.getActionCommand()))) {
-
-			//Harsha - reproducibility log
-			HashMap<String,Object> actionMap = new HashMap<String,Object>();
-			actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-			HashMap<String,Object> resultLog = new HashMap<String,Object>();
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-
 			String[] listOfDC = myProject.getSavedDiffCorrResNames();
 			if (listOfDC == null || listOfDC.length < 1) {
 				JOptionPane.showMessageDialog(null, "No saved results found", "No results",
 						JOptionPane.INFORMATION_MESSAGE);
-				resultLog.put("result", "Error");
-				resultLog.put("resultComments", "No saved results found");
-				ActionProperties loadDifferentialAction = new ActionProperties("load-differential-correlation",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				loadDifferentialAction.logActionProperties();
 				return;
 			}
 			// JOptionPane.showMessageDialog(null, "saved" + Arrays.toString(listOfDE));
@@ -4392,37 +3388,15 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 			MetaOmGraph.getDesktop().add(frame);
 			frame.setVisible(true);
 
-			//Harsha - reproducibility log
-
-			String selList = geneLists.getSelectedValue().toString();
-			dataMap.put("DEAnalysisChosen", chosenVal);
-
-
-			resultLog.put("result", "OK");
-
-			ActionProperties loadDifferentialAction = new ActionProperties("load-differential-correlation",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			loadDifferentialAction.logActionProperties();
-
 			return;
 		}
 
 		if (("RemoveDiffCorrelation".equals(e.getActionCommand()))) {
 
-			//Harsha - reproducibility log
-			HashMap<String,Object> actionMap = new HashMap<String,Object>();
-			actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-			HashMap<String,Object> resultLog = new HashMap<String,Object>();
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-
 			String[] listOfDC = myProject.getSavedDiffCorrResNames();
 			if (listOfDC == null || listOfDC.length < 1) {
 				JOptionPane.showMessageDialog(null, "No saved results found", "No results",
 						JOptionPane.INFORMATION_MESSAGE);
-				resultLog.put("result", "Error");
-				resultLog.put("resultComments", "No saved results found");
-				ActionProperties removeDifferentialAction = new ActionProperties("remove-differential-correlation",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				removeDifferentialAction.logActionProperties();
 				return;
 			}
 			// JOptionPane.showMessageDialog(null, "saved" + Arrays.toString(listOfDE));
@@ -4441,22 +3415,10 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 			}
 
 			myProject.removeDiffCorrResults(chosenVal);
-
-			//Harsha - reproducibility log
-
-			String selList = geneLists.getSelectedValue().toString();
-			dataMap.put("DEAnalysisChosen", chosenVal);
-
-
-			resultLog.put("result", "OK");
-
-			ActionProperties removeDifferentialAction = new ActionProperties("remove-differential-correlation",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			removeDifferentialAction.logActionProperties();
 			return;
 
 		}
 
-
 	}
 
 	private Map<String, Collection<Integer>> createSplitIndex() {
@@ -4609,34 +3571,7 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 		for (int x = 0; x < entries.length; x++) {
 			entries[x] = getTrueRow(x);
 		}
-
-		
-		try {
-			//Harsha - reproducibility log
-			HashMap<String,Object> actionMap = new HashMap<String,Object>();
-			actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-			HashMap<String,Object> dataMap = new HashMap<String,Object>();
-			dataMap.put("Filter Text", filterText);
-			dataMap.put("Created List Name", filterText);
-			dataMap.put("List Elements Count", entries.length);
-			Map<Integer,String> selectedItems = new HashMap<Integer,String>();
-
-			for(int rowNum: entries) {
-				selectedItems.put(rowNum, myProject.getDefaultRowNames(rowNum));
-			}
-			dataMap.put("Selected Rows", selectedItems);
-			HashMap<String,Object> resultLog = new HashMap<String,Object>();
-			resultLog.put("result", "OK");
-
-			ActionProperties createListAction = new ActionProperties("create-list-from-filter",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			createListAction.logActionProperties();
-		}
-		catch(Exception e) {
-
-		}
-
-		myProject.addGeneList(filterText, entries, true, false);
+		myProject.addGeneList(filterText, entries, true);
 	}
 
 	public int getTrueRow(int row) {
@@ -4791,7 +3726,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 			listFromFilterButton.setEnabled((success) && (!filterField.getText().trim().equals("")));
 			plotFilterItem.setEnabled((success) && (!filterField.getText().trim().equals("")));
 			Utils.setSearchFieldColors(filterField, success);
-
 		}
 	}
 
@@ -4806,25 +3740,10 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 	}
 
 	public boolean keepLastCorrelation() {
-
-		HashMap<String,Object> actionMap = new HashMap<String,Object>();
-		actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-		HashMap<String,Object> dataMap = new HashMap<String,Object>();
-
-		HashMap<String,Object> result = new HashMap<String,Object>();
-		result.put("result", "OK");
-
-		ActionProperties lastCorrelationAction = new ActionProperties("keep-last-correlation",actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-
 		if (!myProject.hasLastCorrelation()) {
-			result.put("result", "Error");
-			result.put("resultComments", "No last correlation to save");
 			throw new NullPointerException("No last correlation to save");
-
 		}
 		myProject.keepLastCorrelation();
-		lastCorrelationAction.logActionProperties();
 		return true;
 	}
 
@@ -5183,72 +4102,11 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 					f.setVisible(true);
 					f.toFront();
 
-					//Harsha - reproducibility log
-					HashMap<String,Object> actionMap = new HashMap<String,Object>();
-					HashMap<String,Object> dataMap = new HashMap<String,Object>();
-					HashMap<String,Object> result = new HashMap<String,Object>();
-					
-					try {
-					actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-					actionMap.put("section", "Feature Metadata");
-					
-					String selList = geneLists.getSelectedValue().toString();
-					dataMap.put("Selected List", selList);
-					dataMap.put("Selected Features", "Entire");
-					dataMap.put("Data Transformation", MetaOmGraph.getInstance().getTransform());
-					dataMap.put("Default XAxis", myProject.getDefaultXAxis());
-					dataMap.put("Default YAxis", myProject.getDefaultYAxis());
-					dataMap.put("Default Chart Title", myProject.getDefaultTitle());
-					dataMap.put("Color 1", myProject.getColor1());
-					dataMap.put("Color 2", myProject.getColor2());
-					dataMap.put("correlationColumn", col_val);
-					
-					
-					result.put("result", "OK");
-					result.put("userComments", "");
-
-					ActionProperties correlationHistogramAction = new ActionProperties("correlation-histogram",actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-					correlationHistogramAction.logActionProperties();
-					}
-					catch(Exception e1) {
-						
-					}
-
-
-
 				} catch (Exception e) {
 					JOptionPane.showMessageDialog(null, "Error occured while reading data!!!", "Error",
 							JOptionPane.ERROR_MESSAGE);
 
 					e.printStackTrace();
-
-					//Harsha - reproducibility log
-					
-					HashMap<String,Object> actionMap = new HashMap<String,Object>();
-					HashMap<String,Object> dataMap = new HashMap<String,Object>();
-					HashMap<String,Object> result = new HashMap<String,Object>();
-					
-					try {
-					actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-					actionMap.put("section", "Feature Metadata");
-					
-					String selList = geneLists.getSelectedValue().toString();
-					dataMap.put("selectedList", selList);
-					dataMap.put("selectedGenes", getSelectedGeneNames());
-					dataMap.put("correlationColumn", col_val);
-
-					dataMap.put("transformationData", MetaOmGraph.getInstance().getTransform());
-		
-					result.put("result", "Error");
-					result.put("resultComments", "Error occured while reading data!!!");
-					result.put("userComments", "");
-
-					ActionProperties correlationHistogramAction = new ActionProperties("correlation-histogram",actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-					correlationHistogramAction.logActionProperties();
-					}
-					catch(Exception e2) {
-						
-					}
 					return;
 				}
 			}
@@ -5283,40 +4141,6 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 		f2.setSize(1000, 700);
 		f2.setVisible(true);
 		f2.toFront();
-
-		//Harsha - reproducibility log
-		HashMap<String,Object> actionMap = new HashMap<String,Object>();
-		HashMap<String,Object> dataMap = new HashMap<String,Object>();
-		HashMap<String,Object> result = new HashMap<String,Object>();
-		
-		try {
-		actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-		actionMap.put("section", "Feature Metadata");
-		
-		String selList = geneLists.getSelectedValue().toString();
-		dataMap.put("Selected Column", colValue);
-		dataMap.put("Selected List", selList);
-		dataMap.put("Selected Features", getSelectedGeneNames());
-		dataMap.put("Data Transformation", MetaOmGraph.getInstance().getTransform());
-		dataMap.put("Default XAxis", myProject.getDefaultXAxis());
-		dataMap.put("Default YAxis", myProject.getDefaultYAxis());
-		dataMap.put("Default Chart Title", myProject.getDefaultTitle());
-		dataMap.put("Color 1", myProject.getColor1());
-		dataMap.put("Color 2", myProject.getColor2());
-		
-		
-		result.put("result", "OK");
-		result.put("userComments", "");
-
-		
-		ActionProperties barChartAction = new ActionProperties("bar-chart",actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-		barChartAction.logActionProperties();
-		
-		}
-		catch(Exception e1) {
-			
-		}
-
 	}
 
 	/**
@@ -5395,6 +4219,4 @@ public class MetaOmTablePanel extends JPanel implements ActionListener, ListSele
 
 	}
 
-
-
 }
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataFilter.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataFilter.java
index 8a00dbc..d623d9e 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataFilter.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataFilter.java
@@ -46,7 +46,7 @@ import java.awt.event.ActionListener;
 import java.beans.PropertyVetoException;
 import java.awt.event.ActionEvent;
 
-public class MetadataFilter extends JFrame {
+public class MetadataFilter extends JDialog {
 
 	private JPanel contentPane;
 	private JTable table;
@@ -111,6 +111,7 @@ public class MetadataFilter extends JFrame {
 		// TODO Auto-generated constructor stub
 		this.delete = val;
 		this.chartPanel=thisChartPanel;
+		setModal(true);
 		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
 		setBounds(100, 100, 450, 300);
 		this.mogColl = metadataCollection;
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataHearderEdit.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataHearderEdit.java
index 371a22c..6b9fa22 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataHearderEdit.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataHearderEdit.java
@@ -3,10 +3,10 @@ package edu.iastate.metnet.metaomgraph.ui;
 import java.awt.BorderLayout;
 import java.awt.EventQueue;
 
-import javax.swing.JFrame;
 import javax.swing.JPanel;
 import javax.swing.border.EmptyBorder;
 import javax.swing.JButton;
+import javax.swing.JDialog;
 import javax.swing.JLabel;
 import javax.swing.JOptionPane;
 import javax.swing.JScrollPane;
@@ -21,7 +21,7 @@ import edu.iastate.metnet.metaomgraph.MetadataCollection;
 import java.awt.event.ActionListener;
 import java.awt.event.ActionEvent;
 
-public class MetadataHearderEdit extends JFrame {
+public class MetadataHearderEdit extends JDialog {
 
 	private JPanel contentPane;
 	private JTable table;
@@ -57,6 +57,7 @@ public class MetadataHearderEdit extends JFrame {
 		this.parent=p;
 		this.mobj=obj;
 		this.headers=headervals;
+		setModal(true);
 		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
 		setBounds(100, 100, 450, 300);
 		contentPane = new JPanel();
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataImportWizard.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataImportWizard.java
index e7abf84..fa529be 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataImportWizard.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataImportWizard.java
@@ -3,53 +3,35 @@ package edu.iastate.metnet.metaomgraph.ui;
 import java.awt.BorderLayout;
 import java.awt.EventQueue;
 
-import javax.swing.JFrame;
 import javax.swing.JPanel;
 import javax.swing.JScrollPane;
 import javax.swing.border.EmptyBorder;
 import java.awt.Color;
 import javax.swing.JLabel;
-import java.awt.SystemColor;
 import java.awt.Font;
 import javax.swing.JMenuBar;
 import javax.swing.JMenu;
 import javax.swing.JMenuItem;
 import javax.swing.JOptionPane;
 
-import java.awt.Window.Type;
 import java.awt.Toolkit;
 import javax.swing.JSplitPane;
 import java.awt.FlowLayout;
-import javax.swing.SpringLayout;
 import javax.swing.SwingConstants;
 import javax.swing.UIManager;
 import javax.swing.WindowConstants;
 import javax.swing.JTree;
 import javax.swing.ListSelectionModel;
 import javax.swing.JList;
-import javax.swing.border.CompoundBorder;
-import javax.swing.border.MatteBorder;
-import java.awt.Cursor;
-import javax.swing.DebugGraphics;
 import javax.swing.DefaultListCellRenderer;
 import javax.swing.DefaultListModel;
 import javax.swing.DropMode;
 import javax.swing.Icon;
 import javax.swing.ImageIcon;
 import javax.swing.JButton;
-import java.awt.ComponentOrientation;
-import java.awt.Component;
-import java.awt.GridBagLayout;
-import java.awt.GridBagConstraints;
-import java.awt.Insets;
 import java.awt.Point;
-import java.awt.GridLayout;
-import java.awt.Image;
 
-import javax.swing.JComboBox;
-import javax.swing.border.LineBorder;
-import javax.swing.AbstractListModel;
-import javax.swing.BorderFactory;
+import javax.swing.JDialog;
 import javax.swing.tree.DefaultTreeModel;
 import javax.swing.tree.TreeSelectionModel;
 
@@ -64,19 +46,14 @@ import javax.swing.JTable;
 import java.awt.Dimension;
 import javax.swing.table.DefaultTableModel;
 import java.awt.event.ActionListener;
-import java.io.ByteArrayInputStream;
 import java.io.IOException;
-import java.io.InputStream;
-import java.io.UnsupportedEncodingException;
-import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 import java.awt.event.ActionEvent;
 import javax.swing.JTextField;
 import javax.swing.JCheckBox;
 
-public class MetadataImportWizard extends JFrame {
+public class MetadataImportWizard extends JDialog {
 
 	private JPanel contentPane;
 	private JTable table;
@@ -157,6 +134,7 @@ public class MetadataImportWizard extends JFrame {
 				.getImage(MetadataImportWizard.class.getResource("/resource/MetaOmicon16.png")));
 		setTitle("Metadata Table to Tree");
 		// setAlwaysOnTop(true);
+		setModal(true);
 		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
 		setBounds(100, 100, 702, 482);
 		// remove or keep unused cols
@@ -216,10 +194,16 @@ public class MetadataImportWizard extends JFrame {
 		panel.setBackground(Color.DARK_GRAY);
 		contentPane.add(panel, BorderLayout.SOUTH);
 
+		JButton finish = new JButton("Finish");
+		finish.setFont(new Font("Times New Roman", Font.PLAIN, 13));
+		finish.setForeground(Color.BLACK);
+		finish.setEnabled(false);
+		
 		JButton btnBack = new JButton("Back");
 		btnBack.addActionListener(new ActionListener() {
 			@Override
 			public void actionPerformed(ActionEvent e) {
+				finish.setEnabled(false);
 				ReadMetadata ob = new ReadMetadata(obj, obj.getdelimiter());
 				ob.setVisible(true);
 				dispose();
@@ -280,7 +264,7 @@ public class MetadataImportWizard extends JFrame {
 		btnImport.addActionListener(new ActionListener() {
 			@Override
 			public void actionPerformed(ActionEvent arg0) {
-
+				finish.setEnabled(false);
 				if (obj == null || tree == null) {
 					JOptionPane.showMessageDialog(null, "Please create a tree , then click Next.", "Error",
 							JOptionPane.ERROR_MESSAGE);
@@ -315,6 +299,9 @@ public class MetadataImportWizard extends JFrame {
 					}
 					removedCols.addAll(remainingCols);
 				}
+				else {
+					obj.setRemoveCols(remainingCols);
+				}
 
 				new AnimatedSwingWorker("Working...", true) {
 
@@ -349,6 +336,14 @@ public class MetadataImportWizard extends JFrame {
 					public void finished() {
 						JOptionPane.showMessageDialog(null, "Metadata has been loaded into MetaOmGraph", "Done",
 								JOptionPane.INFORMATION_MESSAGE);
+						finish.setEnabled(true);
+						finish.addActionListener(new ActionListener() {
+							@Override
+							public void actionPerformed(ActionEvent arg0) {
+								dispose();
+							}
+						});
+
 						// sometimes shows error
 						// dispose();
 					}
@@ -361,6 +356,7 @@ public class MetadataImportWizard extends JFrame {
 		btnImport.setForeground(Color.BLACK);
 		// btnImport.setBackground(Color.GRAY);
 		panel.add(btnImport);
+		panel.add(finish);
 
 		JPanel panel_1 = new JPanel();
 		contentPane.add(panel_1, BorderLayout.NORTH);
@@ -415,6 +411,7 @@ public class MetadataImportWizard extends JFrame {
 						org.jdom.Document resCopy = res;
 						tree_1.setModel(ob.createPreviewTreeModel(resCopy, treePreviewSize));
 						btnImport.setEnabled(true);
+						finish.setEnabled(false);
 						return null;
 					}
 
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataRemoveCols.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataRemoveCols.java
index 1447bc3..d48ce07 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataRemoveCols.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataRemoveCols.java
@@ -14,31 +14,24 @@ import javax.swing.JOptionPane;
 import javax.swing.DefaultCellEditor;
 import javax.swing.JButton;
 import javax.swing.JComboBox;
+import javax.swing.JDialog;
 import javax.swing.JScrollPane;
 import javax.swing.JTable;
 import java.awt.Font;
-import java.awt.List;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.Vector;
 
 import javax.swing.table.DefaultTableModel;
 import javax.swing.table.TableColumn;
 
-import org.apache.logging.log4j.Logger;
-
 import edu.iastate.metnet.metaomgraph.MetaOmGraph;
 import edu.iastate.metnet.metaomgraph.MetadataCollection;
-import edu.iastate.metnet.metaomgraph.logging.ActionProperties;
 
 import java.awt.Dimension;
 import java.awt.event.ActionListener;
-import java.text.SimpleDateFormat;
 import java.awt.event.ActionEvent;
 
-public class MetadataRemoveCols extends JFrame {
+public class MetadataRemoveCols extends JDialog {
 
 	private JPanel contentPane;
 	private JTable table;
@@ -70,6 +63,7 @@ public class MetadataRemoveCols extends JFrame {
 	 * Create the frame.
 	 */
 	public MetadataRemoveCols(String[] headervals, MetadataCollection obj, ReadMetadata p) {
+		setModal(true);
 		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 		setBounds(100, 100, 450, 300);
 		contentPane = new JPanel();
@@ -301,28 +295,6 @@ public class MetadataRemoveCols extends JFrame {
 					MetaOmGraph.getActiveProject().getMetadataHybrid().setCurrentHeaders(newHeaders);
 				}
 				getThisframe().dispose();
-				
-				
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "Sample Metadata Table");
-				HashMap<String,Object> dataMap = new HashMap<String,Object>();
-				
-				java.util.List<String> remlist = new ArrayList<>();
-				for (int i = 0; i < toKeep.length; i++) {
-					if (!toKeep[i]) {
-						remlist.add(headervals[i]);
-					}
-				}
-				
-				dataMap.put("removedColumns", remlist);
-				dataMap.put("remainingColumns", p.getHeaders());
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				resultLog.put("result", "OK");
-
-				ActionProperties removeColumnsAction = new ActionProperties("remove-table-columns",actionMap,null,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				removeColumnsAction.logActionProperties();
 			}
 		});
 
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataSplitcol.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataSplitcol.java
index 81dfee4..d21bc23 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataSplitcol.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataSplitcol.java
@@ -3,7 +3,6 @@ package edu.iastate.metnet.metaomgraph.ui;
 import java.awt.BorderLayout;
 import java.awt.EventQueue;
 
-import javax.swing.JFrame;
 import javax.swing.JPanel;
 import javax.swing.border.EmptyBorder;
 import javax.swing.plaf.ColorUIResource;
@@ -16,10 +15,10 @@ import edu.iastate.metnet.metaomgraph.MetadataCollection;
 
 import javax.swing.JLabel;
 import java.awt.FlowLayout;
-import javax.swing.SpringLayout;
 import javax.swing.WindowConstants;
 import javax.swing.JSplitPane;
 import javax.swing.JComboBox;
+import javax.swing.JDialog;
 import javax.swing.JTextField;
 import javax.swing.DefaultComboBoxModel;
 import javax.swing.JButton;
@@ -31,7 +30,6 @@ import java.awt.event.ItemListener;
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 
 import javax.swing.JScrollPane;
@@ -42,7 +40,7 @@ import javax.swing.JMenu;
 import java.awt.event.ActionListener;
 import java.awt.event.ActionEvent;
 
-public class MetadataSplitcol extends JFrame {
+public class MetadataSplitcol extends JDialog {
 
 	private JPanel contentPane;
 	private JTextField textField;
@@ -102,6 +100,7 @@ public class MetadataSplitcol extends JFrame {
 		if (this.obj != null) {
 			headers = this.obj.getHeaders();
 		}
+		setModal(true);
 		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
 		setBounds(100, 100, 450, 300);
 
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataTableDisplayPanel.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataTableDisplayPanel.java
index e5e49c5..06475fa 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataTableDisplayPanel.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataTableDisplayPanel.java
@@ -12,7 +12,6 @@ import java.awt.Point;
 import java.awt.Rectangle;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Date;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -33,8 +32,6 @@ import javax.swing.table.TableCellRenderer;
 import javax.swing.table.TableColumn;
 import javax.swing.table.TableRowSorter;
 
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 import org.dizitart.no2.Document;
 
 import edu.iastate.metnet.metaomgraph.AlphanumericComparator;
@@ -47,7 +44,6 @@ import edu.iastate.metnet.metaomgraph.Metadata.MetadataQuery;
 import edu.iastate.metnet.metaomgraph.chart.BarChart;
 import edu.iastate.metnet.metaomgraph.chart.BoxPlot;
 import edu.iastate.metnet.metaomgraph.chart.PlotRunsasSeries;
-import edu.iastate.metnet.metaomgraph.logging.ActionProperties;
 import edu.iastate.metnet.metaomgraph.utils.Utils;
 
 import javax.swing.DefaultCellEditor;
@@ -67,11 +63,9 @@ import java.beans.PropertyVetoException;
 import java.io.IOException;
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.text.SimpleDateFormat;
 import java.awt.event.ActionEvent;
 
 public class MetadataTableDisplayPanel extends JPanel {
-	
 	private JTable table;
 	private MetadataCollection obj;
 	private List<Document> metadata;
@@ -128,14 +122,23 @@ public class MetadataTableDisplayPanel extends JPanel {
 		JMenu mnFile = new JMenu("File");
 		menuBar.add(mnFile);
 
-		JMenuItem mntmExport = new JMenuItem("Export");
-		mntmExport.addActionListener(new ActionListener() {
+		JMenuItem exportToTextItem = new JMenuItem("Export to text file");
+		exportToTextItem.addActionListener(new ActionListener() {
 			@Override
 			public void actionPerformed(ActionEvent arg0) {
-				Utils.saveJTabletofile(table, "Metadata Table Panel");
+				Utils.saveJTabletofile(table);
 			}
 		});
-		mnFile.add(mntmExport);
+				
+		JMenuItem exportToExcelItem = new JMenuItem("Export to excel workbook");
+		exportToExcelItem.addActionListener(new ActionListener() {
+			@Override
+			public void actionPerformed(ActionEvent arg0) {
+				Utils.saveJTableToExcel(table);
+			}
+		});
+		mnFile.add(exportToTextItem);
+		mnFile.add(exportToExcelItem);
 
 		JMenuItem mntmNewProjectWith = new JMenuItem("New Project With Selected");
 
@@ -206,22 +209,6 @@ public class MetadataTableDisplayPanel extends JPanel {
 				JOptionPane.showMessageDialog(null, highlightedRows.size() + " rows matched the query", "Search result",
 						JOptionPane.INFORMATION_MESSAGE);
 				table.repaint();
-				
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "Sample Metadata Table");
-
-				HashMap<String,Object> dataMap = new HashMap<String,Object>();
-				dataMap.put("queries",queries);
-				dataMap.put("numHits", result.size());
-				
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				resultLog.put("result", "OK");
-
-				ActionProperties searchMetadataTableAction = new ActionProperties("search-metadata-table",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				searchMetadataTableAction.logActionProperties();
-				
 				// JOptionPane.showMessageDialog(null, "toH:"+toHighlight.toString());
 
 			}
@@ -234,17 +221,6 @@ public class MetadataTableDisplayPanel extends JPanel {
 			@Override
 			public void actionPerformed(ActionEvent e) {
 				clearLastSearchedRows();
-				
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "Sample Metadata Table");
-				
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				resultLog.put("result", "OK");
-
-				ActionProperties searchMetadataTableAction = new ActionProperties("clear-last-search",actionMap,null,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				searchMetadataTableAction.logActionProperties();
 
 			}
 		});
@@ -266,7 +242,6 @@ public class MetadataTableDisplayPanel extends JPanel {
 			@Override
 			public void actionPerformed(ActionEvent arg0) {
 				Object[] options = { "Remove", "Keep", "Cancel" };
-				HashMap<String,Object> dataMap = new HashMap<String,Object>();
 				JPanel optPanel = new JPanel();
 				optPanel.add(new JLabel("Remove or keep selected rows ?"));
 				int option = JOptionPane.showOptionDialog(null, optPanel, "Choose an option",
@@ -275,26 +250,10 @@ public class MetadataTableDisplayPanel extends JPanel {
 				if (option == JOptionPane.CANCEL_OPTION) {
 					return;
 				} else if (option == JOptionPane.YES_OPTION) {
-					dataMap.put("option", "remove");
 					filterSelectedRows(false);
 				} else if (option == JOptionPane.NO_OPTION) {
-					dataMap.put("option", "keep");
 					filterSelectedRows(true);
 				}
-				
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "Sample Metadata Table");
-
-				
-				dataMap.put("columns",selectColumn());
-				
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				resultLog.put("result", "OK");
-
-				ActionProperties filterSelectedRowsAction = new ActionProperties("filter-selected-rows",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				filterSelectedRowsAction.logActionProperties();
 
 			}
 		});
@@ -304,8 +263,6 @@ public class MetadataTableDisplayPanel extends JPanel {
 		mntmFilterLastSearched.addActionListener(new ActionListener() {
 			@Override
 			public void actionPerformed(ActionEvent arg0) {
-				
-				HashMap<String,Object> dataMap = new HashMap<String,Object>();
 				Object[] options = { "Remove", "Keep", "Cancel" };
 				JPanel optPanel = new JPanel();
 				optPanel.add(new JLabel("Remove or keep selected rows ?"));
@@ -316,29 +273,16 @@ public class MetadataTableDisplayPanel extends JPanel {
 					return;
 				} else if (option == JOptionPane.YES_OPTION) {
 					// remove highlighted rows
-					dataMap.put("option", "remove");
+
 					filterHighlightedRows(false);
 
 				} else if (option == JOptionPane.NO_OPTION) {
 					// keep highlighted rows
-					dataMap.put("option", "keep");
+
 					filterHighlightedRows(true);
 
 				}
 
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "Sample Metadata Table");
-
-				
-				dataMap.put("highlightedRows",highlightedRows);
-				
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				resultLog.put("result", "OK");
-
-				ActionProperties filterLastSearchAction = new ActionProperties("filter-last-search",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				filterLastSearchAction.logActionProperties();
 			}
 		});
 		mnByRow.add(mntmFilterLastSearched);
@@ -374,18 +318,6 @@ public class MetadataTableDisplayPanel extends JPanel {
 				MetaOmAnalyzer.updateExcluded(obj.getExcluded());
 				updateTable();
 				MetaOmGraph.getActiveTable().updateMetadataTree();
-				
-				
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "Sample Metadata Table");
-				
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				resultLog.put("result", "OK");
-
-				ActionProperties resetRowsAction = new ActionProperties("reset-metadata-table-rows",actionMap,null,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				resetRowsAction.logActionProperties();
 			}
 		});
 		mnByRow.add(mntmReset_1);
@@ -608,20 +540,6 @@ public class MetadataTableDisplayPanel extends JPanel {
 			@Override
 			public void actionPerformed(ActionEvent arg0) {
 				plotBarChart(selectColumn());
-				
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "Sample Metadata Table");
-
-				HashMap<String,Object> dataMap = new HashMap<String,Object>();
-				dataMap.put("columns",selectColumn());
-				
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				resultLog.put("result", "OK");
-
-				ActionProperties barChartMetadataTableAction = new ActionProperties("barchart-metadata-table",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				barChartMetadataTableAction.logActionProperties();
 				return;
 			}
 		});
@@ -683,19 +601,6 @@ public class MetadataTableDisplayPanel extends JPanel {
 					}
 				}.start();
 
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "Sample Metadata Table");
-
-				HashMap<String,Object> dataMap = new HashMap<String,Object>();
-				dataMap.put("data",getSelectDataColsName());
-				
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				resultLog.put("result", "OK");
-
-				ActionProperties boxplotMetadataTableAction = new ActionProperties("boxplot-metadata-table",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				boxplotMetadataTableAction.logActionProperties();
 			}
 		});
 		mntmAsSeries.addActionListener(new ActionListener() {
@@ -749,21 +654,6 @@ public class MetadataTableDisplayPanel extends JPanel {
 					MetaOmGraph.getActiveTable().selectNode(thisInd, false);
 				}
 				MetaOmGraph.tableToFront();
-				
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "Sample Metadata Table");
-				
-				HashMap<String,Object> dataMap = new HashMap<String,Object>();
-				dataMap.put("selectedNames",selectedNames);
-				
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				resultLog.put("result", "OK");
-
-				ActionProperties searchMetadataTableAction = new ActionProperties("switch-to-tree",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				searchMetadataTableAction.logActionProperties();
-				
 				// int
 				// thisInd=MetaOmGraph.getActiveProject().getMetadataHybrid().getColIndexbyName(thisSname);
 				// MetaOmGraph.getActiveTable().selectNode(thisInd,true);
@@ -776,25 +666,13 @@ public class MetadataTableDisplayPanel extends JPanel {
 		JMenu mnAnalyze = new JMenu("Analyze");
 		menuBar.add(mnAnalyze);
 
-		JMenuItem mntmCosineSililarity = new JMenuItem("Cosine similarity");
+		JMenuItem mntmCosineSililarity = new JMenuItem("Cosine sililarity");
 		mntmCosineSililarity.addActionListener(new ActionListener() {
 			@Override
 			public void actionPerformed(ActionEvent arg0) {
 				/**
 				 * select 2 or more runs and display the cosine simmilarity between them
 				 */
-				
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "Sample Metadata Table");
-				
-				HashMap<String,Object> dataMap = new HashMap<String,Object>();
-				dataMap.put("selectedGenes",table.getSelectedRows());
-				
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				
-				
 				new AnimatedSwingWorker("Working...", true) {
 					@Override
 					public Object construct() {
@@ -807,12 +685,6 @@ public class MetadataTableDisplayPanel extends JPanel {
 									if (table.getSelectedRows().length < 2) {
 										JOptionPane.showMessageDialog(null, "Please select at least two rows",
 												"Invalid selection", JOptionPane.ERROR_MESSAGE);
-										
-										resultLog.put("result", "Error");
-										resultLog.put("resultComments","Please select at least two rows" );
-
-										ActionProperties cosineSimilarityAction = new ActionProperties("cosine-similarity-metadata-table",actionMap,null,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-										cosineSimilarityAction.logActionProperties();
 										return;
 									}
 									/**
@@ -853,11 +725,6 @@ public class MetadataTableDisplayPanel extends JPanel {
 						return null;
 					}
 				}.start();
-				
-				resultLog.put("result", "OK");
-				
-				ActionProperties cosineSimilarityAction = new ActionProperties("cosine-similarity-metadata-table",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				cosineSimilarityAction.logActionProperties();
 			}
 		});
 		mnAnalyze.add(mntmCosineSililarity);
@@ -870,17 +737,6 @@ public class MetadataTableDisplayPanel extends JPanel {
 				/**
 				 * select 2 or more runs and display the pearson correlation between them
 				 */
-				
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "Sample Metadata Table");
-				
-				HashMap<String,Object> dataMap = new HashMap<String,Object>();
-				dataMap.put("selectedGenes",table.getSelectedRows());
-				
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				
 				new AnimatedSwingWorker("Working...", true) {
 					@Override
 					public Object construct() {
@@ -895,11 +751,6 @@ public class MetadataTableDisplayPanel extends JPanel {
 									if (table.getSelectedRows().length < 2) {
 										JOptionPane.showMessageDialog(null, "Please select at least two rows",
 												"Invalid selection", JOptionPane.ERROR_MESSAGE);
-										resultLog.put("result", "Error");
-										resultLog.put("resultComments","Please select at least two rows" );
-
-										ActionProperties pearsonCorrelationAction = new ActionProperties("pearson-correlation-metadata-table",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-										pearsonCorrelationAction.logActionProperties();
 										return;
 									}
 									HashMap<Integer, double[]> databyCols = getDataForSelectedDataCols();
@@ -938,11 +789,6 @@ public class MetadataTableDisplayPanel extends JPanel {
 						return null;
 					}
 				}.start();
-				
-				resultLog.put("result", "OK");
-
-				ActionProperties pearsonCorrelationAction = new ActionProperties("pearson-correlation-metadata-table",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				pearsonCorrelationAction.logActionProperties();
 			}
 		});
 		mnAnalyze.add(mntmPearsonCorrelation);
@@ -955,16 +801,6 @@ public class MetadataTableDisplayPanel extends JPanel {
 				/**
 				 * select 2 or more runs and display the spearman correlation between them
 				 */
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "Sample Metadata Table");
-				
-				HashMap<String,Object> dataMap = new HashMap<String,Object>();
-				dataMap.put("selectedGenes",table.getSelectedRows());
-				
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				
 				new AnimatedSwingWorker("Working...", true) {
 					@Override
 					public Object construct() {
@@ -979,11 +815,6 @@ public class MetadataTableDisplayPanel extends JPanel {
 									if (table.getSelectedRows().length < 2) {
 										JOptionPane.showMessageDialog(null, "Please select at least two rows",
 												"Invalid selection", JOptionPane.ERROR_MESSAGE);
-										resultLog.put("result", "Error");
-										resultLog.put("resultComments","Please select at least two rows" );
-
-										ActionProperties spearmanCorrelationAction = new ActionProperties("spearman-correlation-metadata-table",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-										spearmanCorrelationAction.logActionProperties();
 										return;
 									}
 									HashMap<Integer, double[]> databyCols = getDataForSelectedDataCols();
@@ -1023,10 +854,6 @@ public class MetadataTableDisplayPanel extends JPanel {
 					}
 				}.start();
 
-				resultLog.put("result", "OK");
-				
-				ActionProperties spearmanCorrelationAction = new ActionProperties("spearman-correlation-metadata-table",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				spearmanCorrelationAction.logActionProperties();
 			}
 		});
 		mnAnalyze.add(mntmSpearmanCorrelation);
@@ -1326,14 +1153,17 @@ public class MetadataTableDisplayPanel extends JPanel {
 				for (int i = 0; i < metadata.size(); i++) {
 					// create a temp string storing all col values for a row
 					String[] temp = new String[headers.length];
-					for (int j = 0; j < headers.length; j++) {
-
+					List<String> finalHeaders = new ArrayList<String>(Arrays.asList(headers));
+					if(obj.getRemoveCols() != null && !obj.getRemoveCols().isEmpty())
+						finalHeaders.removeAll(obj.getRemoveCols());
+					
+					for (int j = 0; j < finalHeaders.size(); j++) {
 						// add col name
 						if (i == 0) {
-							tablemodel.addColumn(headers[j]);
+							tablemodel.addColumn(finalHeaders.get(j));
 						}
 
-						temp[j] = metadata.get(i).get(headers[j]).toString();
+						temp[j] = metadata.get(i).get(finalHeaders.get(j)).toString();
 					}
 
 					// add ith row in table
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataTreeDisplayPanel.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataTreeDisplayPanel.java
index fbec0c2..2d70abe 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataTreeDisplayPanel.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/MetadataTreeDisplayPanel.java
@@ -8,9 +8,7 @@ import java.awt.Font;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.PrintWriter;
-import java.text.SimpleDateFormat;
 import java.util.ArrayList;
-import java.util.Date;
 import java.util.Enumeration;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -40,8 +38,6 @@ import javax.swing.tree.TreePath;
 import javax.swing.table.TableCellRenderer;
 import javax.swing.text.DefaultCaret;
 
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 import org.jdom.Element;
 import org.jdom.output.Format;
 import org.jdom.output.XMLOutputter;
@@ -55,7 +51,6 @@ import edu.iastate.metnet.metaomgraph.MetaOmGraph;
 import edu.iastate.metnet.metaomgraph.MetadataCollection;
 import edu.iastate.metnet.metaomgraph.MetadataHybrid;
 import edu.iastate.metnet.metaomgraph.Metadata.MetadataQuery;
-import edu.iastate.metnet.metaomgraph.logging.ActionProperties;
 import edu.iastate.metnet.metaomgraph.utils.Utils;
 
 import javax.swing.JLabel;
@@ -75,7 +70,6 @@ import javax.swing.JMenuItem;
  */
 
 public class MetadataTreeDisplayPanel extends JPanel {
-
 	private JTable table;
 	private JTree tree;
 	private JSplitPane splitPane;
@@ -137,7 +131,7 @@ public class MetadataTreeDisplayPanel extends JPanel {
 		this.dataColname = mdhobj.getDataColName();
 		// initialize table
 		table = new JTable();
-
+		
 		table.setAutoCreateRowSorter(true);
 		table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
 		table.setPreferredScrollableViewportSize(table.getPreferredSize());
@@ -155,7 +149,7 @@ public class MetadataTreeDisplayPanel extends JPanel {
 			}
 		};
 		table.setModel(model);
-
+		
 		// set alternate colors to table
 		table.setDefaultRenderer(Object.class, new TableCellRenderer() {
 			//private DefaultTableCellRenderer DEFAULT_RENDERER = new DefaultTableCellRenderer();
@@ -194,7 +188,7 @@ public class MetadataTreeDisplayPanel extends JPanel {
 		});
 		// table.getColumnModel().getColumn(0).setPreferredWidth(150);
 		// table.getColumnModel().getColumn(1).setPreferredWidth(800);
-
+		
 		// table.setForeground(Color.white);
 
 		// this.XMLroot = XMLroot;
@@ -230,39 +224,9 @@ public class MetadataTreeDisplayPanel extends JPanel {
 				res.setRootElement(xmlRootclone);
 				String resDoc = outter.outputString(res);
 
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				HashMap<String,Object> dataMap = new HashMap<String,Object>();
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-
 				try (PrintWriter out = new PrintWriter(file.getAbsolutePath())) {
 					out.println(resDoc);
-
-					actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-					dataMap.put("filePath",file.getAbsolutePath());
-					dataMap.put("section","Sample Metadata Tree");
-					resultLog.put("result", "OK");
-
-					ActionProperties exportXMLAction = new ActionProperties("export-xml",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-					exportXMLAction.logActionProperties();
 				} catch (FileNotFoundException e) {
-
-					actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-					dataMap.put("section","Sample Metadata Tree");
-					resultLog.put("result", "Error");
-					resultLog.put("result", "File not found");
-
-					ActionProperties exportXMLAction = new ActionProperties("export-xml",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-					exportXMLAction.logActionProperties();
-				}
-				catch(Exception e) {
-					actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-					dataMap.put("section","Sample Metadata Tree");
-					resultLog.put("result", "Error");
-					resultLog.put("result", "Other Exception");
-
-					ActionProperties exportXMLAction = new ActionProperties("export-xml",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-					exportXMLAction.logActionProperties();
 				}
 
 			}
@@ -276,32 +240,11 @@ public class MetadataTreeDisplayPanel extends JPanel {
 		mntmSearch.addActionListener(new ActionListener() {
 			@Override
 			public void actionPerformed(ActionEvent arg0) {
-				QueryResults qr = getQueryResults("Metadata Search");
-				List<String> result = qr.getFresults();
-				MetadataQuery[] queries = qr.getFqueries();
-				
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "Sample Metadata Tree");
-				
-				HashMap<String,Object> dataMap = new HashMap<String,Object>();
-				dataMap.put("queries",queries);
-				dataMap.put("numHits", result.size());
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				resultLog.put("result", "OK");
-				
+				List<String> result = getQueryResults("Metadata Search");
 				if (result == null || result.size() < 1 || result.get(0).equals("NULL")) {
 					JOptionPane.showMessageDialog(null, "No hits found", "No hits", JOptionPane.INFORMATION_MESSAGE);
-					resultLog.put("result", "Error");
-					resultLog.put("resultComments", "No hits found");
-					ActionProperties searchMetadataTreeAction = new ActionProperties("search-metadata-tree",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-					searchMetadataTreeAction.logActionProperties();
 					return;
 				}
-				
-				ActionProperties searchMetadataTreeAction = new ActionProperties("search-metadata-tree",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				searchMetadataTreeAction.logActionProperties();
 
 				expandNodes(result);
 
@@ -314,17 +257,6 @@ public class MetadataTreeDisplayPanel extends JPanel {
 			@Override
 			public void actionPerformed(ActionEvent e) {
 				toHighlightNodes = new ArrayList<>();
-
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "Sample Metadata Tree");
-
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				resultLog.put("result", "OK");
-
-				ActionProperties clearSearchMetadataTreeAction = new ActionProperties("clear-search-metadata-tree",actionMap,null,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				clearSearchMetadataTreeAction.logActionProperties();
 			}
 		});
 		mnSearch_1.add(mntmClearLastSearch);
@@ -338,27 +270,9 @@ public class MetadataTreeDisplayPanel extends JPanel {
 		mntmByMetadata.addActionListener(new ActionListener() {
 			@Override
 			public void actionPerformed(ActionEvent arg0) {
-				QueryResults qr = getQueryResults("Filter by Metadata"); 
-				List<String> result = qr.getFresults();
-				MetadataQuery[] queries = qr.getFqueries();
-				
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "Sample Metadata Tree");
-				HashMap<String,Object> dataMap = new HashMap<String,Object>();
-				dataMap.put("queries",queries);
-				
-				dataMap.put("numHits", result.size());
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				resultLog.put("result", "OK");
-				
+				List<String> result = getQueryResults("Filter by Metadata");
 				if (result == null || result.size() < 1 || result.get(0).equals("NULL")) {
 					JOptionPane.showMessageDialog(null, "No hits found", "No hits", JOptionPane.INFORMATION_MESSAGE);
-					resultLog.put("result", "Error");
-					resultLog.put("resultComments", "No hits found");
-					ActionProperties filterMetadataTreeAction = new ActionProperties("filter-metadata-tree",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-					filterMetadataTreeAction.logActionProperties();
 					return;
 				}
 
@@ -381,17 +295,6 @@ public class MetadataTreeDisplayPanel extends JPanel {
 					List<String> result2 = obj.invertSelectedDataCols(result);
 					filterXMLRoot(result2);
 				}
-				
-				if (option == JOptionPane.YES_OPTION) {
-					dataMap.put("keepOrRemove", "remove");
-				}
-				else if (option == JOptionPane.NO_OPTION) {
-					dataMap.put("keepOrRemove", "keep");
-				}
-				
-				ActionProperties filterMetadataTreeAction = new ActionProperties("filter-metadata-tree",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				filterMetadataTreeAction.logActionProperties();
-				
 			}
 		});
 		mnFilter.add(mntmByMetadata);
@@ -403,16 +306,6 @@ public class MetadataTreeDisplayPanel extends JPanel {
 				// update excluded included
 				obj.resetRowFilter();
 				updateTree();
-				
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "Sample Metadata Tree");
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				resultLog.put("result", "OK");
-				
-				ActionProperties resetTreeAction = new ActionProperties("reset-metadata-tree",actionMap,null,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				resetTreeAction.logActionProperties();
 			}
 		});
 		mnFilter.add(mntmReset);
@@ -425,31 +318,15 @@ public class MetadataTreeDisplayPanel extends JPanel {
 			@Override
 			public void actionPerformed(ActionEvent e) {
 				// get current selected node
-				
-				//Harsha - reproducibility log
-				HashMap<String,Object> actionMap = new HashMap<String,Object>();
-				actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-				actionMap.put("section", "Sample Metadata Tree");
-				HashMap<String,Object> resultLog = new HashMap<String,Object>();
-				resultLog.put("result", "OK");
-				
 				DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
 				if (node == null) {
 					JOptionPane.showMessageDialog(null, "No node selected", "Please selcet a node",
 							JOptionPane.ERROR_MESSAGE);
-					
-					resultLog.put("result", "Error");
-					resultLog.put("resultComments", "No node selected.Please selcet a node");
-					ActionProperties resetTreeAction = new ActionProperties("switch-to-table",actionMap,null,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-					resetTreeAction.logActionProperties();
 					return;
 				}
 
 				// search anyfield in the metadata table that matched node name and highlight it
 				MetaOmGraph.getActiveTable().selecTabRow(node.toString());
-				
-				ActionProperties resetTreeAction = new ActionProperties("switch-to-table",actionMap,null,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				resetTreeAction.logActionProperties();
 
 			}
 		});
@@ -905,7 +782,7 @@ public class MetadataTreeDisplayPanel extends JPanel {
 	 * 
 	 * @return
 	 */
-	public QueryResults getQueryResults(String title) {
+	public List<String> getQueryResults(String title) {
 		final TreeSearchQueryConstructionPanel tsp = new TreeSearchQueryConstructionPanel(
 				MetaOmGraph.getActiveProject(), false);
 		final MetadataQuery[] queries;
@@ -939,8 +816,7 @@ public class MetadataTreeDisplayPanel extends JPanel {
 
 		}.start();
 
-		QueryResults searchResult = new QueryResults(result,queries);
-		return searchResult;
+		return result;
 
 	}
 
@@ -997,48 +873,22 @@ public class MetadataTreeDisplayPanel extends JPanel {
 			setLineWrap(true);
 			setWrapStyleWord(true);
 			DefaultCaret caret = (DefaultCaret) getCaret();
-			caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
+		    caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
 		}
 
 		@Override
 		public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,
 				int row, int column) {
-
+			
 			setText(value.toString());
 			setSize(table.getColumnModel().getColumn(column).getWidth(), getPreferredSize().height);
 			setFont(new Font("Tahoma", 0, 11));
 			if (table.getRowHeight(row) != getPreferredSize().height) {
 				table.setRowHeight(row, getPreferredSize().height);
 			}
-
+						
 			return this;
 		}
 	}
 
 }
-
-class QueryResults{
-	private List<String> fresults;
-	private MetadataQuery[] fqueries;
-	
-	
-	public QueryResults(List<String> fresults, MetadataQuery[] fqueries) {
-		super();
-		this.fresults = fresults;
-		this.fqueries = fqueries;
-	}
-	public List<String> getFresults() {
-		return fresults;
-	}
-	public void setFresults(List<String> fresults) {
-		this.fresults = fresults;
-	}
-	public MetadataQuery[] getFqueries() {
-		return fqueries;
-	}
-	public void setFqueries(MetadataQuery[] fqueries) {
-		this.fqueries = fqueries;
-	}
-	
-	
-}
\ No newline at end of file
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/Metadataviewer.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/Metadataviewer.java
index b79f092..57c40ed 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/Metadataviewer.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/Metadataviewer.java
@@ -14,6 +14,7 @@ import javax.swing.JButton;
 import javax.swing.JCheckBox;
 import javax.swing.JColorChooser;
 import javax.swing.JComboBox;
+import javax.swing.JDialog;
 import javax.swing.JFrame;
 import javax.swing.JLabel;
 import javax.swing.JMenu;
@@ -41,7 +42,7 @@ import javax.swing.table.TableModel;
 import javax.swing.table.TableRowSorter;
 
 //this class is used to display the tabular metadata
-public class Metadataviewer extends JFrame implements ActionListener {
+public class Metadataviewer extends JDialog implements ActionListener {
 
 	private List<Document> metadata = null;
 	private String[] headers = null;
@@ -55,6 +56,7 @@ public class Metadataviewer extends JFrame implements ActionListener {
 		// TODO Auto-generated constructor stub
 		// metadataColl = MetaOmGraph.getActiveProject().returnCollection();
 		this.setLayout(new BorderLayout());
+		this.setModal(true);
 		this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
 		this.setTitle("Metadata Viewer Main");
 		this.setJMenuBar(createmenubar());
@@ -73,6 +75,7 @@ public class Metadataviewer extends JFrame implements ActionListener {
 	//this is called inside MOG
 	public Metadataviewer(String title) {
 		// TODO Auto-generated constructor stub
+		this.setModal(true);
 		this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
 		this.setTitle("Metadata Viewer");
 		this.setJMenuBar(createmenubar());
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/NewProjectDialog.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/NewProjectDialog.java
index d5194c1..aa1d4e1 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/NewProjectDialog.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/NewProjectDialog.java
@@ -23,11 +23,8 @@ import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
 import java.nio.charset.StandardCharsets;
 import java.text.ParseException;
-import java.text.SimpleDateFormat;
 import java.util.ArrayList;
-import java.util.Date;
 import java.util.Enumeration;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Vector;
 
@@ -62,10 +59,8 @@ import edu.iastate.metnet.metaomgraph.GraphFileFilter;
 import edu.iastate.metnet.metaomgraph.MetaOmGraph;
 import edu.iastate.metnet.metaomgraph.MetadataCollection;
 import edu.iastate.metnet.metaomgraph.RandomAccessFile;
-import edu.iastate.metnet.metaomgraph.logging.ActionProperties;
 import edu.iastate.metnet.metaomgraph.utils.MetNetUtils;
 import edu.iastate.metnet.metaomgraph.utils.Utils;
-import org.apache.logging.log4j.Logger;
 
 public class NewProjectDialog extends JDialog implements ActionListener, ItemListener {
 
@@ -493,21 +488,14 @@ public class NewProjectDialog extends JDialog implements ActionListener, ItemLis
 
 	// action for OK button
 	public void doOK() {
-		
-		HashMap<String,Object> resultMap = new HashMap<String,Object>();
-		
 		if (sourceField.getText().equals("")) {
 			JOptionPane.showMessageDialog(this, "You must choose a source data file!", "Error",
 					JOptionPane.ERROR_MESSAGE);
-			resultMap.put("result", "Error");
-			resultMap.put("resultComments", "You must choose a source data file!");
 			return;
 		}
 		if ((infoColumnSpinner.getValue() == null) || (((Integer) infoColumnSpinner.getValue()).intValue() < 0)) {
 			JOptionPane.showMessageDialog(this, "You must enter the number of information columns!", "Error",
 					JOptionPane.ERROR_MESSAGE);
-			resultMap.put("result", "Error");
-			resultMap.put("resultComments", "You must enter the number of information columns!");
 			return;
 		}
 		Enumeration enumer = delimiterGroup.getElements();
@@ -537,8 +525,6 @@ public class NewProjectDialog extends JDialog implements ActionListener, ItemLis
 		File source = new File(sourceField.getText());
 		if (!source.exists()) {
 			JOptionPane.showMessageDialog(this, "Invalid source file!", "Error", JOptionPane.ERROR_MESSAGE);
-			resultMap.put("result", "Error");
-			resultMap.put("resultComments", "Invalid source file!");
 			return;
 		}
 		dispose();
@@ -567,7 +553,6 @@ public class NewProjectDialog extends JDialog implements ActionListener, ItemLis
 						"It looks like you've imported some " + "gene IDs.\nWould you "
 								+ "like to automatically add additional " + "gene information as well?",
 						"Gene IDs detected", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
-				
 				makeLocus = (result == JOptionPane.YES_OPTION);
 			}
 			if (makeLocus) {
@@ -645,31 +630,6 @@ public class NewProjectDialog extends JDialog implements ActionListener, ItemLis
 		if (!infoField2.getText().equals("")) {
 			csvFlag = 1;
 		}
-		
-		
-		HashMap<String,Object> actionMap = new HashMap<String,Object>();
-		actionMap.put("parent",-1);
-		
-		HashMap<String,Object> dataMap = new HashMap<String,Object>();
-		dataMap.put("dataFile", sourceField.getText());
-		dataMap.put("metaDataFile", infoField2.getText());
-		dataMap.put("numInfoCols", (Integer) infoColumnSpinner.getValue());
-		dataMap.put("dataFileDelimiter", delimiter);
-		dataMap.put("metaDataDelimiter", metadatadelimiter);
-		dataMap.put("containsBlankValues", allowBlanksBox.isSelected());
-		dataMap.put("replaceBlanks", replaceBlanksButton.isSelected());
-		
-		if(allowBlanksBox.isSelected()) {
-			dataMap.put("ignoreBlanks", ignoreBlanksButton.isSelected());
-			if(ignoreBlanksButton.isSelected()==false)
-				dataMap.put("treatBlanksAs", blankValueField.getText());
-		}
-		
-		resultMap.put("result", "OK");
-		resultMap.put("userComments", "");
-		
-		ActionProperties createProjectAction = new ActionProperties("create-project",actionMap,dataMap,resultMap,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-		createProjectAction.logActionProperties();
 	}
 
 	// action for OK button
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ReadMetadata.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ReadMetadata.java
index d437aa3..fcf8e52 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ReadMetadata.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ReadMetadata.java
@@ -3,7 +3,6 @@ package edu.iastate.metnet.metaomgraph.ui;
 import java.awt.BorderLayout;
 import java.awt.EventQueue;
 
-import javax.swing.JFrame;
 import javax.swing.JPanel;
 import javax.swing.border.EmptyBorder;
 import javax.swing.JMenuBar;
@@ -17,6 +16,7 @@ import java.awt.FlowLayout;
 import javax.swing.JTextField;
 import javax.swing.ScrollPaneConstants;
 import javax.swing.JComboBox;
+import javax.swing.JDialog;
 import java.awt.event.ActionListener;
 import java.io.File;
 import java.io.IOException;
@@ -49,7 +49,7 @@ import java.awt.ComponentOrientation;
 import javax.swing.DefaultComboBoxModel;
 import java.awt.Dimension;
 
-public class ReadMetadata extends JFrame {
+public class ReadMetadata extends JDialog {
 
 	private JPanel contentPane;
 	private JTextField textField;
@@ -136,6 +136,7 @@ public class ReadMetadata extends JFrame {
 	 */
 	public ReadMetadata() {
 		this.toFront();
+		setModal(true);
 		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
 		setBounds(100, 100, 450, 300);
 		comboBox_1 = new JComboBox();
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ReproducibilityDashboardPanel - Copy (2).java.bkp b/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ReproducibilityDashboardPanel - Copy (2).java.bkp
deleted file mode 100644
index 3a9b58a..0000000
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ReproducibilityDashboardPanel - Copy (2).java.bkp	
+++ /dev/null
@@ -1,672 +0,0 @@
-package edu.iastate.metnet.metaomgraph.ui;
-
-import java.awt.Color;
-import java.awt.Container;
-import java.awt.FlowLayout;
-import java.awt.GridBagConstraints;
-import java.awt.GridBagLayout;
-
-import javax.swing.JButton;
-import javax.swing.JDialog;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JScrollPane;
-import javax.swing.JSeparator;
-import javax.swing.JTextArea;
-import javax.swing.JTextField;
-import javax.swing.JTextPane;
-import javax.swing.SpringLayout;
-import java.awt.Insets;
-import net.miginfocom.swing.MigLayout;
-import java.awt.event.ActionListener;
-import java.awt.event.MouseAdapter;
-import java.awt.event.MouseEvent;
-import java.io.File;
-import java.io.IOException;
-import java.nio.file.Files;
-import java.text.SimpleDateFormat;
-import java.util.Collection;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.awt.event.ActionEvent;
-import javax.swing.SwingConstants;
-import javax.swing.JScrollBar;
-import javax.swing.JRadioButton;
-import java.awt.BorderLayout;
-import javax.swing.JTabbedPane;
-import javax.swing.JEditorPane;
-import javax.swing.JFileChooser;
-
-import java.awt.SystemColor;
-import javax.swing.JSplitPane;
-import javax.swing.JList;
-import javax.swing.AbstractListModel;
-import javax.swing.ButtonGroup;
-import javax.swing.Icon;
-import javax.swing.ImageIcon;
-import javax.swing.JTree;
-import javax.swing.tree.DefaultTreeModel;
-import javax.swing.tree.TreePath;
-
-import org.apache.logging.log4j.Level;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.core.LoggerContext;
-import org.apache.logging.log4j.core.config.Configuration;
-import org.apache.logging.log4j.core.config.LoggerConfig;
-
-import com.google.gson.Gson;
-
-import edu.iastate.metnet.metaomgraph.MetaOmGraph;
-import edu.iastate.metnet.metaomgraph.logging.ActionProperties;
-import edu.iastate.metnet.metaomgraph.logging.LoggingTreeNode;
-
-import javax.swing.tree.DefaultMutableTreeNode;
-import javax.swing.tree.DefaultTreeCellRenderer;
-import javax.swing.JTable;
-import javax.swing.table.DefaultTableModel;
-import javax.swing.ScrollPaneConstants;
-import javax.swing.JDesktopPane;
-import javax.swing.JInternalFrame;
-
-public class ReproducibilityDashboardPanel extends JPanel {
-
-	/*Harsha- Added logger */
-
-	private static final Logger logger = MetaOmGraph.logger;
-
-	JButton commentButton;
-	private JLabel lblNewLabel;
-	private final JButton btnSubmit = new JButton("submit");
-	private JSeparator separator;
-	private JPanel panel;
-	private JButton btnNewButton;
-	private JButton btnNewButton_1;
-	private JButton btnNewButton_2;
-	private JSeparator separator_1;
-	private JPanel panel_1;
-	private JLabel lblNewLabel_1;
-	private JRadioButton rdbtnNewRadioButton;
-	private JRadioButton rdbtnNewRadioButton_1;
-	private JTabbedPane tabbedPane;
-	private JSeparator separator_2;
-	private JRadioButton rdbtnPermanentlySwitchedOff;
-	private JLabel lblNewLabel_2;
-
-	private MetaOmGraph project;
-	private JScrollPane scrollPane;
-	private JTextArea textArea;
-
-	private ActionProperties [] APFromGson;
-	private HashMap<Integer,DefaultMutableTreeNode> treeStructure;
-	private JSplitPane splitPane;
-	private JScrollPane scrollPane_1;
-	private JTree playTree;
-	private JScrollPane scrollPane_2;
-	private JTable table;
-	
-	public ReproducibilityDashboardPanel(MetaOmGraph myself) {
-
-		project = myself;
-		
-		treeStructure = new HashMap<Integer,DefaultMutableTreeNode>();
-		
-		GridBagLayout gridBagLayout = new GridBagLayout();
-		gridBagLayout.columnWidths = new int[]{280, 220, 0};
-		gridBagLayout.rowHeights = new int[]{47, 20, 0, 40, 33, 13, 0, 90, 13, 0};
-		gridBagLayout.columnWeights = new double[]{0.0, 0.0, Double.MIN_VALUE};
-		gridBagLayout.rowWeights = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, Double.MIN_VALUE};
-		setLayout(gridBagLayout);
-
-		panel_1 = new JPanel();
-		panel_1.setBackground(SystemColor.control);
-		GridBagConstraints gbc_panel_1 = new GridBagConstraints();
-		gbc_panel_1.gridwidth = 2;
-		gbc_panel_1.insets = new Insets(0, 0, 5, 0);
-		gbc_panel_1.fill = GridBagConstraints.HORIZONTAL;
-		gbc_panel_1.gridx = 0;
-		gbc_panel_1.gridy = 0;
-		add(panel_1, gbc_panel_1);
-
-		lblNewLabel_1 = new JLabel("logging : ");
-		panel_1.add(lblNewLabel_1);
-
-		ButtonGroup G = new ButtonGroup();
-
-		rdbtnNewRadioButton = new JRadioButton("on");
-		rdbtnNewRadioButton.setSelected(true);
-		panel_1.add(rdbtnNewRadioButton);
-
-		rdbtnNewRadioButton_1 = new JRadioButton("off");
-		panel_1.add(rdbtnNewRadioButton_1);
-
-		rdbtnPermanentlySwitchedOff = new JRadioButton("permanently switched off");
-		panel_1.add(rdbtnPermanentlySwitchedOff);
-		
-		rdbtnNewRadioButton.addActionListener(new ActionListener() {
-	        @Override
-	        public void actionPerformed(ActionEvent e) {
-	            //MetaOmGraph.getReproducibilityLogMenu().setText("logging on");
-	        	MetaOmGraph.getReproducibilityLogMenu().setForeground(Color.BLUE);
-	        	LoggerContext context = (LoggerContext) LogManager.getContext(false);
-	    		Configuration configuration = context.getConfiguration();
-	    		LoggerConfig loggerConfig = configuration.getLoggerConfig("reproducibilityLogger"); 
-	    		loggerConfig.setLevel(Level.DEBUG);
-	    		context.updateLoggers();
-
-	        }
-	    });
-	    
-		rdbtnNewRadioButton_1.addActionListener(new ActionListener() {
-	        @Override
-	        public void actionPerformed(ActionEvent e) {
-//	        	 MetaOmGraph.getReproducibilityLogMenu().setText("logging off");
-//	        	 MetaOmGraph.getReproducibilityLogMenu().setForeground(Color.BLACK);
-	        	MetaOmGraph.getReproducibilityLogMenu().setForeground(Color.BLACK);
-	        	LoggerContext context = (LoggerContext) LogManager.getContext(false);
-	    		Configuration configuration = context.getConfiguration();
-	    		LoggerConfig loggerConfig = configuration.getLoggerConfig("reproducibilityLogger"); 
-	    		loggerConfig.setLevel(Level.OFF);
-	    		context.updateLoggers();
-
-	        }
-	    });
-	    
-		rdbtnPermanentlySwitchedOff.addActionListener(new ActionListener() {
-	        @Override
-	        public void actionPerformed(ActionEvent e) {
-//	        	 MetaOmGraph.getReproducibilityLogMenu().setText("logging off");
-//	        	 MetaOmGraph.getReproducibilityLogMenu().setForeground(Color.BLACK);
-
-	        }
-	    });
-
-		G.add(rdbtnNewRadioButton);
-		G.add(rdbtnNewRadioButton_1);
-		G.add(rdbtnPermanentlySwitchedOff);
-		
-		
-
-		separator_1 = new JSeparator();
-		GridBagConstraints gbc_separator_1 = new GridBagConstraints();
-		gbc_separator_1.fill = GridBagConstraints.HORIZONTAL;
-		gbc_separator_1.gridwidth = 2;
-		gbc_separator_1.insets = new Insets(0, 0, 5, 0);
-		gbc_separator_1.gridx = 0;
-		gbc_separator_1.gridy = 1;
-		add(separator_1, gbc_separator_1);
-
-		lblNewLabel = new JLabel("Add a comment to the current session");
-		GridBagConstraints gbc_lblNewLabel = new GridBagConstraints();
-		gbc_lblNewLabel.anchor = GridBagConstraints.WEST;
-		gbc_lblNewLabel.insets = new Insets(0, 0, 5, 5);
-		gbc_lblNewLabel.gridx = 0;
-		gbc_lblNewLabel.gridy = 2;
-		add(lblNewLabel, gbc_lblNewLabel);
-		GridBagConstraints gbc_btnSubmit = new GridBagConstraints();
-		gbc_btnSubmit.anchor = GridBagConstraints.WEST;
-		gbc_btnSubmit.fill = GridBagConstraints.VERTICAL;
-		gbc_btnSubmit.insets = new Insets(0, 0, 5, 5);
-		gbc_btnSubmit.gridx = 0;
-		gbc_btnSubmit.gridy = 4;
-		btnSubmit.setForeground(Color.BLACK);
-		btnSubmit.addActionListener(new ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-
-				//Harsha - reproducibility log
-				HashMap<String,Object> dataParameters = new HashMap<String,Object>();
-				dataParameters.put("comment",textArea.getText());
-
-				HashMap<String,Object> result = new HashMap<String,Object>();
-				result.put("result", "OK");
-				ActionProperties userCommentAction = new ActionProperties("user-comment",null,dataParameters,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				userCommentAction.logActionProperties(logger);
-
-				lblNewLabel_2.setText("Comment logged Successfully");
-				textArea.setText("");
-			}
-		});
-
-		scrollPane = new JScrollPane();
-		GridBagConstraints gbc_scrollPane = new GridBagConstraints();
-		gbc_scrollPane.gridwidth = 2;
-		gbc_scrollPane.insets = new Insets(0, 0, 5, 0);
-		gbc_scrollPane.fill = GridBagConstraints.BOTH;
-		gbc_scrollPane.gridx = 0;
-		gbc_scrollPane.gridy = 3;
-		add(scrollPane, gbc_scrollPane);
-
-		textArea = new JTextArea();
-		scrollPane.setViewportView(textArea);
-		btnSubmit.setBackground(Color.BLUE);
-		add(btnSubmit, gbc_btnSubmit);
-
-		lblNewLabel_2 = new JLabel("");
-		lblNewLabel_2.setForeground(Color.BLUE);
-		GridBagConstraints gbc_lblNewLabel_2 = new GridBagConstraints();
-		gbc_lblNewLabel_2.insets = new Insets(0, 0, 5, 0);
-		gbc_lblNewLabel_2.gridx = 1;
-		gbc_lblNewLabel_2.gridy = 4;
-		add(lblNewLabel_2, gbc_lblNewLabel_2);
-
-		separator_2 = new JSeparator();
-		GridBagConstraints gbc_separator_2 = new GridBagConstraints();
-		gbc_separator_2.fill = GridBagConstraints.HORIZONTAL;
-		gbc_separator_2.gridwidth = 2;
-		gbc_separator_2.insets = new Insets(0, 0, 5, 0);
-		gbc_separator_2.gridx = 0;
-		gbc_separator_2.gridy = 5;
-		add(separator_2, gbc_separator_2);
-
-		panel = new JPanel();
-		panel.setBackground(SystemColor.inactiveCaptionBorder);
-		GridBagConstraints gbc_panel = new GridBagConstraints();
-		gbc_panel.anchor = GridBagConstraints.WEST;
-		gbc_panel.gridwidth = 2;
-		gbc_panel.insets = new Insets(0, 0, 5, 0);
-		gbc_panel.gridx = 0;
-		gbc_panel.gridy = 6;
-		add(panel, gbc_panel);
-
-		btnNewButton = new JButton("open previous session");
-		btnNewButton.addActionListener(new ActionListener() {
-			public void actionPerformed(ActionEvent arg0) {
-
-				JFileChooser jfc = new JFileChooser();
-				jfc.setDialogTitle("open previous session log");
-				jfc.setCurrentDirectory(myself.getActiveProject().getSourceFile());
-				int retValue = jfc.showOpenDialog(myself.getMainWindow());
-
-				if(retValue == JFileChooser.APPROVE_OPTION) {
-					File file = jfc.getSelectedFile();
-					readLogAndPopulateTree(file);
-				}
-			}
-		});
-		panel.add(btnNewButton);
-
-		btnNewButton_1 = new JButton("play");
-		btnNewButton_1.addActionListener(new ActionListener() {
-			public void actionPerformed(ActionEvent arg0) {
-			
-				
-				DefaultMutableTreeNode node = (DefaultMutableTreeNode)
-						playTree.getLastSelectedPathComponent();
-				
-				
-
-				if (node == null)
-					//Nothing is selected.     
-					return;
-
-				Object nodeInfo = node.getUserObject();
-
-				LoggingTreeNode ltn = (LoggingTreeNode) nodeInfo;
-				
-				
-				if(ltn.getNodeName().equalsIgnoreCase("line-chart")) {
-	
-					int val2[] = null;
-					
-					Map<String,String> genes = (Map<String,String>)APFromGson[ltn.getNodeNumber()].getDataParameters().get("selectedGenes");
-					
-					Set<String> colnum = genes.keySet();
-					
-					Integer [] val = new Integer[colnum.size()];
-					
-					
-					
-					
-					try {
-					int j = 0;
-				      for (String i: colnum) {
-				         val[j++] = Integer.parseInt(i);
-				      }
-				      
-					}
-					catch(Exception e) {
-						JDialog jd = new JDialog();
-						JTextPane jt = new JTextPane();
-						jt.setText(e.getMessage());
-						jt.setBounds(10, 10, 300, 100);
-						jd.getContentPane().add(jt);
-						jd.setBounds(100, 100, 500, 200);
-						jd.setVisible(true);
-					}
-					
-					val2 = new int[val.length];
-					
-					
-					
-					for (int i=0;i<val.length;i++) {
-						val2[i] = val[i];
-					}
-					
-					
-					
-//					JDialog jd = new JDialog();
-//					JTextPane jt = new JTextPane();
-//					jt.setText(val2[0]+" "+val2[1]);
-//					jt.setBounds(10, 10, 300, 100);
-//					jd.getContentPane().add(jt);
-//					jd.setBounds(100, 100, 500, 200);
-//					jd.setVisible(true);
-					
-					MetaOmTablePanel mp = MetaOmGraph.getActiveTablePanel();
-					mp.graphLoggedRows(val2);
-					
-					
-				}
-				
-			}
-		});
-		btnNewButton_1.setIcon(new ImageIcon(project.getClass().getResource("/resource/loggingicons/play_alt-512.png")));
-		panel.add(btnNewButton_1);
-
-//		btnNewButton_2 = new JButton("play entire session");
-//		btnNewButton_2.setIcon(new ImageIcon(project.getClass().getResource("/resource/loggingicons/playall.png")));
-//		btnNewButton_2.addActionListener(new ActionListener() {
-//			public void actionPerformed(ActionEvent e) {
-//			}
-//		});
-//		//btnNewButton_2.setIcon(new ImageIcon(project.getClass().getResource("/resource/loggingicons/openlogbutton.png")));
-//		panel.add(btnNewButton_2);
-
-		
-		tabbedPane = new JTabbedPane(JTabbedPane.TOP);
-		
-		GridBagConstraints gbc_tabbedPane = new GridBagConstraints();
-		gbc_tabbedPane.gridwidth = 2;
-		gbc_tabbedPane.insets = new Insets(0, 0, 5, 0);
-		gbc_tabbedPane.fill = GridBagConstraints.BOTH;
-		gbc_tabbedPane.gridx = 0;
-		gbc_tabbedPane.gridy = 7;
-		add(tabbedPane, gbc_tabbedPane);
-		
-		splitPane = new JSplitPane();
-		splitPane.setResizeWeight(0.4);
-		tabbedPane.addTab("New tab", null, splitPane, null);
-		tabbedPane.addTab("Second tab", null, null, null);
-		
-		scrollPane_1 = new JScrollPane();
-		splitPane.setLeftComponent(scrollPane_1);
-		
-		playTree = new JTree();
-		playTree.setModel(new DefaultTreeModel(
-			new DefaultMutableTreeNode("Current Session") {
-				{
-				}
-			}
-		));
-		scrollPane_1.setViewportView(playTree);
-		
-		scrollPane_2 = new JScrollPane();
-		splitPane.setRightComponent(scrollPane_2);
-		
-		table = new JTable();
-		table.setModel(new DefaultTableModel(
-			new Object[][] {
-				{null, null},
-				{null, null},
-				{null, null},
-				{null, null},
-				{null, null},
-				{null, null},
-				{null, null},
-				{null, null},
-				{null, null},
-			},
-			new String[] {
-				"Property", "Value"
-			}
-		));
-		scrollPane_2.setViewportView(table);
-		Icon closedIcon = new ImageIcon(project.getClass().getResource("/resource/loggingicons/chart.png"));
-		Icon openIcon = new ImageIcon(project.getClass().getResource("/resource/loggingicons/chart.png"));
-		Icon leafIcon = new ImageIcon(project.getClass().getResource("/resource/loggingicons/chart.png"));
-		
-		
-		
-		playTree.addMouseListener(new MouseAdapter() {
-			public void mouseClicked(MouseEvent me) {
-
-				
-				
-				DefaultMutableTreeNode node = (DefaultMutableTreeNode)
-						playTree.getLastSelectedPathComponent();
-
-				if (node == null)
-					//Nothing is selected.     
-					return;
-
-				Object nodeInfo = node.getUserObject();
-
-				LoggingTreeNode ltn = (LoggingTreeNode) nodeInfo;
-				
-				
-
-				Object [][] tableObj = new Object[100][2];
-				tableObj[0][0] = "<html><b>Action Command</b></html>";
-				tableObj[0][1] = APFromGson[ltn.getNodeNumber()].getActionCommand();
-				
-				int num = 2;
-				int num1 = 2;
-				int num2 = 2;
-				if(APFromGson[ltn.getNodeNumber()].getActionParameters() != null && APFromGson[ltn.getNodeNumber()].getActionParameters().size() > 0) {
-				tableObj[2][0] = "<html><b>Action Parameters</b></html>";
-				num = 3;
-				for (Map.Entry<String,Object> entry : APFromGson[ltn.getNodeNumber()].getActionParameters().entrySet()) {
-					tableObj[num][0]=entry.getKey();
-					
-					if (entry.getValue() instanceof List<?>){
-						List<String> actionList = (List<String>) entry.getValue();
-						for(int i=0;i<actionList.size();i++) {
-							tableObj[num][1]=actionList.get(i);
-							num++;
-						}
-					}
-					else if (entry.getValue() instanceof Map<?,?>){
-						Map<?,?> actionMap = (Map<?,?>) entry.getValue();
-						for(Map.Entry<?, ?> entry1 : actionMap.entrySet()) {
-							tableObj[num][1] = entry1.getKey() + " : " + entry1.getValue();
-							num++;
-						}
-					}
-					else if(entry.getValue() instanceof String[]) {
-						String [] actionArray = (String[]) entry.getValue();
-						for(int i=0;i<actionArray.length;i++) {
-							tableObj[num][1]=actionArray[i];
-							num++;
-						}
-					}
-					else {
-					tableObj[num][1]=entry.getValue();
-					num++;
-					}
-					
-				}
-				}
-				
-				num1 = num+2;
-				if(APFromGson[ltn.getNodeNumber()].getDataParameters()!= null && APFromGson[ltn.getNodeNumber()].getDataParameters().size() > 0) {
-				tableObj[num+1][0] = "<html><b>Data Parameters</b></html>";
-				
-				for (Map.Entry<String,Object> entry : APFromGson[ltn.getNodeNumber()].getDataParameters().entrySet()) {
-					tableObj[num1][0]=entry.getKey();
-					
-					if (entry.getValue() instanceof List<?>){
-						List<String> actionList = (List<String>) entry.getValue();
-						for(int i=0;i<actionList.size();i++) {
-							tableObj[num1][1]=actionList.get(i);
-							num1++;
-						}
-					}
-					else if (entry.getValue() instanceof Map<?,?>){
-						Map<?,?> actionMap = (Map<?,?>) entry.getValue();
-						for(Map.Entry<?, ?> entry1 : actionMap.entrySet()) {
-							tableObj[num1][1] = entry1.getValue();
-							num1++;
-						}
-					}
-					else if(entry.getValue() instanceof String[]) {
-						String [] actionArray = (String[]) entry.getValue();
-						for(int i=0;i<actionArray.length;i++) {
-							tableObj[num1][1]=actionArray[i];
-							num1++;
-						}
-					}
-					else {
-					tableObj[num1][1]=entry.getValue();
-					num1++;
-					}
-				}
-				}
-				
-
-//				JDialog jd = new JDialog();
-//				JTextPane jt = new JTextPane();
-//				jt.setText("CLICKED");
-//				jt.setBounds(10, 10, 300, 100);
-//				jd.getContentPane().add(jt);
-//				jd.setBounds(100, 100, 500, 200);
-//				jd.setVisible(true);
-				
-				if(APFromGson[ltn.getNodeNumber()].getOtherParameters()!= null && APFromGson[ltn.getNodeNumber()].getOtherParameters().size() > 0) {
-				tableObj[num1+2][0] = "<html><b>Other Parameters</b></html>";
-				num2 = num1+2;
-				for (Map.Entry<String,Object> entry : APFromGson[ltn.getNodeNumber()].getOtherParameters().entrySet()) {
-					tableObj[num2][0]=entry.getKey();
-					
-					if (entry.getValue() instanceof List<?>){
-						List<String> actionList = (List<String>) entry.getValue();
-						for(int i=0;i<actionList.size();i++) {
-							tableObj[num2][1]=actionList.get(i);
-							num2++;
-						}
-					}
-					else if (entry.getValue() instanceof Map<?,?>){
-						Map<?,?> actionMap = (Map<?,?>) entry.getValue();
-						for(Map.Entry<?, ?> entry1 : actionMap.entrySet()) {
-							tableObj[num2][1] = entry1.getKey() + " : " + entry1.getValue();
-							num2++;
-						}
-					}
-					else if(entry.getValue() instanceof String[]) {
-						String [] actionArray = (String[]) entry.getValue();
-						for(int i=0;i<actionArray.length;i++) {
-							tableObj[num2][1]=actionArray[i];
-							num2++;
-						}
-					}
-					else {
-					tableObj[num2][1]=entry.getValue();
-					num2++;
-					}
-					num2++;
-				}
-				}
-				
-				tableObj[num2+1][0] = "<html><b>Timestamp</b></html>";
-				tableObj[num2+1][1] = APFromGson[ltn.getNodeNumber()].getTimestamp();
-				
-				
-				
-
-				table.setModel(new DefaultTableModel(
-						tableObj,
-						new String[] {
-								"Parameter", "Value"
-						}
-						));
-				
-				
-				
-
-
-
-			}
-		});
-
-		DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) playTree.getCellRenderer();
-		
-		renderer.setClosedIcon(closedIcon);
-		renderer.setOpenIcon(openIcon);
-		renderer.setLeafIcon(leafIcon);
-		
-		separator = new JSeparator();
-		GridBagConstraints gbc_separator = new GridBagConstraints();
-		gbc_separator.fill = GridBagConstraints.HORIZONTAL;
-		gbc_separator.gridwidth = 2;
-		gbc_separator.gridx = 0;
-		gbc_separator.gridy = 8;
-		add(separator, gbc_separator);
-
-		commentButton = new JButton();  
-		commentButton.setText("Submit"); 
-		commentButton.setVisible(true);
-
-	}
-
-
-
-	public void addActionToLogTree(ActionProperties action, Integer parent, int actionNumber) {
-
-
-		DefaultTreeModel dtm = (DefaultTreeModel) playTree.getModel();
-		DefaultMutableTreeNode root = (DefaultMutableTreeNode) dtm.getRoot();
-		DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(new LoggingTreeNode(action.getActionCommand(),actionNumber));
-		
-		if(parent == -1) {
-			dtm.insertNodeInto(newNode, root, root.getChildCount());	
-		}
-		else {
-			DefaultMutableTreeNode parentNode = treeStructure.get(parent);
-			dtm.insertNodeInto(newNode, parentNode, parentNode.getChildCount());
-
-		}
-		
-		treeStructure.put(action.getActionNumber(),newNode);
-		dtm.reload();
-	}
-
-	
-	
-	public void readLogAndPopulateTree(File logFile) {
-
-		Gson gson = new Gson();
-		String jsonLog = "";
-		try {
-			jsonLog = new String( Files.readAllBytes(logFile.toPath()));
-		} catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-
-		playTree.removeAll();
-		playTree.setModel(new DefaultTreeModel( new DefaultMutableTreeNode(logFile.getName())));
-
-		
-		String actions = jsonLog.substring(jsonLog.indexOf('}') + 1);
-		String listOfActions = "["+actions.substring(actions.indexOf(',') + 1)+"]";
-
-		APFromGson = gson.fromJson(listOfActions, ActionProperties[].class);
-
-
-
-		for(int action=0; action<APFromGson.length; action++) {
-
-			double par = Double.parseDouble(APFromGson[action].getActionParameters().get("parent").toString());
-			
-			Integer parent = (int) par;
-			addActionToLogTree(APFromGson[action],parent,action);
-			tabbedPane.setTitleAt(0, logFile.getName());
-
-
-		}
-
-
-	}
-}
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ReproducibilityDashboardPanel - Copy.java.bkp b/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ReproducibilityDashboardPanel - Copy.java.bkp
deleted file mode 100644
index d890243..0000000
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ReproducibilityDashboardPanel - Copy.java.bkp	
+++ /dev/null
@@ -1,668 +0,0 @@
-package edu.iastate.metnet.metaomgraph.ui;
-
-import java.awt.Color;
-import java.awt.Container;
-import java.awt.FlowLayout;
-import java.awt.GridBagConstraints;
-import java.awt.GridBagLayout;
-
-import javax.swing.JButton;
-import javax.swing.JDialog;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JScrollPane;
-import javax.swing.JSeparator;
-import javax.swing.JTextArea;
-import javax.swing.JTextField;
-import javax.swing.JTextPane;
-import javax.swing.SpringLayout;
-import java.awt.Insets;
-import net.miginfocom.swing.MigLayout;
-import java.awt.event.ActionListener;
-import java.awt.event.MouseAdapter;
-import java.awt.event.MouseEvent;
-import java.io.File;
-import java.io.IOException;
-import java.nio.file.Files;
-import java.text.SimpleDateFormat;
-import java.util.Collection;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.awt.event.ActionEvent;
-import javax.swing.SwingConstants;
-import javax.swing.JScrollBar;
-import javax.swing.JRadioButton;
-import java.awt.BorderLayout;
-import javax.swing.JTabbedPane;
-import javax.swing.JEditorPane;
-import javax.swing.JFileChooser;
-
-import java.awt.SystemColor;
-import javax.swing.JSplitPane;
-import javax.swing.JList;
-import javax.swing.AbstractListModel;
-import javax.swing.ButtonGroup;
-import javax.swing.Icon;
-import javax.swing.ImageIcon;
-import javax.swing.JTree;
-import javax.swing.tree.DefaultTreeModel;
-import javax.swing.tree.TreePath;
-
-import org.apache.logging.log4j.Level;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.core.LoggerContext;
-import org.apache.logging.log4j.core.config.Configuration;
-import org.apache.logging.log4j.core.config.LoggerConfig;
-
-import com.google.gson.Gson;
-
-import edu.iastate.metnet.metaomgraph.MetaOmGraph;
-import edu.iastate.metnet.metaomgraph.logging.ActionProperties;
-import edu.iastate.metnet.metaomgraph.logging.LoggingTreeNode;
-
-import javax.swing.tree.DefaultMutableTreeNode;
-import javax.swing.tree.DefaultTreeCellRenderer;
-import javax.swing.JTable;
-import javax.swing.table.DefaultTableModel;
-import javax.swing.ScrollPaneConstants;
-
-public class ReproducibilityDashboardPanel extends JPanel {
-
-	/*Harsha- Added logger */
-
-	private static final Logger logger = MetaOmGraph.logger;
-
-	JButton commentButton;
-	private JLabel lblNewLabel;
-	private final JButton btnSubmit = new JButton("submit");
-	private JSeparator separator;
-	private JPanel panel;
-	private JButton btnNewButton;
-	private JButton btnNewButton_1;
-	private JButton btnNewButton_2;
-	private JSeparator separator_1;
-	private JPanel panel_1;
-	private JLabel lblNewLabel_1;
-	private JRadioButton rdbtnNewRadioButton;
-	private JRadioButton rdbtnNewRadioButton_1;
-	private JTabbedPane tabbedPane;
-	private JSeparator separator_2;
-	private JSplitPane splitPane;
-	private JRadioButton rdbtnPermanentlySwitchedOff;
-	private JLabel lblNewLabel_2;
-
-	private MetaOmGraph project;
-	private JScrollPane scrollPane;
-	private JTextArea textArea;
-	private JScrollPane scrollPane_1;
-	private JScrollPane scrollPane_2;
-	private JTable table;
-	private JTree playTree;
-
-	private ActionProperties [] APFromGson;
-	private HashMap<Integer,DefaultMutableTreeNode> treeStructure;
-	
-	public ReproducibilityDashboardPanel(MetaOmGraph myself) {
-
-		project = myself;
-		
-		treeStructure = new HashMap<Integer,DefaultMutableTreeNode>();
-		
-		GridBagLayout gridBagLayout = new GridBagLayout();
-		gridBagLayout.columnWidths = new int[]{280, 220, 0, 0};
-		gridBagLayout.rowHeights = new int[]{47, 20, 0, 40, 33, 13, 0, 90, 13, 0};
-		gridBagLayout.columnWeights = new double[]{1.0, 0.0, 0.0, Double.MIN_VALUE};
-		gridBagLayout.rowWeights = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, Double.MIN_VALUE};
-		setLayout(gridBagLayout);
-
-		panel_1 = new JPanel();
-		panel_1.setBackground(SystemColor.control);
-		GridBagConstraints gbc_panel_1 = new GridBagConstraints();
-		gbc_panel_1.gridwidth = 2;
-		gbc_panel_1.insets = new Insets(0, 0, 5, 5);
-		gbc_panel_1.fill = GridBagConstraints.HORIZONTAL;
-		gbc_panel_1.gridx = 0;
-		gbc_panel_1.gridy = 0;
-		add(panel_1, gbc_panel_1);
-
-		lblNewLabel_1 = new JLabel("logging : ");
-		panel_1.add(lblNewLabel_1);
-
-		ButtonGroup G = new ButtonGroup();
-
-		rdbtnNewRadioButton = new JRadioButton("on");
-		rdbtnNewRadioButton.setSelected(true);
-		panel_1.add(rdbtnNewRadioButton);
-
-		rdbtnNewRadioButton_1 = new JRadioButton("off");
-		panel_1.add(rdbtnNewRadioButton_1);
-
-		rdbtnPermanentlySwitchedOff = new JRadioButton("permanently switched off");
-		panel_1.add(rdbtnPermanentlySwitchedOff);
-		
-		rdbtnNewRadioButton.addActionListener(new ActionListener() {
-	        @Override
-	        public void actionPerformed(ActionEvent e) {
-	            //MetaOmGraph.getReproducibilityLogMenu().setText("logging on");
-	        	MetaOmGraph.getReproducibilityLogMenu().setForeground(Color.BLUE);
-	        	LoggerContext context = (LoggerContext) LogManager.getContext(false);
-	    		Configuration configuration = context.getConfiguration();
-	    		LoggerConfig loggerConfig = configuration.getLoggerConfig("reproducibilityLogger"); 
-	    		loggerConfig.setLevel(Level.DEBUG);
-	    		context.updateLoggers();
-
-	        }
-	    });
-	    
-		rdbtnNewRadioButton_1.addActionListener(new ActionListener() {
-	        @Override
-	        public void actionPerformed(ActionEvent e) {
-//	        	 MetaOmGraph.getReproducibilityLogMenu().setText("logging off");
-//	        	 MetaOmGraph.getReproducibilityLogMenu().setForeground(Color.BLACK);
-	        	MetaOmGraph.getReproducibilityLogMenu().setForeground(Color.BLACK);
-	        	LoggerContext context = (LoggerContext) LogManager.getContext(false);
-	    		Configuration configuration = context.getConfiguration();
-	    		LoggerConfig loggerConfig = configuration.getLoggerConfig("reproducibilityLogger"); 
-	    		loggerConfig.setLevel(Level.OFF);
-	    		context.updateLoggers();
-
-	        }
-	    });
-	    
-		rdbtnPermanentlySwitchedOff.addActionListener(new ActionListener() {
-	        @Override
-	        public void actionPerformed(ActionEvent e) {
-//	        	 MetaOmGraph.getReproducibilityLogMenu().setText("logging off");
-//	        	 MetaOmGraph.getReproducibilityLogMenu().setForeground(Color.BLACK);
-
-	        }
-	    });
-
-		G.add(rdbtnNewRadioButton);
-		G.add(rdbtnNewRadioButton_1);
-		G.add(rdbtnPermanentlySwitchedOff);
-		
-		
-
-		separator_1 = new JSeparator();
-		GridBagConstraints gbc_separator_1 = new GridBagConstraints();
-		gbc_separator_1.fill = GridBagConstraints.HORIZONTAL;
-		gbc_separator_1.gridwidth = 2;
-		gbc_separator_1.insets = new Insets(0, 0, 5, 5);
-		gbc_separator_1.gridx = 0;
-		gbc_separator_1.gridy = 1;
-		add(separator_1, gbc_separator_1);
-
-		lblNewLabel = new JLabel("Add a comment to the current session");
-		GridBagConstraints gbc_lblNewLabel = new GridBagConstraints();
-		gbc_lblNewLabel.anchor = GridBagConstraints.WEST;
-		gbc_lblNewLabel.insets = new Insets(0, 0, 5, 5);
-		gbc_lblNewLabel.gridx = 0;
-		gbc_lblNewLabel.gridy = 2;
-		add(lblNewLabel, gbc_lblNewLabel);
-		GridBagConstraints gbc_btnSubmit = new GridBagConstraints();
-		gbc_btnSubmit.anchor = GridBagConstraints.WEST;
-		gbc_btnSubmit.fill = GridBagConstraints.VERTICAL;
-		gbc_btnSubmit.insets = new Insets(0, 0, 5, 5);
-		gbc_btnSubmit.gridx = 0;
-		gbc_btnSubmit.gridy = 4;
-		btnSubmit.setForeground(Color.BLACK);
-		btnSubmit.addActionListener(new ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-
-				//Harsha - reproducibility log
-				HashMap<String,Object> dataParameters = new HashMap<String,Object>();
-				dataParameters.put("comment",textArea.getText());
-
-				HashMap<String,Object> result = new HashMap<String,Object>();
-				result.put("result", "OK");
-				ActionProperties userCommentAction = new ActionProperties("user-comment",null,dataParameters,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				userCommentAction.logActionProperties(logger);
-
-				lblNewLabel_2.setText("Comment logged Successfully");
-				textArea.setText("");
-			}
-		});
-
-		scrollPane = new JScrollPane();
-		GridBagConstraints gbc_scrollPane = new GridBagConstraints();
-		gbc_scrollPane.gridwidth = 2;
-		gbc_scrollPane.insets = new Insets(0, 0, 5, 5);
-		gbc_scrollPane.fill = GridBagConstraints.BOTH;
-		gbc_scrollPane.gridx = 0;
-		gbc_scrollPane.gridy = 3;
-		add(scrollPane, gbc_scrollPane);
-
-		textArea = new JTextArea();
-		scrollPane.setViewportView(textArea);
-		btnSubmit.setBackground(Color.BLUE);
-		add(btnSubmit, gbc_btnSubmit);
-
-		lblNewLabel_2 = new JLabel("");
-		lblNewLabel_2.setForeground(Color.BLUE);
-		GridBagConstraints gbc_lblNewLabel_2 = new GridBagConstraints();
-		gbc_lblNewLabel_2.insets = new Insets(0, 0, 5, 5);
-		gbc_lblNewLabel_2.gridx = 1;
-		gbc_lblNewLabel_2.gridy = 4;
-		add(lblNewLabel_2, gbc_lblNewLabel_2);
-
-		separator_2 = new JSeparator();
-		GridBagConstraints gbc_separator_2 = new GridBagConstraints();
-		gbc_separator_2.fill = GridBagConstraints.HORIZONTAL;
-		gbc_separator_2.gridwidth = 2;
-		gbc_separator_2.insets = new Insets(0, 0, 5, 5);
-		gbc_separator_2.gridx = 0;
-		gbc_separator_2.gridy = 5;
-		add(separator_2, gbc_separator_2);
-
-		panel = new JPanel();
-		panel.setBackground(SystemColor.inactiveCaptionBorder);
-		GridBagConstraints gbc_panel = new GridBagConstraints();
-		gbc_panel.anchor = GridBagConstraints.WEST;
-		gbc_panel.gridwidth = 2;
-		gbc_panel.insets = new Insets(0, 0, 5, 5);
-		gbc_panel.gridx = 0;
-		gbc_panel.gridy = 6;
-		add(panel, gbc_panel);
-
-		btnNewButton = new JButton("open previous session");
-		btnNewButton.addActionListener(new ActionListener() {
-			public void actionPerformed(ActionEvent arg0) {
-
-				JFileChooser jfc = new JFileChooser();
-				jfc.setDialogTitle("open previous session log");
-				jfc.setCurrentDirectory(myself.getActiveProject().getSourceFile());
-				int retValue = jfc.showOpenDialog(myself.getMainWindow());
-
-				if(retValue == JFileChooser.APPROVE_OPTION) {
-					File file = jfc.getSelectedFile();
-					readLogAndPopulateTree(file);
-				}
-			}
-		});
-		panel.add(btnNewButton);
-
-		btnNewButton_1 = new JButton("play");
-		btnNewButton_1.addActionListener(new ActionListener() {
-			public void actionPerformed(ActionEvent arg0) {
-			
-				
-				DefaultMutableTreeNode node = (DefaultMutableTreeNode)
-						playTree.getLastSelectedPathComponent();
-				
-				
-
-				if (node == null)
-					//Nothing is selected.     
-					return;
-
-				Object nodeInfo = node.getUserObject();
-
-				LoggingTreeNode ltn = (LoggingTreeNode) nodeInfo;
-				
-				
-				if(ltn.getNodeName().equalsIgnoreCase("line-chart")) {
-	
-					int val2[] = null;
-					
-					Map<String,String> genes = (Map<String,String>)APFromGson[ltn.getNodeNumber()].getDataParameters().get("selectedGenes");
-					
-					Set<String> colnum = genes.keySet();
-					
-					Integer [] val = new Integer[colnum.size()];
-					
-					
-					
-					
-					try {
-					int j = 0;
-				      for (String i: colnum) {
-				         val[j++] = Integer.parseInt(i);
-				      }
-				      
-					}
-					catch(Exception e) {
-						JDialog jd = new JDialog();
-						JTextPane jt = new JTextPane();
-						jt.setText(e.getMessage());
-						jt.setBounds(10, 10, 300, 100);
-						jd.getContentPane().add(jt);
-						jd.setBounds(100, 100, 500, 200);
-						jd.setVisible(true);
-					}
-					
-					val2 = new int[val.length];
-					
-					
-					
-					for (int i=0;i<val.length;i++) {
-						val2[i] = val[i];
-					}
-					
-					
-					
-//					JDialog jd = new JDialog();
-//					JTextPane jt = new JTextPane();
-//					jt.setText(val2[0]+" "+val2[1]);
-//					jt.setBounds(10, 10, 300, 100);
-//					jd.getContentPane().add(jt);
-//					jd.setBounds(100, 100, 500, 200);
-//					jd.setVisible(true);
-					
-					MetaOmTablePanel mp = MetaOmGraph.getActiveTablePanel();
-					mp.graphLoggedRows(val2);
-					
-					
-				}
-				
-			}
-		});
-		btnNewButton_1.setIcon(new ImageIcon(project.getClass().getResource("/resource/loggingicons/play_alt-512.png")));
-		panel.add(btnNewButton_1);
-
-//		btnNewButton_2 = new JButton("play entire session");
-//		btnNewButton_2.setIcon(new ImageIcon(project.getClass().getResource("/resource/loggingicons/playall.png")));
-//		btnNewButton_2.addActionListener(new ActionListener() {
-//			public void actionPerformed(ActionEvent e) {
-//			}
-//		});
-//		//btnNewButton_2.setIcon(new ImageIcon(project.getClass().getResource("/resource/loggingicons/openlogbutton.png")));
-//		panel.add(btnNewButton_2);
-
-		tabbedPane = new JTabbedPane(JTabbedPane.TOP);
-		GridBagConstraints gbc_tabbedPane = new GridBagConstraints();
-		gbc_tabbedPane.gridwidth = 3;
-		gbc_tabbedPane.insets = new Insets(0, 0, 5, 5);
-		gbc_tabbedPane.fill = GridBagConstraints.BOTH;
-		gbc_tabbedPane.gridx = 0;
-		gbc_tabbedPane.gridy = 7;
-		add(tabbedPane, gbc_tabbedPane);
-
-		splitPane = new JSplitPane();
-		tabbedPane.addTab("New tab", null, splitPane, null);
-		Icon closedIcon = new ImageIcon(project.getClass().getResource("/resource/loggingicons/chart.png"));
-		Icon openIcon = new ImageIcon(project.getClass().getResource("/resource/loggingicons/chart.png"));
-		Icon leafIcon = new ImageIcon(project.getClass().getResource("/resource/loggingicons/chart.png"));
-		splitPane.setDividerLocation(0.5);
-		playTree = new JTree();
-		playTree.setModel(new DefaultTreeModel( new DefaultMutableTreeNode("CurrentSession")
-				));
-
-		playTree.addMouseListener(new MouseAdapter() {
-			public void mouseClicked(MouseEvent me) {
-
-				
-				
-				DefaultMutableTreeNode node = (DefaultMutableTreeNode)
-						playTree.getLastSelectedPathComponent();
-
-				if (node == null)
-					//Nothing is selected.     
-					return;
-
-				Object nodeInfo = node.getUserObject();
-
-				LoggingTreeNode ltn = (LoggingTreeNode) nodeInfo;
-				
-				
-
-				Object [][] tableObj = new Object[100][2];
-				tableObj[0][0] = "<html><b>Action Command</b></html>";
-				tableObj[0][1] = APFromGson[ltn.getNodeNumber()].getActionCommand();
-				
-				int num = 2;
-				int num1 = 2;
-				int num2 = 2;
-				if(APFromGson[ltn.getNodeNumber()].getActionParameters() != null && APFromGson[ltn.getNodeNumber()].getActionParameters().size() > 0) {
-				tableObj[2][0] = "<html><b>Action Parameters</b></html>";
-				num = 3;
-				for (Map.Entry<String,Object> entry : APFromGson[ltn.getNodeNumber()].getActionParameters().entrySet()) {
-					tableObj[num][0]=entry.getKey();
-					
-					if (entry.getValue() instanceof List<?>){
-						List<String> actionList = (List<String>) entry.getValue();
-						for(int i=0;i<actionList.size();i++) {
-							tableObj[num][1]=actionList.get(i);
-							num++;
-						}
-					}
-					else if (entry.getValue() instanceof Map<?,?>){
-						Map<?,?> actionMap = (Map<?,?>) entry.getValue();
-						for(Map.Entry<?, ?> entry1 : actionMap.entrySet()) {
-							tableObj[num][1] = entry1.getKey() + " : " + entry1.getValue();
-							num++;
-						}
-					}
-					else if(entry.getValue() instanceof String[]) {
-						String [] actionArray = (String[]) entry.getValue();
-						for(int i=0;i<actionArray.length;i++) {
-							tableObj[num][1]=actionArray[i];
-							num++;
-						}
-					}
-					else {
-					tableObj[num][1]=entry.getValue();
-					num++;
-					}
-					
-				}
-				}
-				
-				num1 = num+2;
-				if(APFromGson[ltn.getNodeNumber()].getDataParameters()!= null && APFromGson[ltn.getNodeNumber()].getDataParameters().size() > 0) {
-				tableObj[num+1][0] = "<html><b>Data Parameters</b></html>";
-				
-				for (Map.Entry<String,Object> entry : APFromGson[ltn.getNodeNumber()].getDataParameters().entrySet()) {
-					tableObj[num1][0]=entry.getKey();
-					
-					if (entry.getValue() instanceof List<?>){
-						List<String> actionList = (List<String>) entry.getValue();
-						for(int i=0;i<actionList.size();i++) {
-							tableObj[num1][1]=actionList.get(i);
-							num1++;
-						}
-					}
-					else if (entry.getValue() instanceof Map<?,?>){
-						Map<?,?> actionMap = (Map<?,?>) entry.getValue();
-						for(Map.Entry<?, ?> entry1 : actionMap.entrySet()) {
-							tableObj[num1][1] = entry1.getValue();
-							num1++;
-						}
-					}
-					else if(entry.getValue() instanceof String[]) {
-						String [] actionArray = (String[]) entry.getValue();
-						for(int i=0;i<actionArray.length;i++) {
-							tableObj[num1][1]=actionArray[i];
-							num1++;
-						}
-					}
-					else {
-					tableObj[num1][1]=entry.getValue();
-					num1++;
-					}
-				}
-				}
-				
-
-//				JDialog jd = new JDialog();
-//				JTextPane jt = new JTextPane();
-//				jt.setText("CLICKED");
-//				jt.setBounds(10, 10, 300, 100);
-//				jd.getContentPane().add(jt);
-//				jd.setBounds(100, 100, 500, 200);
-//				jd.setVisible(true);
-				
-				if(APFromGson[ltn.getNodeNumber()].getOtherParameters()!= null && APFromGson[ltn.getNodeNumber()].getOtherParameters().size() > 0) {
-				tableObj[num1+2][0] = "<html><b>Other Parameters</b></html>";
-				num2 = num1+2;
-				for (Map.Entry<String,Object> entry : APFromGson[ltn.getNodeNumber()].getOtherParameters().entrySet()) {
-					tableObj[num2][0]=entry.getKey();
-					
-					if (entry.getValue() instanceof List<?>){
-						List<String> actionList = (List<String>) entry.getValue();
-						for(int i=0;i<actionList.size();i++) {
-							tableObj[num2][1]=actionList.get(i);
-							num2++;
-						}
-					}
-					else if (entry.getValue() instanceof Map<?,?>){
-						Map<?,?> actionMap = (Map<?,?>) entry.getValue();
-						for(Map.Entry<?, ?> entry1 : actionMap.entrySet()) {
-							tableObj[num2][1] = entry1.getKey() + " : " + entry1.getValue();
-							num2++;
-						}
-					}
-					else if(entry.getValue() instanceof String[]) {
-						String [] actionArray = (String[]) entry.getValue();
-						for(int i=0;i<actionArray.length;i++) {
-							tableObj[num2][1]=actionArray[i];
-							num2++;
-						}
-					}
-					else {
-					tableObj[num2][1]=entry.getValue();
-					num2++;
-					}
-					num2++;
-				}
-				}
-				
-				tableObj[num2+1][0] = "<html><b>Timestamp</b></html>";
-				tableObj[num2+1][1] = APFromGson[ltn.getNodeNumber()].getTimestamp();
-				
-				
-				
-
-				table.setModel(new DefaultTableModel(
-						tableObj,
-						new String[] {
-								"Parameter", "Value"
-						}
-						));
-				
-				
-				
-
-
-
-			}
-		});
-
-		DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) playTree.getCellRenderer();
-
-		renderer.setClosedIcon(closedIcon);
-		renderer.setOpenIcon(openIcon);
-		renderer.setLeafIcon(leafIcon);
-
-		scrollPane_1 = new JScrollPane(playTree);
-		splitPane.setLeftComponent(scrollPane_1);
-
-		
-
-		table = new JTable();
-		table.setColumnSelectionAllowed(true);
-		table.setCellSelectionEnabled(true);
-		table.setFillsViewportHeight(true);
-		table.setModel(new DefaultTableModel(
-			new Object[][] {
-				{null, ""},
-				{null, null},
-				{null, null},
-				{null, null},
-				{null, null},
-				{null, null},
-			},
-			new String[] {
-				"Parameter", "Value"
-			}
-		));
-		table.getColumnModel().getColumn(0).setMaxWidth(200);
-		table.getColumnModel().getColumn(1).setMaxWidth(200);
-		
-		scrollPane_2 = new JScrollPane(table);
-		splitPane.setRightComponent(scrollPane_2);
-
-		splitPane.setDividerLocation(0.5);
-
-		separator = new JSeparator();
-		GridBagConstraints gbc_separator = new GridBagConstraints();
-		gbc_separator.insets = new Insets(0, 0, 0, 5);
-		gbc_separator.fill = GridBagConstraints.HORIZONTAL;
-		gbc_separator.gridwidth = 2;
-		gbc_separator.gridx = 0;
-		gbc_separator.gridy = 8;
-		add(separator, gbc_separator);
-
-		commentButton = new JButton();  
-		commentButton.setText("Submit"); 
-		commentButton.setVisible(true);
-
-	}
-
-
-
-	public void addActionToLogTree(ActionProperties action, Integer parent, int actionNumber) {
-
-
-		DefaultTreeModel dtm = (DefaultTreeModel) playTree.getModel();
-		DefaultMutableTreeNode root = (DefaultMutableTreeNode) dtm.getRoot();
-		DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(new LoggingTreeNode(action.getActionCommand(),actionNumber));
-		
-		if(parent == -1) {
-			dtm.insertNodeInto(newNode, root, root.getChildCount());	
-		}
-		else {
-			DefaultMutableTreeNode parentNode = treeStructure.get(parent);
-			dtm.insertNodeInto(newNode, parentNode, parentNode.getChildCount());
-
-		}
-		
-		treeStructure.put(action.getActionNumber(),newNode);
-		dtm.reload();
-	}
-
-	
-	
-	public void readLogAndPopulateTree(File logFile) {
-
-		Gson gson = new Gson();
-		String jsonLog = "";
-		try {
-			jsonLog = new String( Files.readAllBytes(logFile.toPath()));
-		} catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-
-		playTree.removeAll();
-		playTree.setModel(new DefaultTreeModel( new DefaultMutableTreeNode(logFile.getName())));
-
-		
-		String actions = jsonLog.substring(jsonLog.indexOf('}') + 1);
-		String listOfActions = "["+actions.substring(actions.indexOf(',') + 1)+"]";
-
-		APFromGson = gson.fromJson(listOfActions, ActionProperties[].class);
-
-
-
-		for(int action=0; action<APFromGson.length; action++) {
-
-			double par = Double.parseDouble(APFromGson[action].getActionParameters().get("parent").toString());
-			
-			Integer parent = (int) par;
-			addActionToLogTree(APFromGson[action],parent,action);
-			tabbedPane.setTitleAt(0, logFile.getName());
-
-
-		}
-
-
-	}
-
-
-
-}
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ReproducibilityDashboardPanel.java b/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ReproducibilityDashboardPanel.java
deleted file mode 100644
index 8b13387..0000000
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/ReproducibilityDashboardPanel.java
+++ /dev/null
@@ -1,1011 +0,0 @@
-package edu.iastate.metnet.metaomgraph.ui;
-
-import java.awt.Color;
-import java.awt.Component;
-import java.awt.FlowLayout;
-import java.awt.GridBagConstraints;
-import java.awt.GridBagLayout;
-import java.awt.Insets;
-import java.awt.SystemColor;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.awt.event.MouseAdapter;
-import java.awt.event.MouseEvent;
-import java.io.BufferedWriter;
-import java.io.File;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.nio.file.Files;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import javax.swing.AbstractCellEditor;
-import javax.swing.ButtonGroup;
-import javax.swing.Icon;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JComponent;
-import javax.swing.JDialog;
-import javax.swing.JFileChooser;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JRadioButton;
-import javax.swing.JScrollPane;
-import javax.swing.JSeparator;
-import javax.swing.JSplitPane;
-import javax.swing.JTable;
-import javax.swing.JTextArea;
-import javax.swing.JTextPane;
-import javax.swing.JTree;
-import javax.swing.table.DefaultTableModel;
-import javax.swing.table.TableCellEditor;
-import javax.swing.table.TableCellRenderer;
-import javax.swing.tree.DefaultMutableTreeNode;
-import javax.swing.tree.DefaultTreeCellRenderer;
-import javax.swing.tree.DefaultTreeModel;
-import javax.swing.tree.TreePath;
-import org.apache.logging.log4j.Level;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.core.Appender;
-import org.apache.logging.log4j.core.LoggerContext;
-import org.apache.logging.log4j.core.appender.FileAppender;
-import org.apache.logging.log4j.core.config.Configuration;
-import org.apache.logging.log4j.core.config.LoggerConfig;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.internal.LinkedTreeMap;
-
-import edu.iastate.metnet.metaomgraph.MetaOmGraph;
-import edu.iastate.metnet.metaomgraph.logging.ActionProperties;
-import edu.iastate.metnet.metaomgraph.playback.LoggingTreeNode;
-import edu.iastate.metnet.metaomgraph.playback.PlaybackAction;
-import edu.iastate.metnet.metaomgraph.playback.PlaybackTabData;
-
-public class ReproducibilityDashboardPanel extends JPanel {
-
-	/* Harsha- Added logger */
-
-	private static final Logger logger = MetaOmGraph.logger;
-
-	JButton commentButton;
-	private JPanel panel;
-	private JButton btnNewButton;
-	private JButton btnNewButton_1;
-	private JSeparator separator_1;
-	private JPanel panel_1;
-	private JLabel lblNewLabel_1;
-	private JRadioButton rdbtnNewRadioButton;
-	private JRadioButton rdbtnNewRadioButton_1;
-	private JRadioButton rdbtnPermanentlySwitchedOff;
-	private MetaOmGraph project;
-	private HashMap<Integer, DefaultMutableTreeNode> treeStructure;
-	private HashMap<Integer, PlaybackTabData> allTabsInfo;
-	private PlaybackAction playbackAction;
-	private JTree playTree;
-	private JTable table;
-	private ClosableTabbedPane tabbedPane;
-	private int currentSessionActionNumber;
-	private JButton btnNewButton_3;
-
-	public ReproducibilityDashboardPanel(MetaOmGraph myself) {
-
-		project = myself;
-
-		treeStructure = new HashMap<Integer, DefaultMutableTreeNode>();
-		allTabsInfo = new HashMap<Integer, PlaybackTabData>();
-		playbackAction = new PlaybackAction();
-		currentSessionActionNumber = 0;
-
-		GridBagLayout gridBagLayout = new GridBagLayout();
-		gridBagLayout.columnWidths = new int[] { 280, 261, 0 };
-		gridBagLayout.rowHeights = new int[] { 47, 20, 0, 40, 33, 13, 0, 90, 13, 0 };
-		gridBagLayout.columnWeights = new double[] { 0.0, 0.0, Double.MIN_VALUE };
-		gridBagLayout.rowWeights = new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, Double.MIN_VALUE };
-		setLayout(gridBagLayout);
-
-		panel_1 = new JPanel();
-		panel_1.setBackground(SystemColor.control);
-		GridBagConstraints gbc_panel_1 = new GridBagConstraints();
-		gbc_panel_1.gridwidth = 2;
-		gbc_panel_1.insets = new Insets(0, 0, 5, 0);
-		gbc_panel_1.fill = GridBagConstraints.HORIZONTAL;
-		gbc_panel_1.gridx = 0;
-		gbc_panel_1.gridy = 0;
-		add(panel_1, gbc_panel_1);
-
-		lblNewLabel_1 = new JLabel("logging : ");
-		panel_1.add(lblNewLabel_1);
-
-		ButtonGroup G = new ButtonGroup();
-
-		rdbtnNewRadioButton = new JRadioButton("on");
-		rdbtnNewRadioButton.setSelected(true);
-		panel_1.add(rdbtnNewRadioButton);
-
-		rdbtnNewRadioButton_1 = new JRadioButton("off");
-		panel_1.add(rdbtnNewRadioButton_1);
-
-		rdbtnPermanentlySwitchedOff = new JRadioButton("permanently switched off");
-		panel_1.add(rdbtnPermanentlySwitchedOff);
-
-		if (MetaOmGraph.getPermanentLogging() == false) {
-			rdbtnNewRadioButton.setSelected(false);
-			rdbtnNewRadioButton_1.setSelected(false);
-			rdbtnPermanentlySwitchedOff.setSelected(true);
-		}
-		rdbtnNewRadioButton.addActionListener(new ActionListener() {
-			@Override
-			public void actionPerformed(ActionEvent e) {
-
-				MetaOmGraph.getReproducibilityLogMenu().setForeground(Color.BLUE);
-				MetaOmGraph.setLoggingRequired(true);
-				MetaOmGraph.setPermanentLogging(true);
-				try {
-
-					if (logger != null) {
-						LoggerContext context = (LoggerContext) LogManager.getContext(false);
-						Configuration configuration = context.getConfiguration();
-						LoggerConfig loggerConfig = configuration.getLoggerConfig("reproducibilityLogger");
-						loggerConfig.setLevel(Level.DEBUG);
-						context.updateLoggers();
-					}
-
-				} catch (Exception e3) {
-					StringWriter sw = new StringWriter();
-					e3.printStackTrace(new PrintWriter(sw));
-					String exceptionAsString = sw.toString();
-					printDialog(exceptionAsString);
-				}
-
-			}
-		});
-
-		rdbtnNewRadioButton_1.addActionListener(new ActionListener() {
-			@Override
-			public void actionPerformed(ActionEvent e) {
-
-				MetaOmGraph.getReproducibilityLogMenu().setForeground(Color.BLACK);
-				MetaOmGraph.setLoggingRequired(false);
-				MetaOmGraph.setPermanentLogging(true);
-				try {
-					LoggerContext context = (LoggerContext) LogManager.getContext(false);
-					Configuration configuration = context.getConfiguration();
-					LoggerConfig loggerConfig = configuration.getLoggerConfig("reproducibilityLogger");
-					loggerConfig.setLevel(Level.OFF);
-					context.updateLoggers();
-				} catch (Exception e3) {
-
-				}
-
-			}
-		});
-
-		rdbtnPermanentlySwitchedOff.addActionListener(new ActionListener() {
-			@Override
-			public void actionPerformed(ActionEvent e) {
-				MetaOmGraph.getReproducibilityLogMenu().setForeground(Color.BLACK);
-				MetaOmGraph.setLoggingRequired(false);
-				MetaOmGraph.setPermanentLogging(false);
-				try {
-					LoggerContext context = (LoggerContext) LogManager.getContext(false);
-					Configuration configuration = context.getConfiguration();
-					LoggerConfig loggerConfig = configuration.getLoggerConfig("reproducibilityLogger");
-					loggerConfig.setLevel(Level.OFF);
-					context.updateLoggers();
-				} catch (Exception e3) {
-
-				}
-			}
-		});
-
-		G.add(rdbtnNewRadioButton);
-		G.add(rdbtnNewRadioButton_1);
-		G.add(rdbtnPermanentlySwitchedOff);
-
-		separator_1 = new JSeparator();
-		GridBagConstraints gbc_separator_1 = new GridBagConstraints();
-		gbc_separator_1.fill = GridBagConstraints.HORIZONTAL;
-		gbc_separator_1.gridwidth = 2;
-		gbc_separator_1.insets = new Insets(0, 0, 5, 0);
-		gbc_separator_1.gridx = 0;
-		gbc_separator_1.gridy = 1;
-		add(separator_1, gbc_separator_1);
-
-		panel = new JPanel();
-		FlowLayout flowLayout = (FlowLayout) panel.getLayout();
-		flowLayout.setAlignment(FlowLayout.LEFT);
-		panel.setBackground(SystemColor.window);
-		GridBagConstraints gbc_panel = new GridBagConstraints();
-		gbc_panel.gridwidth = 2;
-		gbc_panel.fill = GridBagConstraints.HORIZONTAL;
-		gbc_panel.anchor = GridBagConstraints.WEST;
-		gbc_panel.insets = new Insets(0, 0, 5, 0);
-		gbc_panel.gridx = 0;
-		gbc_panel.gridy = 3;
-		add(panel, gbc_panel);
-
-		btnNewButton = new JButton("open previous session");
-		btnNewButton.setToolTipText("Open a previous session log file");
-		btnNewButton.setIcon(new ImageIcon(project.getClass().getResource("/resource/loggingicons/tinyfolder.png")));
-		btnNewButton.addActionListener(new ActionListener() {
-			public void actionPerformed(ActionEvent arg0) {
-
-				JFileChooser jfc = new JFileChooser();
-				jfc.setDialogTitle("open previous session log");
-				jfc.setCurrentDirectory(MetaOmGraph.getActiveProject().getSourceFile());
-				int retValue = jfc.showOpenDialog(MetaOmGraph.getMainWindow());
-
-				if (retValue == JFileChooser.APPROVE_OPTION) {
-					File file = jfc.getSelectedFile();
-
-					JTree sessionTree = new JTree();
-					JTable sessionTable = new JTable();
-
-					HashMap<Integer, DefaultMutableTreeNode> treeStruct = new HashMap<Integer, DefaultMutableTreeNode>();
-
-					int tabNo = createNewTabAndPopulate(sessionTree, sessionTable, file.getName(), true,
-							file.getAbsolutePath());
-					readLogAndPopulateTree(file, sessionTree, tabNo, treeStruct);
-					tabbedPane.setSelectedIndex(tabNo);
-
-				}
-			}
-		});
-		panel.add(btnNewButton);
-
-		btnNewButton_1 = new JButton("play");
-		btnNewButton_1.setToolTipText("Select and play an action item");
-		btnNewButton_1.addActionListener(new ActionListener() {
-			public void actionPerformed(ActionEvent arg0) {
-
-				int tabNo = tabbedPane.getSelectedIndex();
-
-				// DefaultMutableTreeNode node = (DefaultMutableTreeNode)
-				// allTabsInfo.get(tabNo).getTabTree().getLastSelectedPathComponent();
-
-				JTree selectedTree = allTabsInfo.get(tabNo).getTabTree();
-
-				TreePath[] allPaths = selectedTree.getSelectionPaths();
-
-				for (TreePath path : allPaths) {
-					DefaultMutableTreeNode node2 = (DefaultMutableTreeNode) path.getLastPathComponent();
-					Object nodeObj = node2.getUserObject();
-					LoggingTreeNode ltn = (LoggingTreeNode) nodeObj;
-
-					ActionProperties playedAction = allTabsInfo.get(tabNo).getActionObjects().get(ltn.getNodeNumber());
-
-					if (ltn.getCommandName().equalsIgnoreCase("line-chart")) {
-						playbackAction.playChart(playedAction, "line-chart");
-
-					} else if (ltn.getCommandName().equalsIgnoreCase("scatter-plot")) {
-						playbackAction.playChart(playedAction, "scatter-plot");
-					} else if (ltn.getCommandName().equalsIgnoreCase("box-plot")) {
-						playbackAction.playChart(playedAction, "box-plot");
-					} else if (ltn.getCommandName().equalsIgnoreCase("histogram")) {
-						playbackAction.playChart(playedAction, "histogram");
-					}
-
-				}
-				// if (node == null)
-				// return;
-
-				// Object nodeInfo = node.getUserObject();
-
-			}
-		});
-		btnNewButton_1.setIcon(new ImageIcon(project.getClass().getResource("/resource/loggingicons/tinyplay.png")));
-		panel.add(btnNewButton_1);
-
-		btnNewButton_3 = new JButton();
-		btnNewButton_3
-				.setIcon(new ImageIcon(project.getClass().getResource("/resource/loggingicons/smallorangestar.png")));
-		btnNewButton_3.setMargin(new Insets(2, 5, 2, 5));
-		btnNewButton_3.setToolTipText("Add to Favorites");
-
-		btnNewButton_3.addActionListener(new ActionListener() {
-			public void actionPerformed(ActionEvent arg0) {
-
-				int tabNo = tabbedPane.getSelectedIndex();
-				JTree selectedTree = allTabsInfo.get(tabNo).getTabTree();
-				DefaultTreeModel model = (DefaultTreeModel) selectedTree.getModel();
-				TreePath[] allPaths = selectedTree.getSelectionPaths();
-
-				PlaybackTabData currentTabData = allTabsInfo.get(tabNo);
-				String logFileName = currentTabData.getLogFileName();
-
-				BufferedWriter out = null;
-				try {
-					if (tabNo != 0) {
-						out = new BufferedWriter(new FileWriter(logFileName, true));
-					}
-
-					for (TreePath path : allPaths) {
-						DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
-						Object nodeInfo = node.getUserObject();
-						LoggingTreeNode ltn = (LoggingTreeNode) nodeInfo;
-						Object nodeObj = node.getUserObject();
-						LoggingTreeNode logNode = (LoggingTreeNode) nodeObj;
-
-						ActionProperties likedAction = allTabsInfo.get(tabNo).getActionObjects().get(ltn.getNodeNumber());
-						try {
-							if (likedAction.getOtherParameters().get("favorite").equals("true")) {
-								
-								
-								likedAction.getOtherParameters().put("favorite", "false");
-								
-								if(isActionChart(likedAction.getActionCommand())) {
-									if (likedAction.getDataParameters().get("Selected Features") instanceof LinkedTreeMap<?, ?>) {
-										
-										LinkedTreeMap<String, Object> features = (LinkedTreeMap<String, Object>) likedAction
-												.getDataParameters().get("Selected Features");
-										
-										node.setUserObject(new LoggingTreeNode(logNode.getCommandName()+ " ["
-												+ (String) features.entrySet().iterator().next().getValue() + "]"
-												,
-												logNode.getCommandName(), logNode.getNodeNumber()));
-									}
-									else {
-										
-										HashMap<String, Object> features = (HashMap<String, Object>) likedAction
-												.getDataParameters().get("Selected Features");
-										
-										node.setUserObject(new LoggingTreeNode(logNode.getCommandName()+ " ["
-												+ (String) features.entrySet().iterator().next().getValue() + "]"
-												,
-												logNode.getCommandName(), logNode.getNodeNumber()));
-										
-									}
-									
-								}
-								else {
-									
-									node.setUserObject(new LoggingTreeNode(logNode.getCommandName(),
-											logNode.getCommandName(), logNode.getNodeNumber()));
-								}
-								
-								model.reload();
-								expandAllNodes(selectedTree);
-							} else if (likedAction.getOtherParameters().get("favorite").equals("false")) {
-								likedAction.getOtherParameters().put("favorite", "true");
-								
-								if(isActionChart(likedAction.getActionCommand())) {
-									
-									if (likedAction.getDataParameters().get("Selected Features") instanceof LinkedTreeMap<?, ?>) {
-										LinkedTreeMap<String, Object> features = (LinkedTreeMap<String, Object>) likedAction
-												.getDataParameters().get("Selected Features");
-										
-										node.setUserObject(new LoggingTreeNode("<html><p>" + logNode.getCommandName()+ " ["
-												+ (String) features.entrySet().iterator().next().getValue() + "]"
-												
-										+ "   &nbsp;<img src=\"file:src/resource/loggingicons/tinyorangestar.png\" style=\"display:none\" ></p></html>",
-										logNode.getCommandName(), logNode.getNodeNumber()));
-									}
-									else {
-										
-										HashMap<String, Object> features = (HashMap<String, Object>) likedAction
-												.getDataParameters().get("Selected Features");
-										
-										node.setUserObject(new LoggingTreeNode("<html><p>" + logNode.getCommandName()+ " ["
-												+ (String) features.entrySet().iterator().next().getValue() + "]"
-												
-										+ "   &nbsp;<img src=\"file:src/resource/loggingicons/tinyorangestar.png\" style=\"display:none\" ></p></html>",
-										logNode.getCommandName(), logNode.getNodeNumber()));
-										
-									}
-									
-								}
-								else {
-									node.setUserObject(new LoggingTreeNode("<html><p>" + logNode.getCommandName()
-									+ "   &nbsp;<img src=\"file:src/resource/loggingicons/tinyorangestar.png\" style=\"display:none\" ></p></html>",
-									logNode.getCommandName(), logNode.getNodeNumber()));
-								}
-								
-								
-								model.reload();
-								expandAllNodes(selectedTree);
-							} else {
-								likedAction.getOtherParameters().put("favorite", "true");
-								
-								if(isActionChart(likedAction.getActionCommand())) {
-									
-									if (likedAction.getDataParameters().get("Selected Features") instanceof LinkedTreeMap<?, ?>) {
-										
-										LinkedTreeMap<String, Object> features = (LinkedTreeMap<String, Object>) likedAction
-												.getDataParameters().get("Selected Features");
-										
-										node.setUserObject(new LoggingTreeNode("<html><p>" + logNode.getCommandName()+ " ["
-												+ (String) features.entrySet().iterator().next().getValue() + "]"
-												
-										+ "   &nbsp;<img src=\"file:src/resource/loggingicons/tinyorangestar.png\" style=\"display:none\" ></p></html>",
-										logNode.getCommandName(), logNode.getNodeNumber()));
-									}
-									else {
-										
-										HashMap<String, Object> features = (HashMap<String, Object>) likedAction
-												.getDataParameters().get("Selected Features");
-										
-										node.setUserObject(new LoggingTreeNode("<html><p>" + logNode.getCommandName()+ " ["
-												+ (String) features.entrySet().iterator().next().getValue() + "]"
-												
-										+ "   &nbsp;<img src=\"file:src/resource/loggingicons/tinyorangestar.png\" style=\"display:none\" ></p></html>",
-										logNode.getCommandName(), logNode.getNodeNumber()));
-									}
-									
-								}
-								else {
-									node.setUserObject(new LoggingTreeNode("<html><p>" + logNode.getCommandName()
-									+ "   &nbsp;<img src=\"file:src/resource/loggingicons/tinyorangestar.png\" style=\"display:none\" ></p></html>",
-									logNode.getCommandName(), logNode.getNodeNumber()));
-								}
-								model.reload();
-								expandAllNodes(selectedTree);
-
-							}
-						} catch (Exception e) {
-							
-							likedAction.getOtherParameters().put("favorite", "true");
-							
-							if(isActionChart(likedAction.getActionCommand())) {
-								
-								if (likedAction.getDataParameters().get("Selected Features") instanceof LinkedTreeMap<?, ?>) {
-									
-									LinkedTreeMap<String, Object> features = (LinkedTreeMap<String, Object>) likedAction
-											.getDataParameters().get("Selected Features");
-									
-									node.setUserObject(new LoggingTreeNode("<html><p>" + logNode.getCommandName()+ " ["
-											+ (String) features.entrySet().iterator().next().getValue() + "]"
-											
-									+ "   &nbsp;<img src=\"file:src/resource/loggingicons/tinyorangestar.png\" style=\"display:none\" ></p></html>",
-									logNode.getCommandName(), logNode.getNodeNumber()));
-								}
-								else {
-									
-									HashMap<String, Object> features = (HashMap<String, Object>) likedAction
-											.getDataParameters().get("Selected Features");
-									
-									node.setUserObject(new LoggingTreeNode("<html><p>" + logNode.getCommandName()+ " ["
-											+ (String) features.entrySet().iterator().next().getValue() + "]"
-											
-									+ "   &nbsp;<img src=\"file:src/resource/loggingicons/tinyorangestar.png\" style=\"display:none\" ></p></html>",
-									logNode.getCommandName(), logNode.getNodeNumber()));
-								}
-								
-							}
-							else {
-								node.setUserObject(new LoggingTreeNode("<html><p>" + logNode.getCommandName()
-								+ "   &nbsp;<img src=\"file:src/resource/loggingicons/tinyorangestar.png\" style=\"display:none\" ></p></html>",
-								logNode.getCommandName(), logNode.getNodeNumber()));
-							}
-							model.reload();
-							expandAllNodes(selectedTree);
-						}
-
-						if (tabNo != 0)
-							autoSaveLog(tabNo);
-
-					}
-
-				} catch (IOException e) {
-					System.out.println("exception occoured" + e);
-				} finally {
-					try {
-						out.close();
-					} catch (IOException e) {
-						// TODO Auto-generated catch block
-						e.printStackTrace();
-					}
-				}
-			}
-		});
-		panel.add(btnNewButton_3);
-
-		playTree = new JTree();
-		table = new JTable();
-
-		int tabNo = createNewTabAndPopulate(playTree, table, "Current Session", false, getCurrentLoggerFileName());
-		File currentLog;
-		if (getCurrentLoggerFileName() == "") {
-			currentLog = null;
-		} else {
-			currentLog = new File(getCurrentLoggerFileName());
-		}
-
-		readLogAndPopulateTree(currentLog, playTree, tabNo, treeStructure);
-		currentSessionActionNumber = allTabsInfo.get(0).getActionObjects().size() - 1;
-
-		commentButton = new JButton();
-		commentButton.setText("Submit");
-		commentButton.setVisible(true);
-
-	}
-
-	public void addActionToLogTree(ActionProperties action, int actionNumber, JTree tree,
-			HashMap<Integer, DefaultMutableTreeNode> treeStruct) {
-
-		try {
-			DefaultTreeModel dtm = (DefaultTreeModel) tree.getModel();
-
-			if (!action.getActionCommand().equalsIgnoreCase("general-properties")) {
-
-				DefaultMutableTreeNode root = (DefaultMutableTreeNode) dtm.getRoot();
-
-				DefaultMutableTreeNode newNode = null;
-				try {
-					if (action.getOtherParameters().get("favorite").equals("true")) {
-						if (isActionChart(action.getActionCommand())) {
-							LinkedTreeMap<String, Object> features = (LinkedTreeMap<String, Object>) action
-									.getDataParameters().get("Selected Features");
-							newNode = new DefaultMutableTreeNode(new LoggingTreeNode("<html><p>"
-									+ action.getActionCommand() + " ["
-									+ (String) features.entrySet().iterator().next().getValue() + "]"
-									+ "   &nbsp;<img src=\"file:src/resource/loggingicons/tinyorangestar.png\" style=\"display:none\" ></p></html>",
-									action.getActionCommand(), actionNumber));
-						} else {
-							newNode = new DefaultMutableTreeNode(new LoggingTreeNode("<html><p>"
-									+ action.getActionCommand()
-									+ "   &nbsp;<img src=\"file:src/resource/loggingicons/tinyorangestar.png\" style=\"display:none\" ></p></html>",
-									action.getActionCommand(), actionNumber));
-						}
-					} else {
-						if (isActionChart(action.getActionCommand())) {
-							LinkedTreeMap<String, Object> features = (LinkedTreeMap<String, Object>) action
-									.getDataParameters().get("Selected Features");
-							newNode = new DefaultMutableTreeNode(
-									new LoggingTreeNode(
-											action.getActionCommand() + " ["
-													+ features.entrySet().iterator().next().getValue() + "]",
-											action.getActionCommand(), actionNumber));
-						} else {
-							newNode = new DefaultMutableTreeNode(new LoggingTreeNode(action.getActionCommand(),
-									action.getActionCommand(), actionNumber));
-						}
-					}
-				} catch (Exception e) {
-
-					if (isActionChart(action.getActionCommand())) {
-						if (action.getDataParameters().get("Selected Features") instanceof LinkedTreeMap<?, ?>) {
-							LinkedTreeMap<String, Object> features = (LinkedTreeMap<String, Object>) action
-									.getDataParameters().get("Selected Features");
-							newNode = new DefaultMutableTreeNode(
-									new LoggingTreeNode(
-											action.getActionCommand() + " ["
-													+ features.entrySet().iterator().next().getValue() + "]",
-											action.getActionCommand(), actionNumber));
-						} else {
-							HashMap<String, Object> features = (HashMap<String, Object>) action.getDataParameters()
-									.get("Selected Features");
-							newNode = new DefaultMutableTreeNode(
-									new LoggingTreeNode(
-											action.getActionCommand() + " ["
-													+ features.entrySet().iterator().next().getValue() + "]",
-											action.getActionCommand(), actionNumber));
-						}
-
-					} else {
-						newNode = new DefaultMutableTreeNode(new LoggingTreeNode(action.getActionCommand(),
-								action.getActionCommand(), actionNumber));
-					}
-				}
-
-				Integer parent = (int) Double.parseDouble(action.getActionParameters().get("parent").toString());
-
-				if (parent == -1) {
-					dtm.insertNodeInto(newNode, root, root.getChildCount());
-				} else {
-					DefaultMutableTreeNode parentNode = treeStruct.get(parent);
-					dtm.insertNodeInto(newNode, parentNode, parentNode.getChildCount());
-				}
-
-				treeStruct.put(action.getActionNumber(), newNode);
-			}
-			dtm.reload();
-			tree.setRootVisible(false);
-			expandAllNodes(tree);
-
-		} catch (Exception e) {
-			StringWriter sw = new StringWriter();
-			e.printStackTrace(new PrintWriter(sw));
-			String exceptionAsString = sw.toString();
-			printDialog(exceptionAsString);
-		}
-	}
-
-	public void readLogAndPopulateTree(File logFile, JTree tree, int tabNo,
-			HashMap<Integer, DefaultMutableTreeNode> treeStruct) {
-
-		try {
-			Gson gson = new Gson();
-			String jsonLog = "";
-			try {
-				jsonLog = new String(Files.readAllBytes(logFile.toPath()));
-			} catch (Exception e) {
-				jsonLog = "";
-			}
-
-			tree.removeAll();
-			tree.setModel(new DefaultTreeModel(new DefaultMutableTreeNode("")));
-
-			String listOfActions = "[" + jsonLog + "]";
-
-			ActionProperties[] actionsFromGSON = gson.fromJson(listOfActions, ActionProperties[].class);
-
-			ArrayList<ActionProperties> list1 = new ArrayList<ActionProperties>();
-			Collections.addAll(list1, actionsFromGSON);
-			allTabsInfo.get(tabNo).setActionObjects(list1);
-
-			allTabsInfo.get(tabNo).setTreeStructure(treeStruct);
-
-			for (int action = 1; action < actionsFromGSON.length; action++) {
-
-				addActionToLogTree(actionsFromGSON[action], action, tree, treeStruct);
-
-			}
-		} catch (Exception e) {
-			StringWriter sw = new StringWriter();
-			e.printStackTrace(new PrintWriter(sw));
-			String exceptionAsString = sw.toString();
-			printDialog(exceptionAsString);
-		}
-	}
-
-	public void populateCurrentSessionTree(ActionProperties action) {
-		currentSessionActionNumber++;
-
-		allTabsInfo.get(0).getActionObjects().add(action);
-		addActionToLogTree(action, currentSessionActionNumber, playTree, treeStructure);
-
-	}
-
-	public int createNewTabAndPopulate(JTree playTree, JTable table, String tabName, boolean isClosable,
-			String logFileName) {
-
-		if (tabbedPane == null) {
-			tabbedPane = new ClosableTabbedPane();
-			GridBagConstraints gbc_tabbedPane = new GridBagConstraints();
-			gbc_tabbedPane.gridwidth = 2;
-			gbc_tabbedPane.insets = new Insets(0, 0, 5, 0);
-			gbc_tabbedPane.fill = GridBagConstraints.BOTH;
-			gbc_tabbedPane.gridx = 0;
-			gbc_tabbedPane.gridy = 7;
-			add(tabbedPane, gbc_tabbedPane);
-		}
-		JSplitPane splitPane = new JSplitPane();
-		splitPane.setResizeWeight(0.36);
-
-		if (isClosable) {
-			tabbedPane.addTab(tabName, null, splitPane, null);
-		} else {
-			tabbedPane.addNonClosableTab(tabName, null, splitPane, null);
-		}
-
-		JScrollPane scrollPane_1 = new JScrollPane();
-		splitPane.setLeftComponent(scrollPane_1);
-		scrollPane_1.setViewportView(playTree);
-
-		JScrollPane scrollPane_2 = new JScrollPane();
-		splitPane.setRightComponent(scrollPane_2);
-
-		// table = new JTable();
-		table.setModel(new DefaultTableModel(new Object[][] { { null, null } }, new String[] { "Property", "Value" }));
-		scrollPane_2.setViewportView(table);
-		Icon closedIcon = new ImageIcon(project.getClass().getResource("/resource/loggingicons/chart.png"));
-		Icon openIcon = new ImageIcon(project.getClass().getResource("/resource/loggingicons/chart.png"));
-		Icon leafIcon = new ImageIcon(project.getClass().getResource("/resource/loggingicons/chart.png"));
-
-		int tabNo = tabbedPane.getTabCount() - 1;
-		PlaybackTabData newPlaybackTab = new PlaybackTabData();
-		newPlaybackTab.setLogFileName(logFileName);
-		newPlaybackTab.setTabNumber(tabNo);
-		newPlaybackTab.setTabTree(playTree);
-		newPlaybackTab.setTabTable(table);
-
-		allTabsInfo.put(tabbedPane.getTabCount() - 1, newPlaybackTab);
-
-		playTree.addMouseListener(new MouseAdapter() {
-			public void mouseClicked(MouseEvent me) {
-
-				try {
-					ActionProperties[] actionObj = new ActionProperties[allTabsInfo.get(tabNo).getActionObjects()
-							.size()];
-					try {
-						actionObj = allTabsInfo.get(tabNo).getActionObjects().toArray(actionObj);
-					} catch (Exception e) {
-						StringWriter sw = new StringWriter();
-						e.printStackTrace(new PrintWriter(sw));
-						String exceptionAsString = sw.toString();
-						printDialog(exceptionAsString);
-					}
-
-					DefaultMutableTreeNode node = (DefaultMutableTreeNode) playTree.getLastSelectedPathComponent();
-
-					if (node == null)
-						// Nothing is selected.
-						return;
-
-					Object nodeInfo = node.getUserObject();
-
-					LoggingTreeNode ltn = (LoggingTreeNode) nodeInfo;
-
-					ArrayList<Object[]> tableList = new ArrayList<Object[]>();
-
-					Object[] commentsObj = new Object[2];
-					commentsObj[0] = "<html><b>Comments</b></html>";
-
-					try {
-						commentsObj[1] = allTabsInfo.get(tabNo).getActionObjects().get(ltn.getNodeNumber())
-								.getOtherParameters().get("comments");
-					} catch (Exception e) {
-						commentsObj[1] = "";
-					}
-
-					tableList.add(commentsObj);
-
-					
-
-					if (actionObj[ltn.getNodeNumber()].getDataParameters() != null
-							&& actionObj[ltn.getNodeNumber()].getDataParameters().size() > 0) {
-
-						for (Map.Entry<String, Object> entry : actionObj[ltn.getNodeNumber()].getDataParameters()
-								.entrySet()) {
-							Object[] num1Obj = new Object[2];
-							num1Obj[0] = entry.getKey();
-							num1Obj[1] = "";
-							if (entry.getValue() instanceof List<?>) {
-								List<String> actionList = (List<String>) entry.getValue();
-								for (int i = 0; i < actionList.size(); i++) {
-									num1Obj[1] += actionList.get(i) + "\n";
-
-								}
-							} else if (entry.getValue() instanceof Map<?, ?>) {
-								Map<?, ?> actionMap = (Map<?, ?>) entry.getValue();
-								for (Map.Entry<?, ?> entry1 : actionMap.entrySet()) {
-									num1Obj[1] += entry1.getValue() + "\n";
-									
-								}
-							} else if (entry.getValue() instanceof String[]) {
-								String[] actionArray = (String[]) entry.getValue();
-								for (int i = 0; i < actionArray.length; i++) {
-									num1Obj[1] += actionArray[i] + "\n";
-									
-								}
-							} else {
-								num1Obj[1] = entry.getValue();
-								
-							}
-
-							tableList.add(num1Obj);
-						}
-					}
-
-					Object[] num1p1 = new Object[2];
-					num1p1[0] = "<html><b>Timestamp</b></html>";
-					num1p1[1] = actionObj[ltn.getNodeNumber()].getTimestamp();
-					tableList.add(num1p1);
-
-					Object[] tableListObj = (Object[]) tableList.toArray();
-					int objLen = tableListObj.length;
-					Object[][] exactLengthObj = new Object[objLen][2];
-
-					for (int j = 0; j < objLen; j++) {
-						exactLengthObj[j] = (Object[]) tableListObj[j];
-					}
-
-					table.setModel(new DefaultTableModel(exactLengthObj, new String[] { "Parameter", "Value" }) {
-						@Override
-						public void setValueAt(Object aValue, int row, int column) {
-							// Here update DB with a SwingWorker and the new provided value
-							super.setValueAt(aValue, row, column);
-							if (row == 0 && column == 1) {
-								try {
-
-									int rowlen = (aValue.toString().length() / 13) * 25;
-									if (rowlen > 0) {
-
-										table.setRowHeight(0, rowlen);
-									} else {
-										table.setRowHeight(0, 20);
-									}
-
-									allTabsInfo.get(tabNo).getActionObjects().get(ltn.getNodeNumber())
-											.getOtherParameters().put("comments", aValue);
-
-									if (tabNo != 0)
-										autoSaveLog(tabNo);
-								} catch (Exception e) {
-									StringWriter sw = new StringWriter();
-									e.printStackTrace(new PrintWriter(sw));
-									String exceptionAsString = sw.toString();
-									printDialog(exceptionAsString);
-								}
-
-							}
-
-						}
-					});
-
-					table.getColumnModel().getColumn(1).setCellRenderer(new MultilineTableRenderer());
-					table.getColumnModel().getColumn(1).setCellEditor(new MultilineTableCellEditor());
-
-					for (int i = 0; i < exactLengthObj.length; i++) {
-
-						if (exactLengthObj[i][1] != null) {
-							String col1 = exactLengthObj[i][1].toString();
-							int numEnters = 0;
-							for (int x = 0; x < col1.length(); x++) {
-								if (col1.charAt(x) == '\n' || col1.charAt(x) == '\r') {
-									numEnters++;
-								}
-							}
-							int rowlen = (col1.length() / 10) * 25;
-							rowlen += numEnters;
-							if (rowlen > 0) {
-
-								table.setRowHeight(i, rowlen);
-							} else {
-								table.setRowHeight(i, 20);
-							}
-
-						}
-					}
-
-					// table.setShowHorizontalLines(false);
-					table.setColumnSelectionAllowed(true);
-					table.setRowSelectionAllowed(true);
-
-				} catch (Exception e) {
-					StringWriter sw = new StringWriter();
-					e.printStackTrace(new PrintWriter(sw));
-					String exceptionAsString = sw.toString();
-					printDialog(exceptionAsString);
-				}
-			}
-		});
-
-		DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) playTree.getCellRenderer();
-
-		renderer.setClosedIcon(closedIcon);
-		renderer.setOpenIcon(openIcon);
-		renderer.setLeafIcon(leafIcon);
-
-		return tabNo;
-	}
-
-	public void printDialog(String msg) {
-		JDialog jd = new JDialog();
-		JTextPane jt = new JTextPane();
-		jt.setText(msg);
-		jt.setBounds(10, 10, 300, 100);
-		jd.getContentPane().add(jt);
-		jd.setBounds(100, 100, 500, 200);
-		jd.setVisible(true);
-	}
-
-	public String getCurrentLoggerFileName() {
-		if (logger != null) {
-			org.apache.logging.log4j.core.Logger loggerImpl = (org.apache.logging.log4j.core.Logger) logger;
-			Appender appender = loggerImpl.getAppenders().get("reproducibilityAppender");
-
-			return ((FileAppender) appender).getFileName();
-		} else {
-			return "";
-		}
-	}
-
-	public void expandAllNodes(JTree tree) {
-		int j = tree.getRowCount();
-		int i = 0;
-		while (i < j) {
-			tree.expandRow(i);
-			i += 1;
-			j = tree.getRowCount();
-		}
-	}
-
-	public void autoSaveLog(int tabNo) {
-
-		FileWriter fw = null;
-		try {
-			PlaybackTabData currentTabData = allTabsInfo.get(tabNo);
-			String logFileName = currentTabData.getLogFileName();
-
-			Gson gson = new GsonBuilder().setPrettyPrinting().create();
-			ArrayList<ActionProperties> ap = new ArrayList<ActionProperties>();
-
-			for (ActionProperties act : allTabsInfo.get(tabNo).getActionObjects()) {
-				if (act != null) {
-					ap.add(act);
-				}
-			}
-
-			ActionProperties[] apArray = ap.toArray(new ActionProperties[ap.size()]);
-
-			fw = new FileWriter(logFileName, false);
-			String outputJson = gson.toJson(apArray);
-			String output = outputJson.substring(1, outputJson.length() - 2);
-			output = output.replaceAll("\r", "");
-			fw.write(output);
-
-		} catch (Exception e2) {
-			StringWriter sw = new StringWriter();
-			e2.printStackTrace(new PrintWriter(sw));
-			String exceptionAsString = sw.toString();
-			printDialog(exceptionAsString);
-		} finally {
-			try {
-				fw.close();
-			} catch (IOException e) {
-				// TODO Auto-generated catch block
-				e.printStackTrace();
-				StringWriter sw = new StringWriter();
-				e.printStackTrace(new PrintWriter(sw));
-				String exceptionAsString = sw.toString();
-				printDialog(exceptionAsString);
-			}
-		}
-
-	}
-	
-	public boolean isActionChart(String actionCommand) {
-		
-		if (actionCommand.equalsIgnoreCase("line-chart")
-				|| actionCommand.equalsIgnoreCase("bar-chart")
-				|| actionCommand.equalsIgnoreCase("histogram")
-				|| actionCommand.equalsIgnoreCase("scatter-plot")
-				|| actionCommand.equalsIgnoreCase("box-plot")
-				|| actionCommand.equalsIgnoreCase("line-chart-default-grouping")
-				|| actionCommand.equalsIgnoreCase("line-chart-choose-grouping")) {
-			
-			return true;
-			
-		}
-		else {
-			return false;
-		}
-	}
-}
-
-class MultilineTableRenderer extends JTextArea implements TableCellRenderer {
-	public MultilineTableRenderer() {
-		setOpaque(true);
-		setLineWrap(true);
-		setWrapStyleWord(true);
-	}
-
-	public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,
-			int row, int column) {
-
-		if (isSelected) {
-			setForeground(Color.WHITE);
-			setBackground(table.getSelectionBackground());
-		} else {
-			setForeground(Color.BLACK);
-			setBackground(table.getBackground());
-		}
-
-		setText((value == null) ? "" : value.toString());
-		return this;
-	}
-}
-
-class MultilineTableCellEditor extends AbstractCellEditor implements TableCellEditor {
-
-	JComponent component = new JTextArea();
-
-	public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int rowIndex,
-			int vColIndex) {
-
-		((JTextArea) component).setText((String) value);
-
-		return component;
-	}
-
-	public Object getCellEditorValue() {
-		return ((JTextArea) component).getText();
-	}
-}
\ No newline at end of file
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/SearchByExpressionFrame.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/SearchByExpressionFrame.java
index 8af2880..e4988df 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/SearchByExpressionFrame.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/SearchByExpressionFrame.java
@@ -22,25 +22,17 @@ import javax.swing.table.DefaultTableModel;
 import javax.swing.table.TableCellRenderer;
 import javax.swing.table.TableRowSorter;
 
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
 //import com.itextpdf.xmp.impl.Utils;
 
 import edu.iastate.metnet.metaomgraph.AnimatedSwingWorker;
-import edu.iastate.metnet.metaomgraph.MetaOmGraph;
 import edu.iastate.metnet.metaomgraph.MetaOmProject;
-import edu.iastate.metnet.metaomgraph.logging.ActionProperties;
 
 import javax.swing.JScrollPane;
 import javax.swing.JTable;
 import java.awt.event.ActionListener;
 import java.io.IOException;
-import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Date;
-import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
@@ -52,7 +44,6 @@ import javax.swing.JMenu;
 import javax.swing.JMenuItem;
 
 public class SearchByExpressionFrame extends JInternalFrame {
-
 	private JTextField textField;
 	private JTextField textField_1;
 	private JComboBox comboBox;
@@ -214,7 +205,7 @@ public class SearchByExpressionFrame extends JInternalFrame {
 		mntmExportResults.addActionListener(new ActionListener() {
 			@Override
 			public void actionPerformed(ActionEvent arg0) {
-				edu.iastate.metnet.metaomgraph.utils.Utils.saveJTabletofile(table_1, "Search by expression");
+				edu.iastate.metnet.metaomgraph.utils.Utils.saveJTabletofile(table_1);
 			}
 		});
 		mnFile.add(mntmExportResults);
@@ -506,31 +497,12 @@ public class SearchByExpressionFrame extends JInternalFrame {
 		double minVal = 0;
 		double maxVal = 0;
 		List<String> colNames = new ArrayList<>();
-		
-		//Harsha - reproducibility log
-		HashMap<String,Object> actionMap = new HashMap<String,Object>();
-		actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-
-		HashMap<String,Object> dataMap = new HashMap<String,Object>();
-		dataMap.put("searchFor",comboBox.getSelectedItem().toString());
-		
-		HashMap<String,Object> resultLog = new HashMap<String,Object>();
-		
 		try {
 			minVal = Double.parseDouble(textField.getText());
 			maxVal = Double.parseDouble(textField_1.getText());
-			
-			dataMap.put("minVal", minVal);
-			dataMap.put("maxVal", maxVal);
 		} catch (NumberFormatException nfe) {
 			JOptionPane.showMessageDialog(null, "Please check min and max values", "Values error",
 					JOptionPane.ERROR_MESSAGE);
-			
-			resultLog.put("result", "Error");
-			resultLog.put("resultComments", "Please check min and max values");
-			ActionProperties searchByExprAction = new ActionProperties("search-by-expression",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			searchByExprAction.logActionProperties();
-			
 			return;
 		}
 		// get results for selected rows
@@ -538,18 +510,10 @@ public class SearchByExpressionFrame extends JInternalFrame {
 		if (selected == null || selected.length < 1) {
 			JOptionPane.showMessageDialog(null, "Please select rows to search.", "Please select rows",
 					JOptionPane.ERROR_MESSAGE);
-			resultLog.put("result", "Error");
-			resultLog.put("resultComments", "Please select rows to search.");
-			ActionProperties searchByExprAction = new ActionProperties("search-by-expression",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-			searchByExprAction.logActionProperties();
 			return;
 		}
 		List<List<String>> res = new ArrayList<>();
 		// search datacolumns
-
-
-		
-
 		if (searchDC) {
 			try {
 				for (int s = 0; s < selected.length; s++) {
@@ -567,15 +531,6 @@ public class SearchByExpressionFrame extends JInternalFrame {
 					}
 					res.add(temp);
 				}
-				
-				List<String> selRows = new ArrayList<String>();
-				for(int numSelected=0; numSelected<table.getSelectedRowCount();numSelected++) {
-					selRows.add((String)table.getValueAt(selected[numSelected], 0));
-				}
-				dataMap.put("selectedRows", selRows);
-				resultLog.put("result", "OK");
-				ActionProperties launchEnsembl = new ActionProperties("search-by-expression",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				launchEnsembl.logActionProperties();
 
 			} catch (IOException e) {
 				e.printStackTrace();
@@ -598,12 +553,6 @@ public class SearchByExpressionFrame extends JInternalFrame {
 					}
 					res.add(temp);
 				}
-				
-				dataMap.put("selectedRows", selected);
-				resultLog.put("result", "OK");
-				ActionProperties launchEnsembl = new ActionProperties("search-by-expression",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-				launchEnsembl.logActionProperties();
-				
 			} catch (IOException e) {
 				e.printStackTrace();
 			}
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/SimilarityDisplayFrame.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/SimilarityDisplayFrame.java
index ffee738..041a16a 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/SimilarityDisplayFrame.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/SimilarityDisplayFrame.java
@@ -84,7 +84,7 @@ public class SimilarityDisplayFrame extends JInternalFrame {
 			@Override
 			public void actionPerformed(ActionEvent arg0) {
 				// save to file
-				Utils.saveJTabletofile(table,"Similarity Display");
+				Utils.saveJTabletofile(table);
 			}
 		});
 		mnFile.add(mntmExport);
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/SimpleSearchDialog.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/SimpleSearchDialog.java
index 0bf19fc..d1803e0 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/SimpleSearchDialog.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/SimpleSearchDialog.java
@@ -10,6 +10,7 @@ import javax.swing.border.EmptyBorder;
 
 import edu.iastate.metnet.metaomgraph.MetaOmGraph;
 import edu.iastate.metnet.metaomgraph.MetadataHybrid;
+import edu.iastate.metnet.metaomgraph.SearchMatchType;
 
 import javax.swing.JLabel;
 import javax.swing.JComboBox;
@@ -72,16 +73,17 @@ public class SimpleSearchDialog extends JDialog {
 						String toSearch = txtToSearch.getText();
 						String field = comboBox.getSelectedItem().toString();
 						boolean exact = chckbxNewCheckBox.isSelected();
+						SearchMatchType matchType = exact ? SearchMatchType.IS : SearchMatchType.CONTAINS;
 						boolean matchCase=chckbxMatchCase.isSelected();
 						if (field.equals("All Fields")) {
 							//set field to data column. will use this to highlight results
 							field=obj.getDataColName();
-							res = obj.searchByValue(toSearch, field, exact, true,matchCase);
+							res = obj.searchByValue(toSearch, field, matchType, true,matchCase);
 						} else if (field.equals("Any Field")) {
 							field=obj.getDataColName();
-							res = obj.searchByValue(toSearch, field, exact, false,matchCase);
+							res = obj.searchByValue(toSearch, field, matchType, false,matchCase);
 						} else {
-							res = obj.searchByValue(field, toSearch, field, exact, true,matchCase);
+							res = obj.searchByValue(field, toSearch, field, matchType, true,matchCase);
 						}
 						dispose();
 					}
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/SimpleSearchFrame.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/SimpleSearchFrame.java
index ce3ca81..9cb3f54 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/SimpleSearchFrame.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/SimpleSearchFrame.java
@@ -13,6 +13,7 @@ import javax.swing.JComboBox;
 import javax.swing.JTextField;
 import edu.iastate.metnet.metaomgraph.MetaOmGraph;
 import edu.iastate.metnet.metaomgraph.MetadataHybrid;
+import edu.iastate.metnet.metaomgraph.SearchMatchType;
 
 import javax.swing.JCheckBox;
 import javax.swing.JButton;
@@ -129,17 +130,18 @@ public class SimpleSearchFrame extends JInternalFrame {
 				String toSearch = txtToSearch.getText();
 				String field = comboBox.getSelectedItem().toString();
 				boolean exact = chckbxExactMatch.isSelected();
+				SearchMatchType matchType = exact ? SearchMatchType.IS : SearchMatchType.CONTAINS;
 				boolean matchCase=!chckbxMatchCase.isSelected();
 				List<String> res;
 				if (field.equals("All Fields")) {
 					//set field to data column. will use this to highlight results
 					field=obj.getDataColName();
-					res = obj.searchByValue(toSearch, field, exact, true,matchCase);
+					res = obj.searchByValue(toSearch, field, matchType, true,matchCase);
 				} else if (field.equals("Any Field")) {
 					field=obj.getDataColName();
-					res = obj.searchByValue(toSearch, field, exact, false,matchCase);
+					res = obj.searchByValue(toSearch, field, matchType, false,matchCase);
 				} else {
-					res = obj.searchByValue(field, toSearch, field, exact, true,matchCase);
+					res = obj.searchByValue(field, toSearch, field, matchType, true,matchCase);
 				}
 
 				JTable table = parent.getTable();
@@ -231,17 +233,18 @@ public class SimpleSearchFrame extends JInternalFrame {
 				String toSearch = txtToSearch.getText();
 				String field = comboBox.getSelectedItem().toString();
 				boolean exact = chckbxExactMatch.isSelected();
+				SearchMatchType matchType = exact ? SearchMatchType.IS : SearchMatchType.CONTAINS;
 				boolean matchCase=chckbxMatchCase.isSelected();
 				List<String> res;
 				if (field.equals("All Fields")) {
 					//set field to data column. will use this to highlight results
 					field=obj.getDataColName();
-					res = obj.searchByValue(toSearch, field, exact, true,matchCase);
+					res = obj.searchByValue(toSearch, field, matchType, true,matchCase);
 				} else if (field.equals("Any Field")) {
 					field=obj.getDataColName();
-					res = obj.searchByValue(toSearch, field, exact, false,matchCase);
+					res = obj.searchByValue(toSearch, field, matchType, false,matchCase);
 				} else {
-					res = obj.searchByValue(field, toSearch, field, exact, true,matchCase);
+					res = obj.searchByValue(field, toSearch, field, matchType, true,matchCase);
 				}
 
 				JTable table = parent.getTable();
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/TabButton.java b/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/TabButton.java
deleted file mode 100644
index 3f1ec3c..0000000
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/TabButton.java
+++ /dev/null
@@ -1,71 +0,0 @@
-package edu.iastate.metnet.metaomgraph.ui;
-
-import java.awt.BasicStroke;
-import java.awt.Color;
-import java.awt.Graphics;
-import java.awt.Graphics2D;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-
-import javax.swing.BorderFactory;
-import javax.swing.JButton;
-import javax.swing.JPanel;
-import javax.swing.JTabbedPane;
-import javax.swing.plaf.basic.BasicButtonUI;
-
-public class TabButton extends JButton implements ActionListener {
-	
-	JPanel panel;
-	JTabbedPane pane;
-    public TabButton(JPanel panel, JTabbedPane pane) {
-//        int size = 17;
-//        setPreferredSize(new Dimension(size, size));
-    	this.pane = pane;
-    	this.panel = panel;
-        setToolTipText("close this tab");
-        //Make the button looks the same for all Laf's
-        setUI(new BasicButtonUI());
-        //Make it transparent
-        setContentAreaFilled(false);
-        //No need to be focusable
-        setFocusable(false);
-        setBorder(BorderFactory.createEtchedBorder());
-        setBorderPainted(false);
-        //Making nice rollover effect
-        //we use the same listener for all buttons
-        //addMouseListener(buttonMouseListener);
-        setRolloverEnabled(true);
-        //Close the proper tab by clicking the button
-        addActionListener(this);
-    }
-
-    public void actionPerformed(ActionEvent e) {
-        int i = pane.indexOfTabComponent(panel);
-        if (i != -1) {
-            pane.remove(i);
-        }
-    }
-
-    //we don't want to update UI for this button
-    public void updateUI() {
-    }
-
-    //paint the cross
-    protected void paintComponent(Graphics g) {
-        super.paintComponent(g);
-        Graphics2D g2 = (Graphics2D) g.create();
-        //shift the image for pressed buttons
-        if (getModel().isPressed()) {
-            g2.translate(1, 1);
-        }
-        g2.setStroke(new BasicStroke(2));
-        g2.setColor(Color.BLACK);
-        if (getModel().isRollover()) {
-            g2.setColor(Color.MAGENTA);
-        }
-        int delta = 6;
-        g2.drawLine(delta, delta, getWidth() - delta - 1, getHeight() - delta - 1);
-        g2.drawLine(getWidth() - delta - 1, delta, delta, getHeight() - delta - 1);
-        g2.dispose();
-    }
-}
\ No newline at end of file
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/TreeSearchQueryConstructionPanel.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/TreeSearchQueryConstructionPanel.java
index e18ac8e..ea33dbd 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/TreeSearchQueryConstructionPanel.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/TreeSearchQueryConstructionPanel.java
@@ -5,6 +5,7 @@ import edu.iastate.metnet.metaomgraph.HashtableSavePanel;
 import edu.iastate.metnet.metaomgraph.MetaOmGraph;
 import edu.iastate.metnet.metaomgraph.MetaOmProject;
 import edu.iastate.metnet.metaomgraph.Metadata;
+import edu.iastate.metnet.metaomgraph.SearchMatchType;
 import edu.iastate.metnet.metaomgraph.utils.qdxml.SimpleXMLElement;
 import edu.iastate.metnet.metaomgraph.utils.qdxml.SimpleXMLizable;
 
@@ -242,18 +243,18 @@ public class TreeSearchQueryConstructionPanel extends JPanel
 		private JCheckBox matchCasebox;
 
 		public SearchTermPanel() {
-			this("Any field", false, "",false);
+			this("Any field", SearchMatchType.CONTAINS, "",false);
 		}
 
 		public SearchTermPanel(Metadata.MetadataQuery myQuery) {
-			this(myQuery.getField(), myQuery.isExact(), myQuery.getTerm(),myQuery.isCaseSensitive());
+			this(myQuery.getField(), myQuery.getMatchType(), myQuery.getTerm(),myQuery.isCaseSensitive());
 		}
 
-		public SearchTermPanel(String field, boolean exact, String term,boolean matchCase) {
+		public SearchTermPanel(String field, SearchMatchType matchType, String term,boolean matchCase) {
 			fieldBox = new JComboBox(fieldBoxTerms);
 			fieldBox.setSelectedItem(field);
-			matchBox = new JComboBox(new String[] { "contains", "is" });
-			matchBox.setSelectedIndex(exact ? 1 : 0);
+			matchBox = new JComboBox(new String[] { "contains", "is", "not" });
+			matchBox.setSelectedIndex(matchType.ordinal());
 			searchTermField = new JTextField(term);
 			searchTermField.setColumns(20);
 			matchCasebox = new JCheckBox("Match case");
@@ -288,17 +289,14 @@ public class TreeSearchQueryConstructionPanel extends JPanel
 
 			return fieldBox.getSelectedItem().toString().trim();
 		}
-
-		public boolean exactMatch() {
-			return matchBox.getSelectedItem().toString().equals("is");
-		}
 		
 		public boolean matchCase() {
 			return matchCasebox.isSelected();
 		}
-
-		public String getMatchType() {
-			return matchBox.getSelectedItem().toString();
+		
+		public SearchMatchType getMatchType() {
+			String test = matchBox.getSelectedItem().toString();
+			return SearchMatchType.valueOf(matchBox.getSelectedItem().toString().toUpperCase());
 		}
 
 		public String getSearchTerm() {
@@ -309,7 +307,7 @@ public class TreeSearchQueryConstructionPanel extends JPanel
 			Metadata.MetadataQuery result = new Metadata.MetadataQuery();
 			result.setField(getField());
 			result.setTerm(getSearchTerm());
-			result.setExact(exactMatch());
+			result.setMatchType(getMatchType());
 			result.setCaseSensitive(matchCase());
 			return result;
 		}
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/logFCResultsFrame.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/logFCResultsFrame.java
index 8b14fe7..d886f68 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/logFCResultsFrame.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/ui/logFCResultsFrame.java
@@ -6,12 +6,9 @@ import java.awt.Point;
 import java.awt.event.MouseAdapter;
 import java.awt.event.MouseEvent;
 import java.io.IOException;
-import java.text.SimpleDateFormat;
 import java.util.ArrayList;
-import java.util.Date;
 import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 import java.util.Vector;
 
 import javax.swing.JInternalFrame;
@@ -26,9 +23,6 @@ import javax.swing.JMenu;
 import javax.swing.JTable;
 import javax.swing.table.DefaultTableModel;
 import javax.swing.table.TableCellRenderer;
-
-import org.apache.logging.log4j.Logger;
-
 import edu.iastate.metnet.metaomgraph.AdjustPval;
 import edu.iastate.metnet.metaomgraph.DecimalFormatRenderer;
 import edu.iastate.metnet.metaomgraph.DifferentialExpResults;
@@ -39,7 +33,6 @@ import edu.iastate.metnet.metaomgraph.chart.HistogramChart;
 import edu.iastate.metnet.metaomgraph.chart.MetaOmChartPanel;
 import edu.iastate.metnet.metaomgraph.chart.ScatterPlotChart;
 import edu.iastate.metnet.metaomgraph.chart.VolcanoPlot;
-import edu.iastate.metnet.metaomgraph.logging.ActionProperties;
 import edu.iastate.metnet.metaomgraph.utils.Utils;
 
 import javax.swing.JMenuItem;
@@ -49,7 +42,6 @@ import java.awt.event.ActionListener;
 import java.awt.event.ActionEvent;
 
 public class logFCResultsFrame extends JInternalFrame {
-
 	private JTable table;
 	private List<String> featureNames;
 	private List<Double> mean1;
@@ -153,7 +145,7 @@ public class logFCResultsFrame extends JInternalFrame {
 		mntmSave.addActionListener(new ActionListener() {
 			@Override
 			public void actionPerformed(ActionEvent arg0) {
-				Utils.saveJTabletofile(table, "LogFCResults Frame");
+				Utils.saveJTabletofile(table);
 			}
 		});
 		mnFile.add(mntmSave);
@@ -179,32 +171,7 @@ public class logFCResultsFrame extends JInternalFrame {
 					return;
 				}
 
-				if (myProject.addGeneList(listName, rowIndices, true, false)) {
-					
-					try {
-						//Harsha - reproducibility log
-						HashMap<String,Object> actionMap = new HashMap<String,Object>();
-						actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-						actionMap.put("section", "Feature Metadata");
-
-						HashMap<String,Object> dataMap = new HashMap<String,Object>();
-						dataMap.put("Exported List Name", listName);
-						dataMap.put("List Elements Count", rowIndices.length);
-						Map<Integer,String> selectedItems = new HashMap<Integer,String>();
-
-						for(int rowNum: rowIndices) {
-							selectedItems.put(rowNum, myProject.getDefaultRowNames(rowNum));
-						}
-						dataMap.put("Selected Rows", selectedItems);
-						HashMap<String,Object> resultLog = new HashMap<String,Object>();
-						resultLog.put("result", "OK");
-
-						ActionProperties mergeListAction = new ActionProperties("export-list",actionMap,dataMap,resultLog,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-						mergeListAction.logActionProperties();
-					}
-					catch(Exception e1) {
-
-					}
+				if (myProject.addGeneList(listName, rowIndices, true)) {
 					JOptionPane.showMessageDialog(logFCResultsFrame.this, "List" + listName + " added", "List added",
 							JOptionPane.INFORMATION_MESSAGE);
 				}
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/utils/ExceptionHandler.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/utils/ExceptionHandler.java
index d8b730d..aee7997 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/utils/ExceptionHandler.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/utils/ExceptionHandler.java
@@ -1,9 +1,9 @@
 package edu.iastate.metnet.metaomgraph.utils;
 
 import edu.iastate.metnet.metaomgraph.MetaOmGraph;
+import edu.iastate.metnet.metaomgraph.ui.CustomFileSaveDialog;
+import edu.iastate.metnet.metaomgraph.ui.CustomMessagePane;
 
-import java.awt.AWTException;
-import java.awt.Container;
 import java.awt.Dialog;
 import java.awt.Dimension;
 import java.awt.Frame;
@@ -16,20 +16,28 @@ import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.awt.image.BufferedImage;
 import java.io.BufferedOutputStream;
+import java.io.BufferedReader;
 import java.io.File;
+import java.io.FileWriter;
 import java.io.IOException;
+import java.io.InputStreamReader;
 import java.io.OutputStream;
 import java.io.PrintStream;
-import java.net.PasswordAuthentication;
+import java.io.UnsupportedEncodingException;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Map;
 import java.util.Properties;
+import java.util.stream.Collectors;
+
 import javax.activation.DataHandler;
 import javax.activation.DataSource;
 import javax.activation.FileDataSource;
 import javax.imageio.ImageIO;
 import javax.mail.BodyPart;
 import javax.mail.Message;
-import javax.mail.MessagingException;
 import javax.mail.Multipart;
 import javax.mail.Session;
 import javax.mail.Transport;
@@ -43,13 +51,21 @@ import javax.swing.JCheckBox;
 import javax.swing.JDialog;
 import javax.swing.JInternalFrame;
 import javax.swing.JLabel;
-import javax.swing.JOptionPane;
 import javax.swing.JPanel;
 import javax.swing.JScrollPane;
 import javax.swing.JTextArea;
 import javax.swing.JTextField;
 import javax.swing.JTree;
 
+import org.apache.http.HttpResponse;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.entity.StringEntity;
+import org.apache.http.impl.client.CloseableHttpClient;
+import org.apache.http.impl.client.HttpClients;
+
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParser;
+
 public class ExceptionHandler implements Thread.UncaughtExceptionHandler {
 	private Frame fp = null;
 	private Dialog dp = null;
@@ -145,15 +161,614 @@ public class ExceptionHandler implements Thread.UncaughtExceptionHandler {
 			return output.toString();
 		}
 	}
+	
+	// Convert map to string in Json Format.
+	private String toJsonFormat(Map<String, String> map) {
+		String json = "{\r\n" + map.entrySet().stream()
+			    .map(ent -> "\""+ ent.getKey() + "\"" + ": " + String.valueOf(ent.getValue()) + "")
+			    .collect(Collectors.joining(",\r\n")) + "\r\n}" ;
+		return json;
+	}
+	
+	/**
+	 * Save the error log to a file.
+	 * @param errorLog
+	 */
+	private void saveErrorLogToFile(String errorLog) {
+		HashMap<String, String> fileFilters = new HashMap<String, String>();
+		fileFilters.put("Log files", "log");
+		fileFilters.put("Text files", "txt");
+		String appendDate = new SimpleDateFormat("yyyy-MM-dd_hh:mm:ss").format(new Date());
+		String fileName = "error_" + appendDate + ".log";
+		
+		CustomFileSaveDialog saveFileDailog = new CustomFileSaveDialog(fileName, "Save error log", fileFilters);
+		File savedFile = saveFileDailog.showSaveDialog();
+		if(savedFile == null)
+			return;
+		try {
+			FileWriter fileWriter = new FileWriter(savedFile);
+			fileWriter.write(errorLog);
+			fileWriter.close();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+	}
+	
+	private void displaySuccessMessage(String url) {
+		CustomMessagePane messageBox = new CustomMessagePane("Report error", 
+				"Error is reported to the developer.\nAn issue is created at: " + url,
+				CustomMessagePane.MessageBoxType.INFORMATION, 
+				CustomMessagePane.MessageBoxButtons.OK);
+		
+		messageBox.displayMessageBox();		
+	}
+	
+	/**
+	 * @author sumanth
+	 * Create the git issues from error logs.
+	 * @param errorLog
+	 */
+	private void createGitIssue(String errorLog) {
+		PropertyFileReader properties = null;
+		try {
+			properties = new PropertyFileReader("/resource/config.properties");
+		} catch (IOException e1) {
+			errorLog += "\n" + e1.getMessage();
+		}
+		
+		// get token and url from config.properties file.
+		String token = "token " + properties.getProperty("gittoken");
+		String url = properties.getProperty("gitissueUrl");
+		
+		Map<String, String> postContentsMap = new HashMap<String, String>();
+		postContentsMap.put("title", "\"Crash reported from user\"");
+		postContentsMap.put("body", '\"' + errorLog.toString().replaceAll("[\r\n]+", "\\\\n") + '\"');
+		postContentsMap.put("labels", "[\"bug\"]");
+		
+		String jsonFormatedMap = toJsonFormat(postContentsMap);
+		
+		CloseableHttpClient httpClient = HttpClients.createDefault();
+		
+		HttpPost postRequest = new HttpPost(url);
+		postRequest.addHeader("Content-Type", "application/json");
+		postRequest.addHeader("Authorization", token);
+		try {
+			postRequest.setEntity(new StringEntity(jsonFormatedMap));
+		} catch (UnsupportedEncodingException e1) {
+			e1.printStackTrace();
+		}
+		
+		HttpResponse response = null;
+		try {
+			response = httpClient.execute(postRequest);
+		} catch (IOException e1) {
+			e1.printStackTrace();
+		}
+				
+		if(response == null || response.getStatusLine().getStatusCode() != 201) {
+			CustomMessagePane messageBox = new CustomMessagePane("Report error", 
+					"Cannot report the error, please check your internet connection." + 
+					"\nDo you want to save the error log file and report it later?",
+					CustomMessagePane.MessageBoxType.ERROR, 
+					CustomMessagePane.MessageBoxButtons.YES_NO);
+			
+			if(messageBox.displayMessageBox() == CustomMessagePane.UserClickedButton.YES)
+				saveErrorLogToFile(errorLog);
+		}
+		else {
+			try {
+				BufferedReader responseReader = new BufferedReader(
+						new InputStreamReader(response.getEntity().getContent()));
+				
+				String output;
+				StringBuffer responseOutput = new StringBuffer();
+
+				while ((output = responseReader.readLine()) != null) {
+					responseOutput.append(output);
+				}
+				responseReader.close();
+				JsonObject jsonObj = JsonParser.parseString(responseOutput.toString()).getAsJsonObject();
+				String urlTemp = jsonObj.get("html_url").getAsString();
+				displaySuccessMessage(urlTemp);
+			} catch (UnsupportedOperationException e) {
+				e.printStackTrace();
+			} catch (IOException e) {
+				e.printStackTrace();
+			}
+		}
+		try {
+			httpClient.close();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+	}
 
 	@Override
 	public void uncaughtException(Thread t, Throwable e) {
 
-		return;
+		e.printStackTrace();
+		JLabel message = new JLabel(
+				"<html>MetaOmGraph has encountered an error.<br>Click \"Notify\" to send the error information to the developers.  No personal information will be sent.</html>");
+
+		message.setIcon(new ImageIcon(getClass().getResource("/resource/tango/32x32/actions/process-stop.png")));
+
+		if (fp == null) {
+			dialog = new JDialog(dp, "Error", true);
+		} else {
+			dialog = new JDialog(fp, "Error", true);
+		}
+		dialog.setModal(true);
+		dialog.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
+		dialog.getContentPane().setLayout(new GridBagLayout());
+		final GridBagConstraints c = new GridBagConstraints();
+		c.gridx = 0;
+		c.gridy = 0;
+		c.anchor = 21;
+		c.gridheight = 1;
+		c.gridwidth = 2;
+		c.weightx = 0.5D;
+		c.weighty = 0.0D;
+		c.anchor = 10;
+		c.insets = new Insets(2, 5, 2, 5);
+		dialog.getContentPane().add(message, c);
+
+		JLabel emailLabel = new JLabel("Email address (optonal):");
+		final JTextField emailField = new JTextField();
+		c.gridy = 2;
+		c.gridwidth = 1;
+		c.weightx = 0.0D;
+		c.fill = 0;
+		c.anchor = 13;
+		dialog.getContentPane().add(emailLabel, c);
+		c.gridx = 1;
+		c.weightx = 1.0D;
+		c.fill = 2;
+		dialog.getContentPane().add(emailField, c);
+
+		JLabel commentLabel = new JLabel("Comments (optional):");
+		final JTextArea commentArea = new JTextArea();
+		JScrollPane commentPane = new JScrollPane(commentArea);
+		commentPane.setPreferredSize(
+				new Dimension(commentArea.getPreferredSize().width, commentLabel.getPreferredSize().height * 3));
+		c.gridy = 3;
+		c.gridx = 0;
+		c.anchor = 12;
+		c.fill = 0;
+		c.weightx = 0.0D;
+		dialog.getContentPane().add(commentLabel, c);
+		c.gridx = 1;
+		c.weightx = 1.0D;
+		c.fill = 1;
+		dialog.getContentPane().add(commentPane, c);
+
+		final JLabel emptyLabel = new JLabel("");
+		c.gridy = 4;
+		c.gridwidth = 2;
+		c.weightx = 1.0D;
+		c.gridx = 0;
+		c.anchor = 10;
+		dialog.getContentPane().add(emptyLabel, c);
+		
+		/////////// add error message urmi
+		boolean shown = false;
+		// urmi changed to ture easy for debugging
+		// boolean shown = true;
+		JScrollPane pane;
+
+		if (!shown) {
+			JTree tree = new JTree(Utils.createTreeFromThrowable(e));
+			pane = new JScrollPane(tree);
+			// pane.setPreferredSize(new Dimension(600, 300));
+			pane.setPreferredSize(new Dimension(1000, 300));
+			c.gridy = 1;
+			c.weighty = 1.0D;
+			dialog.add(pane, c);
+			dialog.pack();
+
+			if (fp != null) {
+				dialog.setLocationRelativeTo(dp);
+			} else {
+				dialog.setLocationRelativeTo(fp);
+			}
+			if (ipf != null) {
+				dialog.setLocationRelativeTo(ipf);
+			} else if (fp != null) {
+				dialog.setLocationRelativeTo(fp);
+			} else {
+				dialog.setLocationRelativeTo(dp);
+			}
+			// detailsButton.setText("Details");
+			shown = true;
+		} else {
+			// dialog.remove(pane);
+			dialog.pack();
+			if (fp == null) {
+				dialog.setLocationRelativeTo(dp);
+			} else {
+				dialog.setLocationRelativeTo(fp);
+			}
+			// detailsButton.setText("Details");
+			shown = false;
+		}
+
+		//////////////// end error message
+
+		JPanel buttonPanel = new JPanel();
+
+		final Throwable thrown = e;
+		JButton okButton = new JButton("Notify");
+		okButton.addActionListener(new ActionListener() {
+			@Override
+			public void actionPerformed(ActionEvent e) {
+				dialog.dispose();
+				StringBuffer text = new StringBuffer("MetaOmGraph Error:\n\n");
+				text.append("Email: " + emailField.getText() + "\nComments:\n" + commentArea.getText());
+				text.append("\nMOG version: " + System.getProperty("MOG.version") + "\nMOG date: "
+						+ System.getProperty("MOG.date") + "\nOS: " + MetaOmGraph.getOsName() + "\n\n");
+				
+				text.append("Error log:\n```\n");
+				StackTraceElement[] trace = thrown.getStackTrace();
+				text.append(thrown.toString());
+				for (StackTraceElement ste : trace) {
+					text.append("\n" + ste);
+				}
+								
+				createGitIssue(text.toString());
+/*
+				 String host = "mailhub.iastate.edu";
+				 String host = "localhost";
+				 String from = "metaomgraph@gmail.com";
+				 String to = "metaomgraph@gmail.com";
+				 
+				// urmi
+				String from = ""; //"metaomgraph@gmail.com";
+				String to = ""; //"metaomgraph@gmail.com";
+				final String username = ""; 
+				final String password = "";
+				Properties props2 = new Properties();
+				props2.put("mail.smtp.auth", "true");
+				props2.put("mail.smtp.starttls.enable", "true");
+				props2.put("mail.smtp.host", "smtp.gmail.com");
+				props2.put("mail.smtp.port", "587");
+				Session session2 = Session.getInstance(props2, new javax.mail.Authenticator() {
+					protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
+						return new javax.mail.PasswordAuthentication(username, password);
+					}
+				});
+*/
+				/*
+				 * try {
+				 * 
+				 * Message message = new MimeMessage(session2); message.setFrom(new
+				 * InternetAddress("metaomgraph@gmail.com"));
+				 * message.setRecipients(Message.RecipientType.TO,
+				 * InternetAddress.parse("metaomgraph@gmail.com"));
+				 * message.setSubject("Testing Subject"); message.setText("Dear Mail Crawler," +
+				 * "\n\n No spam to my email, please!");
+				 * 
+				 * Transport.send(message);
+				 * 
+				 * System.out.println("Done");
+				 * 
+				 * } catch (MessagingException ex) { throw new RuntimeException(ex); }
+				 */
+
+/*
+				try {
+					// JOptionPane.showMessageDialog(null, "sending...");
+					MimeMessage message = new MimeMessage(session2);
+					message.setFrom(new InternetAddress(from));
+					message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));
+					message.setSubject("Automail: MOG Error");
+					StringBuilder messageText = new StringBuilder(text.toString() + "\n\n");
+					if (useBuffer) {
+						System.out.flush();
+						messageText.append("Buffer: " + buffer.toString() + "\n\n");
+					}
+					messageText.append("Email: " + emailField.getText() + "\nComments:" + commentArea.getText());
+					messageText.append("\nMOG version: " + System.getProperty("MOG.version") + "\nMOG date: "
+							+ System.getProperty("MOG.date")+"\n OS: "+MetaOmGraph.getOsName());
+					BodyPart messageBodyPart = new MimeBodyPart();
+
+					messageBodyPart.setText(messageText.toString());
+
+					Multipart multipart = new MimeMultipart();
+					multipart.addBodyPart(messageBodyPart);
+					File dest = null;
+					if (shotBox.isSelected()) {
+						messageBodyPart = new MimeBodyPart();
+						Robot robot = new Robot();
+						Frame f = MetaOmGraph.getMainWindow();
+						Rectangle captureSize = new Rectangle(f.getX(), f.getY(), f.getWidth(), f.getHeight());
+						BufferedImage shot = robot.createScreenCapture(captureSize);
+						dest = File.createTempFile("mog", ".png");
+						ImageIO.write(shot, "png", dest);
+						DataSource source = new FileDataSource(dest);
+						messageBodyPart.setDataHandler(new DataHandler(source));
+						messageBodyPart.setFileName(dest.getName());
+						multipart.addBodyPart(messageBodyPart);
+					}
+					
+
+					message.setContent(multipart);
+
+					// JOptionPane.showMessageDialog(null, "sending2...");
+					Transport.send(message);
+					// JOptionPane.showMessageDialog(null, "sending3...");
+					if (dest != null) {
+						dest.delete();
+					}
+					System.out.println("Mail sent!");
+					// JOptionPane.showMessageDialog(null, "Mail sent!");
+				} catch (MessagingException ex) {
+					ex.printStackTrace();
+				} catch (AWTException e1) {
+					// TODO Auto-generated catch block
+					e1.printStackTrace();
+				} catch (IOException e1) {
+					// TODO Auto-generated catch block
+					e1.printStackTrace();
+				} 
+*/
+			}
+		});
+		JButton cancelButton = new JButton("Cancel");
+		cancelButton.addActionListener(new ActionListener() {
+			@Override
+			public void actionPerformed(ActionEvent e) {
+				dialog.dispose();
+			}
+
+		});
+		final JButton detailsButton = new JButton("Details");
+		detailsButton.addActionListener(new ActionListener() {
+			boolean shown = false;
+			// urmi changed to ture easy for debugging
+			// boolean shown = true;
+			JScrollPane pane;
+
+			@Override
+			public void actionPerformed(ActionEvent e) {
+				if (!shown) {
+					JTree tree = new JTree(Utils.createTreeFromThrowable(thrown));
+					pane = new JScrollPane(tree);
+					// pane.setPreferredSize(new Dimension(800, 600));
+					pane.setPreferredSize(new Dimension(1000, 600));
+					c.gridy = 1;
+					c.weighty = 1.0D;
+					dialog.add(pane, c);
+					dialog.pack();
+
+					if (fp == null) {
+						dialog.setLocationRelativeTo(dp);
+					} else {
+						dialog.setLocationRelativeTo(fp);
+					}
+					detailsButton.setText("Details");
+					shown = true;
+				} else {
+					dialog.remove(pane);
+					dialog.pack();
+					if (fp == null) {
+						dialog.setLocationRelativeTo(dp);
+					} else {
+						dialog.setLocationRelativeTo(fp);
+					}
+					detailsButton.setText("Details");
+					shown = false;
+				}
+
+			}
+		});
+		
+		final JButton saveLogButton = new JButton("Save log");
+		saveLogButton.addActionListener(new ActionListener() {			
+			@Override
+			public void actionPerformed(ActionEvent e) {
+				StringBuffer text = new StringBuffer("MetaOmGraph Error:\n\n");
+				text.append("Email: " + emailField.getText() + "\nComments:\n" + commentArea.getText());
+				text.append("\nMOG version: " + System.getProperty("MOG.version") + "\nMOG date: "
+						+ System.getProperty("MOG.date") + "\nOS: " + MetaOmGraph.getOsName() + "\n\n");
+				
+				text.append("Error log:\n");
+				StackTraceElement[] trace = thrown.getStackTrace();
+				text.append(thrown.toString());
+				for (StackTraceElement ste : trace) {
+					text.append("\n" + ste);
+				}
+				saveErrorLogToFile(text.toString());
+			}
+		});
+		
+		buttonPanel.add(okButton);
+		buttonPanel.add(detailsButton);
+		buttonPanel.add(saveLogButton);
+		buttonPanel.add(cancelButton);
+		c.gridy = 5;
+		c.gridx = 0;
+		c.gridwidth = 2;
+		c.weightx = 0.5;
+		dialog.getContentPane().add(buttonPanel, c);
+		dialog.pack();
+		if (dp != null) {
+			dialog.setLocationRelativeTo(dp);
+		} else if (fp != null) {
+			dialog.setLocationRelativeTo(fp);
+			// fp.dispose();
+		} else {
+			dialog.setLocationRelativeTo(ipf);
+			
+			ipf.dispose();
+		}
+		dialog.setDefaultCloseOperation(2);
+		// dispose charts
+		dialog.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
+		dialog.setVisible(true);
+
+		// System.exit(1);
+		notifyListeners(e);
+
 	}
 
 	public void contact() {
-		return;
+		JLabel message = new JLabel(
+				"<html>Feedback is always appreciated. If you've encountered a problem or have any questions, please let us know!<br>Please enter your comments/questions below. In addition to this, some debugging information will be included.<br>No personal information will be sent unless you provide it.</html>");
+
+		message.setIcon(new ImageIcon(getClass().getResource("/resource/tango/32x32/actions/mail-send-receive.png")));
+
+		if (fp == null) {
+			dialog = new JDialog(dp, "Contact the Developer", true);
+		} else {
+			dialog = new JDialog(fp, "Contact the Developer", true);
+		}
+		dialog.setModal(true);
+		dialog.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
+		dialog.getContentPane().setLayout(new GridBagLayout());
+		final GridBagConstraints c = new GridBagConstraints();
+		c.gridx = 0;
+		c.gridy = 0;
+		c.anchor = GridBagConstraints.LINE_START;
+		c.gridheight = 1;
+		c.gridwidth = 2;
+		c.weightx = 0.5;
+		c.weighty = 0;
+		c.anchor = GridBagConstraints.CENTER;
+		c.insets = new Insets(2, 5, 2, 5);
+		dialog.getContentPane().add(message, c);
+		// c.insets = new Insets(0, 0, 0, 0);
+
+		JLabel emailLabel = new JLabel("Email address (optonal):");
+		final JTextField emailField = new JTextField();
+		c.gridy = 2;
+		c.gridwidth = 1;
+		c.weightx = 0;
+		c.fill = GridBagConstraints.NONE;
+		c.anchor = GridBagConstraints.EAST;
+		dialog.getContentPane().add(emailLabel, c);
+		c.gridx = 1;
+		c.weightx = 1;
+		c.fill = GridBagConstraints.HORIZONTAL;
+		dialog.getContentPane().add(emailField, c);
+
+		JLabel commentLabel = new JLabel("Comments (optional):");
+		final JTextArea commentArea = new JTextArea();
+		JScrollPane commentPane = new JScrollPane(commentArea);
+		commentPane.setPreferredSize(
+				new Dimension(commentArea.getPreferredSize().width, commentLabel.getPreferredSize().height * 3));
+		c.gridy = 3;
+		c.gridx = 0;
+		c.anchor = GridBagConstraints.NORTHEAST;
+		c.fill = GridBagConstraints.NONE;
+		c.weightx = 0;
+		dialog.getContentPane().add(commentLabel, c);
+		c.gridx = 1;
+		c.weightx = 1;
+		c.fill = GridBagConstraints.BOTH;
+		dialog.getContentPane().add(commentPane, c);
+
+		final JCheckBox shotBox = new JCheckBox("Include a screenshot of MetaOmGraph");
+		shotBox.setSelected(true);
+		c.gridy = 4;
+		c.gridwidth = 2;
+		c.weightx = 1;
+		c.gridx = 0;
+		c.anchor = GridBagConstraints.CENTER;
+		dialog.getContentPane().add(shotBox, c);
+
+		JPanel buttonPanel = new JPanel();
+
+		JButton sendButton = new JButton("Send");
+		sendButton.addActionListener(new ActionListener() {
+			@Override
+			public void actionPerformed(ActionEvent e) {
+				dialog.dispose();
+				StringBuffer text = new StringBuffer("MetaOmGraph Comments:\n\n");
+
+				String host = "mailhub.iastate.edu";
+				String from = "mhhur@iastate.edu";
+				String to = "mhhur@iastate.edu";
+
+				Properties props = System.getProperties();
+
+				props.put("mail.smtp.host", host);
+
+				Session session = Session.getDefaultInstance(props, null);
+
+				try {
+					MimeMessage message = new MimeMessage(session);
+					message.setFrom(new InternetAddress(from));
+					message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));
+					message.setSubject("Automail: MOG Comments");
+					StringBuilder messageText = new StringBuilder(text.toString() + "\n\n");
+					if (useBuffer) {
+						System.out.flush();
+						messageText.append("Buffer: " + buffer.toString() + "\n\n");
+					}
+					messageText.append("Email: " + emailField.getText() + "\nComments:" + commentArea.getText());
+					BodyPart messageBodyPart = new MimeBodyPart();
+
+					messageBodyPart.setText(messageText.toString());
+
+					Multipart multipart = new MimeMultipart();
+					multipart.addBodyPart(messageBodyPart);
+
+					File dest = null;
+					if (shotBox.isSelected()) {
+						messageBodyPart = new MimeBodyPart();
+						Robot robot = new Robot();
+						Frame f = MetaOmGraph.getMainWindow();
+						Rectangle captureSize = new Rectangle(f.getX(), f.getY(), f.getWidth(), f.getHeight());
+						BufferedImage shot = robot.createScreenCapture(captureSize);
+						dest = File.createTempFile("mog", ".png");
+						ImageIO.write(shot, "png", dest);
+						DataSource source = new FileDataSource(dest);
+						messageBodyPart.setDataHandler(new DataHandler(source));
+						messageBodyPart.setFileName(dest.getName());
+						multipart.addBodyPart(messageBodyPart);
+					}
+
+					message.setContent(multipart);
+
+					Transport.send(message);
+					if (dest != null) {
+						dest.delete();
+					}
+					System.out.println("Mail sent!");
+				} catch (Exception ex) {
+					ex.printStackTrace();
+				}
+
+			}
+		});
+		JButton cancelButton = new JButton("Cancel");
+		cancelButton.addActionListener(new ActionListener() {
+			@Override
+			public void actionPerformed(ActionEvent e) {
+				dialog.dispose();
+			}
+
+		});
+		buttonPanel.add(sendButton);
+		buttonPanel.add(cancelButton);
+		c.gridy = 5;
+		c.gridx = 0;
+		c.gridwidth = 2;
+		c.weightx = 0.5D;
+		dialog.getContentPane().add(buttonPanel, c);
+		dialog.pack();
+		if (dp != null) {
+			dialog.setLocationRelativeTo(dp);
+		} else if (fp != null) {
+			dialog.setLocationRelativeTo(fp);
+			// fp.dispose();
+		} else {
+			dialog.setLocationRelativeTo(ipf);
+			ipf.dispose();
+		}
+		
+		dialog.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
+		dialog.setDefaultCloseOperation(2);
+		dialog.setVisible(true);
 	}
 
 	private void notifyListeners(Throwable e) {
@@ -169,7 +784,6 @@ public class ExceptionHandler implements Thread.UncaughtExceptionHandler {
 		if (listeners == null) {
 			listeners = new ArrayList();
 		}
-		
 		listeners.add(l);
 	}
 
@@ -182,5 +796,4 @@ public class ExceptionHandler implements Thread.UncaughtExceptionHandler {
 
 	public static void main(String[] args) throws Exception {
 	}
-	
 }
diff --git a/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/utils/PropertyFileReader.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/utils/PropertyFileReader.java
new file mode 100644
index 0000000..575131d
--- /dev/null
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/utils/PropertyFileReader.java
@@ -0,0 +1,44 @@
+/**
+ * 
+ */
+package edu.iastate.metnet.metaomgraph.utils;
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.Properties;
+
+/**
+ * @author sumanth
+ * Read files with .properties extensions
+ */
+public class PropertyFileReader {
+	private Properties prop;
+	
+	/**
+	 * Constructor
+	 * @param propFileName
+	 * @throws IOException
+	 */
+	public PropertyFileReader(String propFileName) throws IOException {
+		prop = new Properties();
+		InputStream inputStream = null;
+		inputStream = PropertyFileReader.class.getResourceAsStream(propFileName);
+		if(inputStream != null) {
+			prop.load(inputStream);
+			inputStream.close();
+		}
+		else
+			throw new FileNotFoundException("Cannot find properties file");
+	}
+	
+	/**
+	 * Get the vale of a property
+	 * @param name propertyName
+	 * @return propertyValue
+	 */
+	public String getProperty(String name) {
+		return prop.getProperty(name, "");
+	}
+
+}
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/utils/Utils.java b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/utils/Utils.java
index f75c93a..6dd0d10 100644
--- a/D://Harsha//java_wksp//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/utils/Utils.java
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/edu/iastate/metnet/metaomgraph/utils/Utils.java
@@ -3,9 +3,7 @@ package edu.iastate.metnet.metaomgraph.utils;
 import java.awt.Color;
 import java.awt.Component;
 import java.awt.Dialog;
-import java.awt.Dimension;
 import java.awt.FileDialog;
-import java.awt.FontMetrics;
 import java.awt.Frame;
 import java.awt.Paint;
 import java.awt.event.ActionEvent;
@@ -20,17 +18,12 @@ import java.io.FilenameFilter;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.OutputStreamWriter;
-import java.io.PrintStream;
 import java.security.InvalidParameterException;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.text.DecimalFormat;
-import java.text.SimpleDateFormat;
 import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Date;
 import java.util.Enumeration;
-import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
@@ -54,23 +47,25 @@ import javax.swing.JPanel;
 import javax.swing.JTable;
 import javax.swing.JTextField;
 import javax.swing.filechooser.FileFilter;
-import javax.swing.table.TableCellRenderer;
+import javax.swing.filechooser.FileNameExtensionFilter;
 import javax.swing.table.TableColumn;
-import javax.swing.table.TableColumnModel;
 import javax.swing.tree.DefaultMutableTreeNode;
 import javax.swing.tree.TreeNode;
 
 import org.apache.commons.math3.analysis.function.Atanh;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import org.apache.poi.ss.usermodel.FillPatternType;
+import org.apache.poi.ss.usermodel.IndexedColors;
+import org.apache.poi.xssf.usermodel.XSSFCell;
+import org.apache.poi.xssf.usermodel.XSSFCellStyle;
+import org.apache.poi.xssf.usermodel.XSSFFont;
+import org.apache.poi.xssf.usermodel.XSSFRow;
+import org.apache.poi.xssf.usermodel.XSSFSheet;
+import org.apache.poi.xssf.usermodel.XSSFWorkbook;
 
 import edu.iastate.metnet.metaomgraph.GraphFileFilter;
 import edu.iastate.metnet.metaomgraph.MetaOmGraph;
-import edu.iastate.metnet.metaomgraph.logging.ActionProperties;
-import edu.iastate.metnet.metaomgraph.ui.MetaOmTablePanel;
 
 public class Utils {
-
 	public static final int LOCUS = 1;
 	public static final int AFFY8K = 2;
 	public static final int AFFY25K = 3;
@@ -1127,8 +1122,63 @@ public class Utils {
 	 * @param table
 	 * @return
 	 */
-	public static int saveJTabletofile(JTable table, String section) {
-		return saveJTabletofile(table, "\t", section);
+	public static int saveJTabletofile(JTable table) {
+		return saveJTabletofile(table, "\t");
+	}
+	
+	/**
+	 * @author sumanth save jtable to excel workbook
+	 * @param table
+	 * @return
+	 */
+	public static int saveJTableToExcel(JTable table) {
+		final File destination = Utils.chooseFileToSave(new FileNameExtensionFilter("Excel Workbook (*.xlsx)", "xlsx"),
+				"xlsx",
+				MetaOmGraph.getMainWindow(), true);
+		if(destination == null)
+			return 0;
+		
+		XSSFWorkbook workBook = new XSSFWorkbook();
+		XSSFSheet sheet = workBook.createSheet("MetaOmGraph data");
+		XSSFRow row = sheet.createRow(0);
+		XSSFCell cell = null;
+		
+		// set column name colors and font.
+		XSSFFont headerFont = workBook.createFont();
+		headerFont.setColor(IndexedColors.BLACK.index);
+		XSSFCellStyle headerCellStyle = sheet.getWorkbook().createCellStyle();
+		headerCellStyle.setFillForegroundColor(IndexedColors.GOLD.index);
+		headerCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
+		headerCellStyle.setFont(headerFont);
+		
+		for(int colIndex = 0; colIndex < table.getColumnCount(); colIndex++) {	
+			cell = row.createCell(colIndex);
+			cell.setCellStyle(headerCellStyle);
+			cell.setCellValue(table.getColumnName(colIndex));
+		}
+		
+		for(int rowIndex = 0; rowIndex < table.getRowCount(); rowIndex++) {
+			row = sheet.createRow(rowIndex + 1);
+			for(int colIndex = 0; colIndex < table.getColumnCount(); colIndex++) {
+				cell = row.createCell(colIndex);
+				cell.setCellValue((String)table.getValueAt(rowIndex, colIndex));
+			}
+		}
+		FileOutputStream out;
+		try {
+			out = new FileOutputStream(destination);
+			workBook.write(out);
+		    out.close();
+		    workBook.close();
+		    JOptionPane.showMessageDialog(null, "File saved to: " + destination.getAbsolutePath(), "File saved",
+					JOptionPane.INFORMATION_MESSAGE);
+		    return 0;
+		} catch (IOException e) {
+			e.printStackTrace();
+			JOptionPane.showMessageDialog(null, "Error in saving file: " + destination.getAbsolutePath(), "Error",
+					JOptionPane.ERROR_MESSAGE);
+			return 1;
+		}
 	}
 
 	/**
@@ -1138,25 +1188,13 @@ public class Utils {
 	 *            delimiter
 	 * @return
 	 */
-	public static int saveJTabletofile(JTable table, String delim, String section) {
+	public static int saveJTabletofile(JTable table, String delim) {
 		int status = 1; // 0 success; 1 fail
 		// export file as tab delimited .txt
 		final File destination = Utils.chooseFileToSave(new GraphFileFilter(GraphFileFilter.TEXT), "txt",
 				MetaOmGraph.getMainWindow(), true);
 		if (destination == null)
 			return 1;
-
-		//Harsha - reproducibility log
-		HashMap<String,Object> actionMap = new HashMap<String,Object>();
-		actionMap.put("parent",MetaOmGraph.getCurrentProjectActionId());
-		actionMap.put("section", section);
-		HashMap<String,Object> dataMap = new HashMap<String,Object>();
-		dataMap.put("fileName", destination.getAbsolutePath());
-
-		HashMap<String,Object> result = new HashMap<String,Object>();
-
-
-
 		try {
 			FileWriter fw = new FileWriter(destination);
 			for (int col = 0; col < table.getColumnCount(); col++) {
@@ -1187,26 +1225,16 @@ public class Utils {
 				// fw.write(thisLine);
 			}
 			fw.close();
-			JOptionPane.showMessageDialog(null, "File saved to:" + destination.getAbsolutePath(), "File saved",
+			JOptionPane.showMessageDialog(null, "File saved to: " + destination.getAbsolutePath(), "File saved",
 					JOptionPane.INFORMATION_MESSAGE);
-			result.put("result", "OK");
 			status = 0;
 		} catch (IOException e) {
 			// TODO Auto-generated catch block
 			e.printStackTrace();
-			JOptionPane.showMessageDialog(null, "Error in saving file:" + destination.getAbsolutePath(), "Error",
+			JOptionPane.showMessageDialog(null, "Error in saving file: " + destination.getAbsolutePath(), "Error",
 					JOptionPane.ERROR_MESSAGE);
-
-			result.put("result", "Error");
-			result.put("resultComments", "Error in saving file:" + destination.getAbsolutePath());
 			status = 1;
 		}
-
-		//Harsha - reproducibility log
-
-		ActionProperties saveAction = new ActionProperties("save-table-to-file",actionMap,dataMap,result,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS zzz").format(new Date()));
-		saveAction.logActionProperties();
-
 		return status;
 	}
 
@@ -1355,7 +1383,7 @@ public class Utils {
 	public static String removeSpecialChars(String s) {
 
 		String[] special = { "/", "\\", "+", "[", "^", "$", ".", "|", "?", "*", "(", ")", "{", "}", "-", "&", "%", "!",
-		";" };
+				";" };
 		// remove spaces
 		String res = s.replaceAll("\\s+", "");
 		try {
@@ -1408,8 +1436,8 @@ public class Utils {
 		}
 
 	}
-
-
+	
+	
 
 	public static void main(String args[]) {
 		String s = "a b/c  $%^a  a*.";
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/lib/l2fprod-common-all.jar b/D://Harsha//java_wksp//MetaOmGraph//src/lib/l2fprod-common-all.jar
deleted file mode 100644
index 45b58a7..0000000
Binary files a/D://Harsha//java_wksp//MetaOmGraph//src/lib/l2fprod-common-all.jar and /dev/null differ
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/log4j2.xml.bkp b/D://Harsha//java_wksp//MetaOmGraph//src/log4j2.xml.bkp
deleted file mode 100644
index 4ed7df5..0000000
--- a/D://Harsha//java_wksp//MetaOmGraph//src/log4j2.xml.bkp
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<Configuration status="INFO">
-	<Appenders>
-		<File name="FileAppender"
-			fileName="..\MOG_SupportingData\logs\reproducibility_log-${date:yyyyMMddHHmmssSSS}.log"
-			immediateFlush="true" append="true">
-			<PatternLayout pattern="%m%n" />
-		</File>
-		<!--  <File name="FileAppender"
-			fileName="${my.log}"
-			immediateFlush="true" append="true">
-			<PatternLayout pattern="%m%n" />
-		</File>-->
-	</Appenders>
-	<Loggers>
-		<Logger name="REPRODUCIBILITY_LOG" level="TRACE"
-			additivity="false">
-
-		</Logger>
-		<Root level="debug">
-			<AppenderRef ref="FileAppender" />
-		</Root>
-	</Loggers>
-</Configuration>
\ No newline at end of file
diff --git a/D://Harsha//MOG_Master//MetaOmGraph//src/resource/config.properties b/D://Harsha//MOG_Master//MetaOmGraph//src/resource/config.properties
new file mode 100644
index 0000000..a92728e
--- /dev/null
+++ b/D://Harsha//MOG_Master//MetaOmGraph//src/resource/config.properties
@@ -0,0 +1,2 @@
+gitissueUrl = https://api.github.com/repos/urmi-21/MetaOmGraph/issues
+gittoken = 
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/chart.png b/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/chart.png
deleted file mode 100644
index 6496b44..0000000
Binary files a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/chart.png and /dev/null differ
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/goldstar.jpg b/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/goldstar.jpg
deleted file mode 100644
index 3d90b24..0000000
Binary files a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/goldstar.jpg and /dev/null differ
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/loggingicon.png b/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/loggingicon.png
deleted file mode 100644
index 32414bb..0000000
Binary files a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/loggingicon.png and /dev/null differ
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/loggingicon2.png b/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/loggingicon2.png
deleted file mode 100644
index f0ffa9e..0000000
Binary files a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/loggingicon2.png and /dev/null differ
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/openlogbutton.png b/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/openlogbutton.png
deleted file mode 100644
index 6489fd8..0000000
Binary files a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/openlogbutton.png and /dev/null differ
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/play_alt-512.png b/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/play_alt-512.png
deleted file mode 100644
index 04fbf81..0000000
Binary files a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/play_alt-512.png and /dev/null differ
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/playall.png b/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/playall.png
deleted file mode 100644
index f2cea00..0000000
Binary files a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/playall.png and /dev/null differ
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/playallbutton.png b/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/playallbutton.png
deleted file mode 100644
index ccdea09..0000000
Binary files a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/playallbutton.png and /dev/null differ
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/playbutton.png b/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/playbutton.png
deleted file mode 100644
index b32b9cc..0000000
Binary files a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/playbutton.png and /dev/null differ
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/smallgoldstar.png b/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/smallgoldstar.png
deleted file mode 100644
index 6f596d3..0000000
Binary files a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/smallgoldstar.png and /dev/null differ
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/smallorangestar.png b/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/smallorangestar.png
deleted file mode 100644
index 3671233..0000000
Binary files a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/smallorangestar.png and /dev/null differ
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/tinyfolder.png b/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/tinyfolder.png
deleted file mode 100644
index 56a7c08..0000000
Binary files a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/tinyfolder.png and /dev/null differ
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/tinyorangestar.png b/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/tinyorangestar.png
deleted file mode 100644
index 6c1414c..0000000
Binary files a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/tinyorangestar.png and /dev/null differ
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/tinyplay.png b/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/tinyplay.png
deleted file mode 100644
index ae53b94..0000000
Binary files a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/tinyplay.png and /dev/null differ
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/yellowstar.jpg b/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/yellowstar.jpg
deleted file mode 100644
index dd3c519..0000000
Binary files a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/yellowstar.jpg and /dev/null differ
diff --git a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/zoomout22.png b/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/zoomout22.png
deleted file mode 100644
index 15504fe..0000000
Binary files a/D://Harsha//java_wksp//MetaOmGraph//src/resource/loggingicons/zoomout22.png and /dev/null differ
